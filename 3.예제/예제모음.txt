21.09.21_1회차
=======================================================================================================
*HTML 문법(기본, 링크, 사진, 표, 체크박스, 셀렉트, 버튼)
=======================================================================================================


































######################################################################################################
개념정리_웹프로그래밍, jsp, url, 도메인, 웹프로그래밍 작동과정

* 웹 프로그래밍이란?
- 웹 프로그래밍이란, 웹 어플리케이션을 구현하는 행위입니다.
- 웹 어플리케이션이란 웹을 기반으로 작동되는 프로그램입니다.
- 웹이란 1개 이상의 사이트가 연결되어 있는 인터넷 서비스의 한가지 형태입니다.
- 인터넷이란 1개 이상의 네트워크가 연결되어 있는 형태를 말합니다.




* 웹 어플리케이션의 장점
- 사용자: 별도의 설치 없이 프로그램을 사용할수 있기 때문에 접근성이 용이.
- 개발자: 사용자용 프로그램을 별도로 제작하지 않고, HTML을 이용하여 사용자UI를 구축하기 때문에,개발에 소요되는 시간과 노력이 줄어듬.


* JSP 웹어플리케이션의 장점.
1. 풍부한 java API 를 사용하여 제작됨.
1. JSP기반의 웹어플리케이션은 특정 운영체제가 아니더라도 호환성의 문제가 없음.
1. 실제 코드가 프로그램에서 노출되지 않기 때문에 보안상의 장점이 있음.


* HTTP 요청과 응답(HyperTextTransferProtocol)
- 브라우저를 통해 인터넷의 자원을 사용할 때 대부분의 경우 HTTP 프로토콜을 사용합니다.
- HTTP 프로토콜은 hyper text문서 즉, HTML 문서를 전송하는 프로토콜입니다.
- 브라우저가 서버의 페이지를 요청(request)하면 서버는 해당 파일을 찾은 다음 HTTP 
	응답(response)를 통해 클라이언트에 전송하는 방식으로 사용자의 요청을 처리합니다.
- 서버로부터 전송된 페이지를 응답페이지라고 하며, 브라우저는 이 응답페이지를 해석(렌더링)하여 화면에 보여줍니다.
-ui: 웹퍼블리셔(HTML,javascript등등) 
-서버: 서버개발자 (jsp)
-db: db개발자

ui ==== 서버 ==== DB

* JSP(Java Server Pages)
- JSP는 HTML 페이지를 만들기 위한 방법 중 하나입니다.
- JSP는 사용자가 코드를 작성한 다음 컴파일 과정을 거치지 않고 서버에서 실행시킬 수 있습니다.
- JSP는 웹 서버에 의해 서블릿으로 변환된 다음 실행됩니다.


* Java Servlets
- 서블릿은 서버에서 실행되는 자바 프로그램입니다.
- 서블릿이 사용자에 의해 요청되면 서버에서는 HTTP request에 응답하기 위해 웹  서버에서  서블릿  객체를 생성하고  
	이를  통해  사용 자의 요청을 처리합니다.

* URL http://192.110.332.11:80/
1. 프로토콜(protocol): 네트워크상에서 약속한 통신규약(HTTP, FTP, SMTP, POP, DHCP)
1. IP주소: 네트워크상에서 특정 컴퓨터를 식별할 수 있는 주소
1. Port 번호: IP주소가 컴퓨터를 식별할 수 있게 해준다면, 포트번호는 해당 컴퓨터의 구동되고 있는 프로그램을 구분할 수 있는 번호.
1. DNS(도메인): IP주소를 인간이 쉽게 외우도록 맵핑한 문자열.


* 웹 서버: 클라이언트의 요청(request)에 의해 정보를 제공해 주는 서버.

* 웹 브라우저: 웹 서버에 정보를 요청하고, 웹서버로부터 정보를 받는 매개체, 이 때 HTTP 프로토콜을 사용함.


* 웹 프로그래밍을 하기 위해 필요한 학습.
1. JAVA(서버, 웹프로그래밍): JAVA웹 어플리케이션을 구현하기 위한 선행학습.
1. HTML(UI,웹퍼블리싱): 웹 어플리케이션을 구현하기 위한 틀.
1. CSS(UI,웹퍼블리싱): 웹 어플리케이션의 레이아웃 및 스타일을 지정하는 언어.
1. JavaScript(UI,웹퍼블리싱): 클라이언트의 기능/동작을 구현하기 위한 언어.

HTML,CSS,JAVASCRIPT,SQL,PHP 등등 언어까지 독학: w3schools.com

######################################################################################################
































######################################################################################################
개념정리_HTML


* HTML
- Hyper Text Markup Language의 약자
- 정적인 웹페이지를 만드는 언어
- 메모장,한글,워드...문서작업이 가능한 프로그램에서는 모두 작성 가능하다.
- HTML 문서는 태그라는 명령어로 구성되어있다.
- 태그의 기본 형식

<태그이름>문서의 내용</태그이름> 여는태그	닫는태그

* HTML form 관련 태그
- input태그: 데이터를 입력하기 위해 사용되는 태그. 속성으로 태그의 종류를 지정합니다.
- type 속성: 태그의 종류를 지정
1. text: 일반적인 text데이터를 입력하기 위해 사용.
1. password: 로그인, 회원가입 페이지 등에서 비밀번호 입력을 하기 위해 사용.
1. checkbox: 데이터 값을 여러 개 전송해야 할 때 사용.
1. radio: 여러 개의 데이터 값 중에 한 개의 값만 전송해야 할 때 사용.
1. select: 리스트 형태의 데이터를 사용.
1. textarea: 여러 줄의 텍스트를 입력하기 위해 사용. 속성 cols와 rows로 행과 열의 크기를 지정.
1. file: 파일 업로드를 위해 사용.
1. button: 버튼 형태를 만들기 위해 사용. 속성으로 value를 지정하여 버튼 안에 들어갈 문자열을 입력.
1. submit: form내의 데이터를 서버로 전송할 때 사용.
1. reset: form내의 데이터를 초기화할 때 사용.


* JDK 설치
- java.sun.com 접속
- JAVA SE 1.8버전 다운로드
- 자바 환경변수 설정.
1. 시스템 변수에 새로만들기 JAVA_HOME에 jdk가 설치된 경로 지정.
1. 시스템 변수 Path에 편집을 눌러
;%JAVA_HOME%\bin;  추가.


* Eclipse 설치
- eclipse.org 접속
- JAVA EE버전 다운로드.


* tomcat  웹  서버 설치
- tomcat.apache.org/
- 톰캣 8.0 버전 http://localhost:8181/
######################################################################################################




























######################################################################################################
예제1)html생성 및 링크걸기



		<기본문법>
basic.text 생성
아래 출력결과가 나오도록 코딩(주석은 빼도됨)

basic.text를 브라우저에서 렌더링 가능한 문서로 변경(html)
브라우저에서 해당 파일을 렌더링하도록 더블클릭(더블클릭시 자동으로 브라우저가 켜지며 브라우저가 랜더링하여 출력해준다.)

소스코드보기하여 주석도확인




		<링크걸기> : 로컬내 파일경로를 이용하여 링크걸기, 리모트 서버의 URL을 이용하여 링크걸기
1)로컬영역에 있는 html파일로 링크걸기

파일만들기: img_link
기본입력
링크걸기: BASIC 페이지로 이동하기
	-이때 주소넣을땐 복사하면 역슬레쉬인데 일반슬레쉬로하여야함
		-로컬내에서 가져오는거니까 http:// 붙일필요없다. c:으로 시작하면됨 두개 콜른이 겹치면 문제생김

basic.html에서도 img_link.html을 링크하기
	-a의 속성 href으로 경로를 넣어줄때 역슬레쉬해도 상관없음
		-역슬레쉬와 일반 슬레쉬가 섞여도상관없음
			-근데 자바에서는 역슬러쉬를 넣으면 이스케이프문자(탈출문자)로 해석할수도 있으니까 일반슬레쉬로 해준다.
				-탈출문자: 문자열로 수용하지 않는 특수 기능을 가진 문자
	-단, 파일 확장자명인 .html을 안적고 파일이름만 적으면 경로를 못찾음

2)naver 서버로 접속하는 링크걸기

HTML 첫 연습!!!!!
2019년 4월 16일 오전 JSP수업입니다!!
Hello JSP~!!!
Hello JSP~!!!
Hello JSP~!!!
Hello JSP~!!!
Hello JSP~!!!
Hello JSP~!!!
lmg_link로 이동하려면 여기를 클릭
######################################################################################################


답:



<!-- HTML주석입니다. -->

<!-- 아래 문서(doctypehtml)는 html 표준 규약을 준수합니다.-->

<!DOCTYPE html>
<html> <!-- 좌측 태그 : html 문서의 시작-->
   <head> <!-- 페이지의 속성과 정보를 설정 -->
	<!--meta charset="EUC-KR"--> <!-- 페이지 인코딩을 한글로=>이거는 오히려 한글이깨지네. -->
     	<meta charset="UTF-8"> <!-- 엥 이거랑 위에꺼 즉 charset안하고 렌더링해도 한글잘뜨네? -->
     	<title>html기초 연습</title> <!-- 웹브라우저로 서버접속했을때(웹사이트접속) 사이트들 제일 위에 보이는 것, NAVER이런거-->
				<!-- 네이버 들어가서 소스보기해서 확인해봐라 title에 NAVER라 되어있다 -->
   </head>
   <body> <!-- 웹브라우저에 실제로 보여질 내용을 작성하는 태그 -->
     HTML 첫 연습!!!!! <br/> <!-- br태그는 줄개행임(java의 \n) -->
     2019년 4월 16일 오전 JSP수업입니다!!	
     <!-- h1 ~ h6 태그는 제목태그입니다. h1태그가 가장 글자 크기가 크며 h6가 가장 작은 글자크기를 가지고 있음. 
     해당하는 태그들은 자동으로 줄개행이
	     일어남 근데 여기 주석에서 엔터친건 반영안되겠지? 
			일자로 쭈욱보이려나? -->
     <h1>Hello JSP~!!!</h1>
     <h2>Hello JSP~!!!</h2>
     <h3>Hello JSP~!!!</h3>
     <h4>Hello JSP~!!!</h4>
     <h5>Hello JSP~!!!</h5>
     <h6>Hello JSP~!!!</h6>

	<a href="C:\IT\1.programming\8.JSP\JspStudy\2.workspace\HTML/img_link.html">lmg_link로 이동하려면 여기를 클릭</a>
   </body>
</html>


























######################################################################################################
예제2)이미지삽입, 절대/상대경로

		<이미지삽입1>
0)세팅
HTML폴더에 image 폴더만들기 -> image에 상어.jpg 넣기
HTML폴더에 금붕어.jpg 넣기
작업위치: image_link

0-2)속성
가로, 세로 : 200픽셀
경로: 절대경로 또는 상대경로
오류시 표시메세지: 금붕어그림, 상어그림

1)절대경로로 삽입
2)상대경로(현재 작성하는 html과 같은 경로상에 있는 파일이라면 경로생략하고 파일명.확장자만 적어도됨/디렉터리라면 안으로들어가면됨)
	-아마 리눅스처럼 ./가 생략된게 아닐까 싶다.
		-맞네
	-이전가기 ../
		-실무에선 관리편의상 절대경로를 많이사용(경로 바뀌거나했을때 상대경로면 찾기어려우니)





######################################################################################################


답:



<!doctype html>
<html>
<head>
	<meta charset="UTF-8">
	<title>ㅎㅎㅎ</title>
</head>
<body>


	<!-- 페이지 링크를 걸려면 a태그를 사용 -->
	<!-- a 태그의 href속성을 사용하여 연결할 페이지의 주소를 적습니다.-->

	<a href="C:/IT/1.programming/8.JSP/JspStudy/2.workspace/HTML/basic.html">BASIC 페이지로 이동하기</a>
	<hr/> <!-- 구분선을 만들어주는 태그-->
	<a href = "https://www.naver.com">네이버로 이동</a>
	<hr/>
	
	<!-- 페이지 내부에 이미지 삽입은 img태그를 사용합니다. 
		img태그의 src속성에 이미지 파일의 경로를 지정함-->
	<img src="C:/IT/1.programming/8.JSP/JspStudy/2.workspace/HTML/금붕어.jpg" width = "200px" 
		height = "200px" alt = "금붕어그림"/>
		<!-- 로딩실패로인해서 엑스박스가 뜨는 등의 경우 alt에서 입력한 문자열이 출력됨 -->
	<hr/>

	<img src="C:/IT/1.programming/8.JSP/JspStudy/2.workspace/HTML/image/상어.jpg" width = "200px" 
		height = "200px" alt = "상어그림"/>

	<hr/>
	<img src="금붕어.jpg" width = "200px" 
		height = "200px" alt = "금붕어그림"/>
		<!-- 로딩실패로인해서 엑스박스가 뜨는 등의 경우 alt에서 입력한 문자열이 출력됨 -->
	<hr/>

	<img src="image/상어.jpg" width = "200px" 
		height = "200px" alt = "상어그림"/>


</body>
</html>




































######################################################################################################
예제3)상대경로_(이미지삽입,링크삽입)

<상대경로를 이용한 이미지삽입+링크삽입> 

0)세팅
image폴더에 img_path.txt 파일생성

0-2)속성
가로, 세로 : 150픽셀 / 130픽셀
경로: 상대경로
오류시 표시메세지: 금붕어그림, 상어그림


1)사진삽입
2)사진을 링크로 삽입
	-그림을 클릭하면 basic.html로 가도록(상대경로로하라)


######################################################################################################



답:




<!doctype html>

<html>
<head>
	<meta charset="UTF-8">
	<title>img_path입니다.</title>
</head>
<body>
	<img src = "상어.jpg" alt = "상어그림"  width = "150px" height = "150px" />
	<hr/>
	
	<img src = "../금붕어.jpg" alt = "금붕어그림" width = "130px" height = "130px" />
	<hr/>

	<a href = "../basic.html">
		<img src="상어.jpg" width = "150px" 
			height = "200px" alt = "상어그림"/>		
	</a>
	<hr/>



</body>
</html>

<명령어>
시작할때 칠 태그 : html, head(meta,title), body
<html>

<head>
	<meta charset = "UTF-8">	: 웹사이트 문자기본포멧을 한글로함
	<title>빙고!</title> 		: 웹사이트타이틀로 보여지게됨
</head>
<body>
	<br/> : 줄개행  // 태그명을적고 바로 슬래쉬를 적는경우는 해당 태그로시작해서 여기서 끝난다 
			//즉 태그하나 자체가 단일기능을 수행한다는것인듯
	<a ref = "로컬내파일경로 혹은 remote URL"> </a> : 링크걸기
	<hr/> : 구분선추가
	<img src="절대or상대경로" width = "원하는픽셀" 
		height = "원하는픽셀" alt = "원하는메세지"/>
	<a ref = "로컬내파일경로 혹은 remote URL"> 			:그림을 링크로두기
		<img src="절대or상대경로" width = "원하는픽셀" 
		height = "원하는픽셀" alt = "원하는메세지"/>
	</a> : 
</body>
</html>





































######################################################################################################
예제4)표

0)세팅
HTML폴더에 table.html 파일 생성

0-2)속성
크기: 3행 4열
경계선: 유
정렬 : 가운데정렬

1)아래의 출력결과에서 경계선이 들어가도록 표를만들어라. 3행 4열
	

이름	나이	성별	주소
홍길동	43세	남자	서울시
박영희	45세	여자	세종시
######################################################################################################



답:



<!doctype html>
<html>
<head>
	<meta charset = "UTF-8">
	<title>table.html입니다.</title>
</head>
<body>
	<table border = "1" align = "center">
		<!-- table태그의 자식태그 tr은 표의 행을 나타냄 tr태그가 3개면 3행 즉 3줄짜리 표가 되는것임-->
		<tr> 
			<!-- tr의 자식태그 td는 항행에 들어갈 열들을 나타냄 현재상황이면 3행 4열짜리 표인거임-->
			<td>이름</td>
			<td>나이</td>
			<td>성별</td>
			<td>주소</td>
		</tr>
		<tr> 
			<td>홍길동</td>
			<td>43세</td>
			<td>남자</td>
			<td>서울시</td>
		</tr>
		<tr> 
			<td>박영희</td>
			<td>45세</td>
			<td>여자</td>
			<td>세종시</td>
		</tr>
	</table>
</body>
</html>




































######################################################################################################
예제5)입력창 버튼

0)세팅
HTML폴더에 input_form.html 파일 생성

0-2)속성


1)버튼

# 아이디: 입력창
# 비밀번호: 입력창

# 전공:  경영학    화학    한국미술    컴퓨터공학 //하나만 선택할수있는 동그란 박스(name은 major나 아무거나해라) 
# 취미:  독서   수면   축구   게임  # 지역: 
//취미는 다중선택가능한 네모박스 지역은 네모창을 클릭하면 아래로 쭉떨어져서 서울,부산 등등 볼수있게하고 네모누르기전에 기본값은 서울
		//서울경기세종제주

//콜른 뒤의 요소들은 모두 각각 공백이 두개식들어가게하라

//마지막에 버튼 2개를 나란히 만드는데 버튼명은 확인버튼과 초기화버튼 이다.
	-type 속성값은 각 이름을 보고 기능에 맞게 입력하시오.
	-기능에 맞게 입력해도 jsp나 javascript에서 먼가 조치를안하면 초기화 눌러도 체그박스나 입력값 없어지지않고 확인눌러도
		어디로 이동하지 않는다.

     
######################################################################################################



답:




<!doctype html>
<html>
<head>
	<meta charset = "UTF-8">
	<title>input_form입니다.</title>
</head>
<body>
	<h2>회원가입 양식</h2><hr/>
	<!-- input태그는 입력창을 만드는 태그입니다. type속성으로 여러가지를 지정할수 있습니다. -->
	# 아이디: <input type="text" /> <br />
	# 비밀번호: <input type="password" /> <br />
		<!-- input태그의 속성인 type의 value를 text로 넣으면 입력되는 양식이 모니터로 직접적으로 표시가되고,
			password를 넣으면 간접적으로 표시된다.(*형태) 
		참고로 br이나 input meta처럼 열고나서 닫는 태그가 없는 단일태그는 여는태그의 제일마지막에 종료의의미로 슬러쉬를
		넣어준다. 하지만 안넣어도 실행 잘된다. 정식문법은 넣는것이니 넣도록 하자-->

	<!-- radio 타입은 동그라미 체크버튼을 만듬. &bsp;는 스페이스바 명령임 &nbsp는 스페이스바 명령임 공백명령 마지막에
		입력되는 공백은 공백으로 안치고 문자와 문자사이만 공백으로치기때문에 마지막에 공백을넣으려면 nbsp를 넣어야함
	name을 똑같은걸로 맞춰줘야 같은 그룹으로 보고 name의 벨류가 같은녀석들 중에서 하나를 선택하게함-->
	# 전공: <input type = "radio" name = "major1" /> 경영학 			&nbsp;                 
	<input type = "radio" name = "major1" /> 화학 					&nbsp;
	<input type = "radio" name = "major1" /> 한국미술 &nbsp;
	<input type = "radio" name = "major1" /> 컴퓨터공학 		&nbsp; <br/>
	
	<!-- type의 value를 checkbox로 하면 다중선택 가능한 네모체크버튼을 만듬)
		이때 이렇게 네모인 박스모양을 바꾸고 이쁘게하는게 css라네 
		type을 button: 일반적인 버튼
			reset: 모든 체크박스나 입력값이 모두 사라짐-->
	# 취미:
	<input type="checkbox" name = "hobby" />    독서&nbsp;
	<input type="checkbox" name = "hobby" />            수면&nbsp;
	<input type="checkbox" name = "hobby" /> 축구&nbsp;
	<input type="checkbox" name = "hobby" /> 게임&nbsp;

	# 지역: 
	<select>
		<option>서울</option>
		<option>경기</option>
		<option>세종</option>
		<option>제주</option>
	</select> <br />

	<input type = "button" value = "확인" /> &nbsp;
	<input type = "reset" value = "초기화" /> &nbsp;
		<!-- 확인 및 초기화가 현재는 생기기만 한거고 다른걸 javascript나 jsp에서 추가조치해줘야함 --> 

</body>
</html>












































































































































21.09.22_2회차
=======================================================================================================
*개발환경, html&jsp 파일만드는법, jsp태그, servlet
=======================================================================================================












































































































######################################################################################################
개념정리_개발환경구축(java jdk설치_환경변수, eclips설치 및 환경설정, tomcat 서버설치, 이클립스에 서버연동 후 서버구동확인)

설치순서
java.sun.com 자바 스탠다드 에디션(java se) jdk8버전 설치
환경변수-> 시스템변수(JAVA_HOME)만들고 만든걸 path에 넣기
eclipse.org 이클립스 최신버전 설치(전에 자바수업에서는 jdk를 8로했으면 비슷하게 맞춰주라했는데 뭔가 다른듯)
	-window-preference-encoding입력(화면밝기는 어피어런스)
	-그후 아래에 나오는 general web이 잇음
	-general의 워크스페이스클릭 -> UTF-8(기본자바에서는 여기까지만 하면됨 하지만 우리는 웹프로그래밍해야하니까 웹설정도건드림)
	-css클릭->encoding select 란에 가서 korean, EUC-KR이라 되어있는걸 iso 10646/Unicode(UTF-8)로 변경
						-둘다 써도되지만 iso가 훨씬 범용성이 있다고 하신다.
	-나머지 html, jsp도 마찬가지설정
	-콘솔있는탭란에 서버스탭을 왼쪽아래로 가져다놓기
	-window->webbrowser : chrom
		-콘솔창에서 코드를 실행하는게아닌 웹브라우저에서 실행할수있는데 그걸 크롬이 가장 빠름
	
tomcat.apache.org에서 Tomcat(웹서버) 설치
	-자바웹에서는 무료서버는 톰캣사용하고 유료서버는 아마존, 한국의 제우스 등이 있다.
	-톰캣 최신버전다운(현재는 10이지만 강의에서 9를 썻으니 일단 9로 설치)


eclips 서버설정
	-서버탭에 noservers are availa이고 클릭해서 만들어라고 되어있음 서버를
	-그거클릭 후 아파치클릭 -> 가장 아래에 tomcat v9.0server 클릭->next
	-이제 톰켓을 넣어주자. 설치한 9.0폴더를 집어넣어라 경로와함께
	-jre는 workbench default jre로 되어있는데 그대로둬라 -> finish
		-기존에 쓰던 jre쓰겠다는거임 (java 8 jdk설치할때 딸려온거)
	-Tomcat v9.0 server at localhost [Stopped, Republicsh] 생긴것 확인
	-이름 더블클릭
	-서버의 로케이션스이동
		-가운대꺼클릭
			-서버위치는 톰켓의 설치경로를 사용한다. 라는의미
	-server options의 moudules auto reload by default 클릭되어있는 것 확인
	-그후 publicsh module ~~ XML files 체크박스 클릭
		-서버설정을 고칠때 원본에 바로 적용하겠냐? 아니면 사본에 저장해놓고 안전하게 수동으로 적용하겠냐?라는거에서
			체크박스를 클릭하면 수동으로 적용하겠다는 뜻
	-http포트를 8080에서 8181로 수정
		-강의장은 겹치는 포트가많아서 저렇게한다는데 나도 수업들을때 같은 명령을 쳐야하니 일단 똑같이 수정
	-저장버튼(왼쪽젤위쯤에 디스크버튼)눌러서 저장
		-설정을 바꿨지만 우리가 수동으로 안바꿨으니까 여전히 republicsh로 떠있다.
			-즉 아직 적용이 안된거
		-서버탭내에서 우측위에 작은미니탭이 6개있는데 가장 우측 텝클릭(문서모양아이콘?)
			-클릭하면 synchronized로 변경된것을 확인

eclips에서 서버구동테스트
	-서버탭에서 서버 재생버튼 아이콘인 미니탭 클릭
		-콘솔창에 빨간색글자들이 후아아악 지나감
		-정보: 서버가 [10,773] 밀리초 내에 시작되었다 확인
		-그리고 콘솔창에 while돌렸을때처럼 빨간색 네모표시가 활성화되면 서버가 구동중인 것이다.
			-중지버튼이 활성화되어있으면 서버가구동중이며 지인들이 내 url 입력하면 내 웹사이트에 들어와서 사용할수있게
			 할수 있음
			-근데 우리는 아직 사이트를 안만들어놨기때문에 외부에서 접속하면 톰캣기본화면이 뜬다고 한다.
	-http://localhost:8181/ 를 검색
		-localhost가 자기 ip를 자동으로 치는거다.
		-실험결과 자기 컴퓨터에서만 아직까지 들어가지고 다른 컴퓨터에서는 접속불가 (같은 공유기 내의 컴퓨터끼리)
	-중지버튼 클릭후 웹브라우저돌아가서 f5하면 사이트에 연결할수없음이라 뜸
######################################################################################################


























######################################################################################################
예제6) 환경구축
1)
2)
3)
	-색깔
	-? 입력후
		-workspace의 text file encoding을 ? 로 변경
		-web문서인 css, html, jsp 그리고 xml까지 ?로 변경
	-window의 ? 변경

4)
	-?.?.org
	-최신버전설치(사이트에러날경우에는 archive로 들어가라)
	-압축폴더풀기

5)
	-서버탭에 ?클릭
	-?클릭-?에 ? v9.0 클릭-next
	-구축된 무료 서버 관련파일들이 모인 폴더 넣기 
		-jre는 그대로
	-servers에 server하나 생긴것 확인 후 더블클릭
		-서버위치 ?설치위치로 체크(server ?)
		-바로 변경사항 적용이아닌 사본을 만든후 ?으로 적용 체크박스 체크(server ?)
		-?설정(8081로 설정)

6)
	-정지미니텝 우측의 문서처럼 생긴 미니탭클릭하여 사본을 원본으로 수동적용

7)
	-재생버튼클릭
	-정보: 몇초내에 시작된지확인
	-웹서버를 동작시킨 피시에서 자기에게 브라우저를 통해 접속하기
		-url: ?
	-이클립스에서 서버동작 중지시킨후 브라우저에서 새로고침이나 다시 접근
		-연결못하는걸 확인
######################################################################################################



답:



1)자바 se의 jdk설치
2)eclips 설치
3)eclips 환경설정
	-색깔
	-encoding 입력후
		-workspace의 text file encoding을 UTF-8 로 변경
		-web문서인 css, html, jsp 그리고 xml까지 iso unicode utf-8로 변경
	-window의 웹브라우저 chrom 변경

4)구현된 무료서버 설치 tomcat
	-tomcat.apache.org
	-최신버전설치(사이트에러날경우에는 archive로 들어가라)
	-압축폴더풀기

5)이클립스 서버설정(톰캣 서버와 이클립스 연동)
	-서버탭에 크리에이트클릭
	-아파치클릭-가장아래에 tomcat v9.0 클릭-next
	-서버폴더 넣기 
		-jre는 그대로
	-servers에 server하나 생긴것 확인 후 더블클릭
		-서버위치 톰캣설치위치로 체크(server location)
		-바로 변경사항 적용이아닌 사본을 만든후 수동으로 적용 체크박스 체크(server options)
		-포트번호설정(8081로 설정)

6)서버설정변경 적용
	-정지미니텝 우측의 문서처럼 생긴 미니탭클릭하여 사본을 원본으로 수동적용

7)구동테스트
	-재생버튼클릭
	-정보: 몇초내에 시작된지확인
	-웹서버를 동작시킨 피시에서 자기에게 브라우저를 통해 접속하기
		-http://localhost:8081
	-이클립스에서 서버동작 중지시킨후 브라우저에서 새로고침이나 다시 접근
		-연결못하는걸 확인





































######################################################################################################
개념정리_html 파일 만드는법

#코딩작업할때는 서버를 중단하고 해야함
#project explorer에 servers 프로젝트가 자동생성되어있는데 이건 톰켓 설정파일 관련한거니 절대삭제 ㄴㄴ


<프로젝트만들기>
file-new - dynamic web project - 이름설정(JSPBasic)-넥스트x2 - context root, directory가 나옴
		(원래자바만할때는 javaproject를 했지만 지금은 웹프로그래밍이니까 이걸로해야함)
	context root : 초기에 들어온 페이지일때 유알엘 뒤에붙는거
	context directory : 웹을 구성할때 자바클래스파일말고도 필요한 것이 이미지, 음성파일, 영상파일, html문서, css파일 등등
				많은데 그놈들이 저장될 기본폴더
		이것들은 일단 그대로 둔다
	generate web.xml deployment descriptor 체크박스 클릭
		-웹의 기본설정들(사용자가 들어왔을때 로그인이 안된 사용자는 들어오지못하는 페이지라던가 접속했을때 어떤페이지를 메인으로
		 보여줄건가 등의 xml파일을 자동으로 이클립스가 만들어주는거임(main메서드만들때 체크하면 자동만들어주는거랑같음))
	그 후 finish 클릭


<만든후>
JSPBasic 프로젝트클릭후 나오는 Java resources랑 webcontent 폴더가 앞으로 가장 중요한 폴더가될거임
	-java resources
		-src : 자바 클래스나 인터페이스 파일이 드어감
		-libraries: 자바 표준 api lang util 등
	-webcontent: 웹에 필요한 동적, 정적문서, 이미지 등들이 모두 들어감
		-meta-inf
		-web-inf
			-위에서 프로젝트만들때 자동으로 만든 web.xml 파일이 여기에 보관됨
			-lib: 자바표준 api가 아닌 외부에서 제공하는  api(라이브러리)가 들어가는 공간

<프로젝트만들때 자동으로 만들도록 체크하여 만든 web.xml파일을 깜빡하고 안만든경우 해당 프로젝트에 다시 만드는법>
	-우선은 기존의 xml 실습을 위해 삭제한다.
deployment descriptor 우클릭
	-generate deployment descriptor stup 클릭
	-잠시기다리면 web.xml 만들어짐 ^_^

여기까지하면 기본적인 골격이 갖추어진것이다.

<html 파일만들기>
jspbasic 우클릭 new html파일만들기 클릭 하면 자동으로 경로가 webcontent로 된다. 여기가 기타파일들 모두 모아놓는곳이라 했으니까.
이름만 변경하면됨 : hello.html 적고 next 클릭
	html 5인(최신버전)걸 확인하고 finish

<코드작업>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>안녕안뇽!</title>
</head>
<body>
	<h2>이클립스로 html작업하기!</h2>
	<a href = "https://www.naver.com">네이버로 이동~~</a>
	<hr />
	<p> <!-- p태그는 문단을 구성하는 태그임 -->
		안녕안녕?? HTML 시작합니다. JSP 2일차 시간입니다.<br />
		<b>2019년 4월 17일 오전 10시 14분입니다.</b> <!-- b태그는  헤드라이트  -->
	</p>
</body>
</html>


<ctrl f11> : 실행해보기
finish -> 웹브라우저에서 실행해봐라
서버온하겠냐고 물어봄 ok	
	-서버가 안켜지면 웹브라우저에서 서버로 접근해서 실행할수가 없기때문임
그럼 자동으로 브라우저가 내피시의 ip와 8181포트로 접근해서 브라우저를 켜서 해당 html파일을 실행된것을 출력해줌


#jsp url 구성
-제일처음에 도메인주소가 나옴
-그후 포트
-그후 context root	
	-프로젝트생성시 따로 변경안하면 프로젝트이름과 같음
	-그럼네이버는 왜 contextroot가 왜 없지? 지웠기때문이다.
-그후 파일명나옴
-url/context root/파일명





######################################################################################################
































######################################################################################################
개념정리_jsp개념, jsp 파일만들기, jsp태그 


#jsp란?
-현재 위에 개념정리마지막 html코드의 안녕안녕~14분입니다까지를 30번 반복시키고싶다.
하지만 html이 java의 코드를 이해해줄리 만무하다.
그래서 .html이 아니라 .jsp로 변경하면 java를 쓸수있도록 만들어놨다.
이것이 바로~~~ jsp다


<jsp파일 만들기>
프로젝트 우클릭
new-jsp만들기클릭
	-이름만 hello.jsp로 변경후 finish

확인: doctype부터 아래로 모두 똑같지만 그위에page에서 사용할 language는 java이고 utf-8이고 뭐 등등 이 있는것을확인
	-이게 jsp파일의 양식임
실행보기
hello.jsp를 hello.html해서 이전거 나오는가확인


* JSP 문서 작성하기
- JSP 특징
1. 동적 웹어플리케이션 컴포넌트
1. .jsp 확장자
1. 클라이언트의 요청에 동적으로 작동하고, 응답은 HTML을 이용.
1. JSP는 웹서버와 통신시에 자동으로 Servlet으로 변환됨.
1. MVC패턴에서 View로 이용됨.




* JSP 태그의 개념 이해(html에서 해당 태그를 쓰면 안먹힘)
- Servlet은 java언어를 이용하여 문서를 작성하고, 출력객체(PrintWriter)를 이용하여 html 코드를 삽입합니다.
- jsp는 서블릿과 반대로 html코드에 java언어를 삽입하여 동적 문서를 만들 수 있습니다.
- html코드 안에 java코드를 삽입하기 위해서는 jsp태그를 이용해야 하며, 이러한 태그를 학습해야 합니다.



* JSP 태그의 종류
1. 스크립트릿(scriptlet): <%	%> 거의 모든 자바코드 기술 가능.(메서드 내부라고 생각하면된다)
2. 지시자(directive): <%@ %> 페이지 속성을 지정.
3. 선언자(declaration): <%! %> 변수나 메서드 선언시 사용.
4. 표현식(expression): <%= %> 결과 값을 출력할 때 사용.
5. 주석(comments): <%--	--%> 코드 주석처리 시에 사



######################################################################################################

































######################################################################################################
개념정리_스크립트릿



* 스크립트릿(Scriptlet)
- JSP페이지에서 JAVA언어를 사용하기 위한 요소 중 가장 많이 사용하는 태그입니다.
- 스크립트릿 안에는 우리가 알고 있는 거의 모든 JAVA코드를 사용할 수 있습니다.
- 스크립트릿 내부에는 메서드 블록 내부에 기술가능한 코드를 작성할 수 있습니다.
	-메서드내부라고생각했을때
		-try~catch, forif 등 다사용가능
		-메서드 만들기 불가
		-클래스선언 불가(로컬클래스? 그거는된데)
		-import 안됨/패키지선언안됨
		-지역변수가능/멤버변수불가능(클래스에서 만들어야하니까)
		-public private 불가 : 멤버에만붙일수있으니까
	-메서드호출가능 

######################################################################################################





























######################################################################################################
예제7) web project 만들기, html 파일만들기, jsp 파일만들기, scriptlet 태그연습1


* JSP 태그의 종류
1. (): , 거의 모든 자바코드 기술 가능.(메서드 내부라고 생각하면된다)
2. (): , 페이지 속성을 지정.
3. (): , 변수나 메서드 선언시 사용.
4. (): , 결과 값을 출력할 때 사용.
5. (): , 코드 주석처리 시에 사


project: JSPBasic(content root)
webcontent(content directory) 내부에 만들파일 2개
hello.html
hello.jsp

html : body내용은 아래처럼 나오도록

이클립스로 jsp작업하기! //2번째로 큰 제목태그로 작성
네이버로 이동~~ //링크
안녕안녕?? HTML 시작합니다. JSP 2일차 시간입니다. 
2019년 4월 17일 오전 10시 21분입니다. //헤드라이트

jsp : 즉 위의 내용에서 for문으로 네이버로이동이란 링크를 50개 돌려보고싶은거였는데 실패했다.
	jsp면 자바의 코드를 알아먹는다메? 근데 왜못먹냐? 이런 상황인거다.
	이걸 고쳐라
	-폴더이름: JspTag
	-파일이름: scriptlet.jsp


이클립스로 jsp작업하기!
for(int i=1;i<51;i++){ 네이버로 이동~~ }
안녕안녕?? HTML 시작합니다. JSP 2일차 시간입니다.

2019년 4월 17일 오전 10시 21분입니다.정말 난많이 


#브라우저에서 자바가 포함된 jsp를 실행하면 자바코드가 보이지않는다.
	-이게바로 자바에서 말하는 자비코드를 노출되지 않는다. 라는 것의 의미라한다.

######################################################################################################



답:



* JSP 태그의 종류
1. 스크립트릿(scriptlet): <%	%> 거의 모든 자바코드 기술 가능.(메서드 내부라고 생각하면된다)
2. 지시자(directive): <%@ %> 페이지 속성을 지정.
3. 선언자(declaration): <%! %> 변수나 메서드 선언시 사용.
4. 표현식(expression): <%= %> 결과 값을 출력할 때 사용.
5. 주석(comments): <%--	--%> 코드 주석처리 시에 사




<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>안녕안뇽!</title>
</head>
<body>
	<h2>이클립스로 html작업하기!</h2>
	<a href = "https://www.naver.com">네이버로 이동~~</a>
	<hr />
	<p> <!-- p태그는 문단을 구성하는 태그임 -->
		안녕안녕?? HTML 시작합니다. JSP 2일차 시간입니다.<br />
		<b>2019년 4월 17일 오전 10시 14분입니다.</b> <!-- b태그는  헤드라이트  -->
	</p>
</body>
</html>





<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>jsp입니다.</title>
</head>
<body>
	<h2>이클립스로 jsp작업하기!</h2>
	for(int i=1;i<51;i++){
		<a href = "https://www.naver.com">네이버로 이동~~</a>
	}
	<hr />
	
	<p> <!-- p태그는 문단을 구성하는 태그임 -->
		안녕안녕?? HTML 시작합니다. JSP 2일차 시간입니다.<br />
		<b>2019년 4월 17일 오전 10시 21분입니다.</b> <!-- b태그는  헤드라이트  -->
	</p>
	
	정말 난많이 ~~ 그대를 많이 아파 했는데~
</body>
</html>


content directory 우클릭 - 뉴 - 폴더 - JspTag로 만들기
폴더 우클릭-뉴-JSP파일


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<% for(int i=0; i<10; i++){%>

<h2>이클립스와 톰캣으로 JSP파일 렌더링하기~~</h2>

<p>
안녕하세요. 오늘은 2019년 4월 17일 수요일입니다. <br />
<i>스크립트릿 연습을 하고 있습니다.</i>
</p><hr />

<%} %>

</body>
</html>



























######################################################################################################
예제8) scriptlet 태그 연습2

1)아래출력결과처럼 나오게 구구단 작성하라

구구단 2단 	//이건 크게
	//여긴 구분선
2x1 = 2
2x2 = 4
2x3 = 6
2x4 = 8
2x5 = 10
2x6 = 12
2x7 = 14
2x8 = 16
2x9 = 18


2)반복문과 조건문을 이용하여 구구단 홀수단(3,5,7,9)를 출력해보세요.

######################################################################################################






답:





<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<% for(int i=0; i<2; i++){%>

<h2>이클립스와 톰캣으로 JSP파일 렌더링하기~~</h2>

<p>
안녕하세요. 오늘은 2019년 4월 17일 수요일입니다. <br />
<i>스크립트릿 연습을 하고 있습니다.</i>
</p><hr />

<%} %>

<h2>구구단 2단</h2> <hr />

<%
	for(int hang=1;hang<=9;hang++){
		//out.print 메서드는 브라우저에 출력을 실행하는 메서드임
		//System.out.println 은 시스템에 출력(콘솔에 출력)
		out.println("2x"+hang + " = " + (2*hang) + "<br />");
	}

%>

<h2>구구단에서 홀수단만 출력합니다.</h2>

<%
	for(int dan=2;dan<=9;dan++){
		if(dan % 2 == 0) continue;
		for(int hang=1;hang<=9;hang++){
			out.println(dan + " x " + hang + " = " + dan*hang
					+ "<br />");
		}
	}
%>



</body>
</html>




































######################################################################################################
개념정리_jsp 태그

클래스 
-가능
	-멤버변수 선언(선언과 동시에초기화), 메서드 선언, 접근제한자, 사용제한자 가능
-불가능	
	-멤버변수 값변경 및 선언 후 초기화
	-메서드 호출 불가 멤버변수 호출 불가
	

메서드 내부에서 가능(생성자블록도 가능)
-가능
	-메서드 호출, 멤버변수 호출, 지역변수 생성, 지역변수 값변경, 멤버변수 값변경
-불가능
	-메서드 생성, 멤버변수 생성, 제한자 불가

#참고: 지역변수는 반드시 초기화해서 사용해야함 멤버변수는 기본값초기화됨
	-그리고 초기화하기위해 r-value로 함수호출하는건 클래스에서도 가능함 

* 선언(Declaration) 데클라레이션
- JSP 페이지 내에서 사용되는 변수 또는 메서드를 선언할 때 사용합니다.
- 여기 선언된 변수 및 메서드는 전역의 의미로 사용됩니다.
	-스크립트릿 내부의 내용은 메서드 내에서 나올수 있는 범위만 나올수있는내용이라면
		선언(declaration) 내부의 내용은 클래스의 내부에서 나올수있는 멤버변수 및 멤버메서드가 나올수 있는 내용인것이다.
			-public private 붙이기가능
			-메서드 선언정의 가능
			-클래스블록 내부다 라고 보면 됨




- JSP 아키텍쳐(구동원리): .jsp파일을 실행(요청)하면 웹 서버에서 우선 jsp파일을 java코드로 변환합니다. 그 이후 그 파일을 컴파일하고 html로 응답합니다.     
 ex)웹브라우저 -> helloworld.jsp -> helloworld_jsp.java(서버에서 servlet화) -> helloworld_jsp.class(서블릿 클래스 컴파일) -> html(응답)
				이걸 서블릿클래스라함					서블릿클래스를 컴파일한 파일

* 표현식(Expression)
- JSP 페이지 내에서 사용되는 변수의 값 또는 메서드 호출 결과 값을 출력하기 위해 사용됩니다.
- 결과 값의 데이터 유형은 String이며, 세미콜론(;)을 사용할 수 없습니다.
- 표현식은 out.println()을 대체합니다.


* 주석(Comments) -> 매우 비밀스럽고 중요할시의 주석 (페이지소스보기를해도 안나옴)
	즉 html 주석보다 jsp 주석이 더 강하다
- 실제 프로그램 실행에는 영향이 없고, 프로그램 설명 등의 목적으로 사용되는 태그입니다.
- HTML 및 JSP 주석이 각각 별도로 존재합니다.
- HTML 주석은 <!--	--> 표기하고, 웹 브라우저에서 페이지 소스보기를 하면 주석도 표기됩니다.
- JSP 주석은 <%-- --%> 표기하고, 웹 브라우저에서 소스보기를 해도 나타나지 않습니다.
- JAVA의 주석도 혼용 사용 가능합니다.(//  ,  /*	~~~ */)

* 지시자(directive)
- JSP페이지의 전체적인 속성을 지정할 때 사용합니다.
1. page: JSP페이지에 대한 정보를 지정한다. JSP가 생성하는 문서의 타입, 출력 버퍼의 크기, 에러 페이지 등 페이지에서 필요로 하는 정보를 설정합니다.

- 페이지 디렉티브에 선언 될 수 있는 속성들
a. language - 언어를 지정합니다. java만 지정할 수 있습니다.
a. import - 패키지를 import할 때 사용합니다.
a. errorPage - 설정 된 페이지에서 에러가 발생했을 시에 미리 만들어 둔 에러 페이지를 호출합니다.
a. contentType - text/html이라고 쓰면 결과가 HTML문서로 만들어집니다.
a. pageEncoding - 출력 문자 인코딩입니다. 기본은 ISO-8859-1이며 한글을 사용하려면 utf-8로 지정합니다.
a. trimDirectiveWhitespaces - 디렉티브나 스크립트릿 코드로 인해서 만들어진 공백 문자를 제거하는 기능.

1. include: JSP 페이지의 특정 영역에 다른 문서를 포함시킵니다.

1. taglib: JSP 페이지에서 사용할 태그 라이브러리를 지정합니다.


######################################################################################################


































######################################################################################################
예제9) 구동원리, expression

1)클라이언트가 서버에 출력을 요청했을때 구동원리
	jsp에서 서블릿이 java파일로 변경하는 과정 두눈으로 확인하라


- JSP 아키텍쳐(구동원리): .jsp파일을 실행(요청)하면 웹 서버에서 우선 jsp파일을 java코드로 변환합니다. 그 이후 그 파일을 컴파일하고 html로 응답합니다.     
 ex)웹브라우저 -> helloworld.jsp -> helloworld_jsp.java(서버에서 servlet화) -> helloworld_jsp.class(서블릿 클래스 컴파일) -> html(응답)
				이걸 서블릿클래스라함					서블릿클래스를 컴파일한 파일


2)expression(표현식)
  declaration을 이용해서 서블릿화 했을시의 public한 멤버변수 String name을 만들고 스크립트릿을 이용하여 지역변수 String address를
  선언하면서 동시에 각각 홍길동, 서울시로 저장하라.
 	-그후 html양식에서 이름: 홍길동\n 주소: 서울시\n 으로 웹브라우저에 출력가능하도록 만들어라.

2-2)그후 이것도 .java로 만들어진 파일 확인해서 _jspService() 메소드에 어떤식으로 작용되었는지 확인하라
		-out.print()임
 

3)comments(주석)
  scriptlet을 이용하여 java의 한줄주석과 여러줄주석을 적어보고 html에서 html 주석과 jsp주석을 사용해보아라
	실행하여 그 차이점도 인지하여라
		-차이점: jsp가 더욱 강력한 주석임


4)directive(지시자)
  Date 클래스를 이용하여 [오늘은 2021년 00월 00일] 형식으로 그날 날짜에 맞게 브라우저에서 출력되도록하라
  

######################################################################################################






답:




2)expression(표현식)




<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%!
	public String name = "홍길동";
%>
<%
	String address = "서울시"; 
%>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<!-- 표현식은 out.print()를 대체함
	out.print하면 나중에 쌍따옴표에다가 + 등을 적어야하고 번거롭다. -->

이름: <%= name %> <br /> <!-- out.print("이름"+name+"<br />"); -->
주소: <%= address %> <br />

</body>
</html>





3)comments(주석)



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%
	//int a = 10;
	/*
	여러줄주석
	*/
	
%>

<!-- HTML 주석입니다. -->
여기는 주석이 아닙니다. <br />
<%-- JSP주석입니다. --%>
여기는 주석이 아닙니다. <br />

</body>
</html>



4)directive(지시자)
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import = "java.io.*" import = "java.util.*"%>
    
<%-- 외부패키지 임포트 방법 --%>
<%--@ page import = "java.util.Date" 이렇게도 되고 위에서 넣어도됨--%>
<%@ page import="java.text.SimpleDateFormat"%>

<%
	//java.util.Date date = new java.util.Date();
	Date date = new Date();
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일");
	String dayInfo = sdf.format(date);
%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

오늘은 <%= dayInfo %>

</body>
</html>


















































































































21.09.23_3회차
=======================================================================================================
*jsp태그복습, 리스트복습(로또,역할파티), 지시자(include,trimDW)
=======================================================================================================






































































































######################################################################################################
예제10) declaration, scriptlet, directive, expression 복습


jsp파일명: tag_quiz00


오늘의 운세!				//가장큰 제목

페이지 누적요청수: 9, 페이지 개별 요청수: 1	//페이지 누적요청수는 올라가고 페이지 개별요청수는 올라가지 않는다.

오늘의 행운의 숫자와 행운의 색깔			//두번째로 큰 제목
					//문단으로 아래 두줄감싸기
행운의 숫자: 2				//2 정수부는 헤드라이트 골드체				
행운의 색깔: 파랑				//기울임체(이텔리체)

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%! 
	//Declaration
	//jsp파일에서 사용할 멤버변수, 메서드를 선언할때 사용
	
	public int total;
	public int randomNumber(){
		//랜덤정수 1~10까지를 발생시켜서 리턴
		return 0;
	}
	
	public String randomColor(){
		
		/*
		0.0이상 1.0미만의 실수 난수를 발생시켜서 난수값이 0.66이상이면 "빨강"을 0.33 이상이면
		"노랑", 그 이외에는 "파랑"을 리턴
		*/
		return null;
	}
	
%>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>


</body>
</html>
######################################################################################################



답:



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import = "java.util.Random" %>
    
<%! 
	//Declaration
	//jsp파일에서 사용할 멤버변수, 메서드를 선언할때 사용
	
	public int total;
	public String color;
	public int num;
	public Random r = new Random();
	
	public int randomNumber(){
		//랜덤정수 1~10까지를 발생시켜서 리턴
		num = r.nextInt(10)+1;
		return num;
	}
	
	
	public String randomColor(){		
		/*
		0.0이상 1.0미만의 실수 난수를 발생시켜서 난수값이 0.66이상이면 "빨강"을 0.33 이상이면
		"노랑", 그 이외에는 "파랑"을 리턴
		*/
		double num = r.nextDouble();
		
		if(num>=0.66){
			color = "빨강"; //여기 리턴을 둘수도 있음
		} else if(num>=0.33){
			color = "노랑";
		} else{
			color = "파랑";
		}
		
		return color;
	}
	
%>

<%
	total++;
	int each=0;
	each++;
	
	num = randomNumber();
	color = randomColor();
%>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>오늘의 운세!</h1>

페이지 누적요청수: <%= total%>, 페이지 개별 요청수: <%= each%> 

<h2>오늘의 행운의 숫자와 행운의 색깔</h2>

<p>
행운의 숫자: <strong><%= num%></strong> <br />
행운의 색깔: <em><%= color%></em> 
</p>

</body>
</html>


















######################################################################################################
예제11) declaration, scriptlet, directive, expression 복습

jsp파일명: tag_quiz01

1)아래처럼 10번째면 나오게하고 10번째가 아니면 아무문구 안뜨게 하라

페이지 누적 요청수 : 30
매 10번째 방문자에게는 기프티콘을 드립니다.
당첨되셨습니다!!
		//구분선
랜덤 구구단(7단)	//가장 큰제목

이번에 나온 구구단은 7단입니다. //문단구분

7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63


2)그런다음 자바의 코드가 페이지소스보기에 안보이는지 확인해라
	-확인해보니 안보이긴하는데 doctype위에 빈칸들이있네.. 즉 자바의 발자취가 남았다는 뜻
	-이걸없애라



######################################################################################################



답:

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import = "java.util.Random" trimDirectiveWhitesapces = "true"%>
    
<%!
private int total;
private Random r = new Random();

public int randomDan(){
	return r.nextInt(8)+2;
}

public boolean checkTotal(){
	if(total%10==0){
		return true;
	}
	return false;
}
%>
<% 
total++;
int num = randomDan();
%>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

페이지 누적 요청수 : <%= total %> <br />
매 <strog>10</strog>번째 방문자에게는 기프티콘을 드립니다. <br />
<% 
if(checkTotal()) out.print("당첨되셨습니다!!");	
%> 
<hr />

<h1>랜덤 구구단(<%=num%>단) </h1>

<p>이번에 나온 구구단은 <%=num%>단입니다.</p>

<%for(int hang=1;hang<10;hang++){
	int result = num*hang;
%>

<%=num%> x <%=hang%> = <%=result%> <br />
<%} %>


</body>
</html>
















######################################################################################################
예제12) 리스트를 통한 랜덤로또 만들기


jsp파일명: tag_quiz02


1)리스트를 이용하면 랜덤로토만들기가 얼마나편한지 느껴보시오
	-중복검사코드를 따로 안만들어도됨
	-while문에 굳이 i라는 begin을 만들고 end설정을 하고 스텝으로 더할필요가없음

이때 로또번호는 0.7초간격으로 하나식 출력되게하라.(당연히 번호는 정렬되어 나와야한다.)
	



로또번호 생성 결과		//가장큰제목
이번주 로또는 이 번호다!!
12 13 14 28 39 41 	//로또번호는 0.7초당 하나식 나오도록(최초의 것은 바로나오고)
	//여기나오는 공백은 " "가 아닌 html상의 공백문자를 사용하라

######################################################################################################



답:



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ page import = "java.util.Random" import = "java.util.*" %>

<%!
private Random r = new Random();
List<Integer> lotto = new ArrayList<>();
%>

<%
	lotto.clear();
	while (lotto.size() < 6) {
		int num = r.nextInt(45) + 1;
		if (!lotto.contains(num)) {
			lotto.add(num);
		}
	}
	
	
	Collections.sort(lotto);
	//String lo = lotto.toString();
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>로또번호 생성 결과</h1>

이번주 로또는 이 번호다!!<br />
<%-- lo --%>
<% 
for(int j=0;j<lotto.size();j++){
	out.print(lotto.get(j)+"&nbsp;");
	Thread.sleep(700);//cpu를 잠시 멈추는 메서드
	out.flush(); //브라우저의 출력버퍼를 비우는 메서드
}
%>

<br />


</body>
</html>
















######################################################################################################
개념정리_지시자(directive) 태그의 종류(page,include,taglib)와 page 및 include 지시자태그의 속성 



* 지시자(directive)
- JSP페이지의 전체적인 속성을 지정할 때 사용합니다.
1. page: JSP페이지에 대한 정보를 지정한다. JSP가 생성하는 문서의 타입, 출력 버퍼의 크기, 
	에러 페이지 등 페이지에서 필요로 하는 정보를 설정합니다.

- 페이지 디렉티브에 선언 될 수 있는 속성들
a. language - 언어를 지정합니다. java만 지정할 수 있습니다.
a. import - 패키지를 import할 때 사용합니다.
a. errorPage - 설정 된 페이지에서 에러가 발생했을 시에 미리 만들어 둔 에러 페이지를 호출합니다.
a. contentType - text/html이라고 쓰면 결과가 HTML문서로 만들어집니다.
a. pageEncoding - 출력 문자 인코딩입니다. 기본은 ISO-8859-1이며 한글을 사용하려면 utf-8로 지정합니다.
a. trimDirectiveWhitespaces - 디렉티브나 스크립트릿 코드로 인해서 만들어진 공백 문자를 제거하는 기능.

1. include: JSP 페이지의 특정 영역에 다른 문서를 포함시킵니다.(jspf, jsp 모두 가능)
a. file -포함해야할 문서 jspf의 위치를 상대 또는 절대경로로 value를 넣어주는 속성이다.

1. taglib: JSP 페이지에서 사용할 태그 라이브러리를 지정합니다.


- JSP 아키텍쳐
: .jsp파일을 실행(요청)하면 웹 서버에서 우선 jsp파일을 java코드로 변환합니다. 그 이후 그 파일을 컴파일하고 html로 응답합니다.      
ex) helloworld.jsp -> helloworld_jsp.java(서버에서 servlet화) -> helloworld_jsp.class(서블릿 클래스 컴파일)
######################################################################################################

















######################################################################################################
예제13) directive의 include(jspf)





1)아래 요구사항을 충족하라(include할때 상대경로로 한번하고 절대경로로한번해라)

jspf파일이름: directive02_header directive02_footer
		-header에선 출력내용을 넣지말고 오로지 자바코드로 visit을 만들고 방문자가 올때마다 더하는 코드를 만들어라
jspf를 포용할 jsp 파일이름: directive02_main

방문자수 : 8	//방문자수 : 까지 jsp, 8은 jspf에서 선언한 변수를 불러오기
안녕하세요~~~ welcome to my website!!!	//jsp
						//구분선	//jspf
COPYRIGHT BY C.G.J / since 2019.04.18 ~		//jspf
						//구분선 //jspf

2)directive02_header의 내용을 방문자수 : 8 을 출력하는걸로 변경하고 그걸 lotto나 다른 jsp에도 include해서
	잘나오는가 확인하라
	-위에는 header를 저렇게한게 변수를 만들고 변수를 끌어올수 있다는것을 공부하기위한 목적이고 지금은 범용성 실습의 목적임



#jspf: jsp와 다르게 항상 머리 또는 꼬리에 조각처럼 들어가야할 녀석이라고해서 fragment(조각)를 붙여서 jsp와 구분한다. jspf
	-가시적으로 빠르게 아 이것은 머리와 꼬리에 항상 들어가는 include해야할 파일이구나 라는것을 알기위한것
		-jspf만 include되는것이 아닌 jsp도 인클루드 가능함! 가시성을 위해 jspf

######################################################################################################



답:




1)아래 요구사항을 충족하라(include할때 상대경로로 한번하고 절대경로로한번해라)


//directive02_header
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%! int visit; %>
<% visit++; %>


//directive02_footer
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<hr/>
COPYRIGHT BY C.G.J / since 2019.04.18 ~
<hr/>


//directive02_main
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%@ include file="directive02_header.jspf" %>
<h2>방문자수 : <%= visit %></h2>

<p>
안녕하세요~~~ welcome to my website!!!
</p>

<%@ include file="directive02_footer.jspf" %>
</body>
</html>



2)directive02_header의 내용을 방문자수 : 8 을 출력하는걸로 변경하고 그걸 lotto나 다른 jsp에도 include해서
	잘나오는가 확인하라

//directive02_header 내용 변경
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
 
<%! int visit; %>
<% visit++; %>
<h2>방문자수 : <%= visit %></h2>


//expression.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@ include file = "directive02_header.jspf" %>  

  
<%!
	public String name = "홍길동";
%>
<%
	String address = "서울시"; 
%>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<!-- 표현식은 out.print()를 대체함
	out.print하면 나중에 쌍따옴표에다가 + 등을 적어야하고 번거롭다. -->

이름: <%= name %> <br /> <!-- out.print("이름"+name+"<br />"); -->
주소: <%= address %> <br />

</body>
</html>



















######################################################################################################
예제14) 게임파티로직 작성을통한 리스트실습


jsp파일명: tag_quiz03

당신의 역할
당신에게 부여된 역할은 사냥꾼입니다.
현재 파티에 당신과 같은 역할을 가진 플레이어는 1명입니다.	//이거 직업군 인원 셀때 배열쓰지말고 다른걸로 해라

현재 파티 구성
[도적, 전사, 사냥꾼](3명 참가중)	



0)직업: 도적, 사냥꾼, 전사, 사제 

1)브라우저에서 서버에 요청할때마다(f5할때마다) 사용자에게 임의의 역할(직업)을 부여하고 현재 파티에서 해당사용자를 포함하여 몇명이 
  임의의 역할을 가지고 있는지 출력하시오.

2)현재 파티구성에서 먼저 들어온 사용자순으로 역할을 나열하고 총 몇명 참가중인지 나타내시오

3)참가중인 파티는 10명까지 가능하며 10명이 넘으면 다시 임의의 역할을 주고 1명부터 시작함

#헤드라이트는 strong 태그, b태그 모두 가능한데 strong을 많이 쓰는 추세라고 한다.
#리스트는 리스트변수 이름만 출력에 넣어도 주소가나오는게아닌 toString()의 반환값으로 나온다는것을 반드시 인지할것
#<%= party.size() %> 가 된다는것 명심 즉 반환값으로 기본값만 나오면됨 그럼 그걸 문자열로 만들어서 브라우저에 출력함
######################################################################################################










답<직업군 플레이어 수 배열안쓰고 푼것>:


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import = "java.util.List" import = "java.util.ArrayList" %>
<%!
List<String> party = new ArrayList<>();
%>
 
 
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>


<h1>당신의 역할</h1>

<%
String[] jobs = {"도적", "사냥꾼", "전사", "사제", "마법사"};
int r = (int)(Math.random()*jobs.length);
if(party.size() == 10) party.clear();
party.add(jobs[r]);

int count = 0;
for(int i=0;i<party.size();i++){
	if(party.get(i)==jobs[r]) count++;
}


%>

당신에게 부여된 역할은 <strong><%= party.get(party.size()-1) %></strong>입니다.<br />
현재 파티에 당신과 같은 역할을 가진 플레이어는 <%= count %>명입니다.
<hr />

현재 파티 구성<br />
<%= party %>(<%= party.size() %>명 참가중)

</body>
</html>














답<직업군 플레이어 수 배열쓴거>:

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@ page import = "java.util.List" import = "java.util.ArrayList" 
	import = "java.util.Collections" import = "java.util.Random"%>
    
<%!
private String[] jobs = {"도적", "사냥꾼", "사제", "전사"};
private List<String> party = new ArrayList<>();
private int[] jobNums = new int[4]; //이렇게 직업수를 정하는법도있고
						//contains로 true일때마다 count를 1식늘리는방법도있다.
private int num;

private Random r = new Random();

public void setParty(){
	num = r.nextInt(jobs.length);
	party.add(jobs[num]); 
	
	jobNums[num]++;
}

public void checkParty(){
	if(party.size()==10){
		party.clear();
		for(int i=0;i<jobNums.length;i++){
			jobNums[i] = 0;
		}
	}
}
%>   
    
<%
checkParty();
setParty();
String job = party.get(party.size()-1);
int jobNum = jobNums[num];

String partyJob = party.toString();
int partyTot = party.size();
%>

    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>당신의 역할</h1>

당신에게 부여된 역할은 <%= job %>입니다. <br />
현재 파티에 당신과 같은 역할을 가진 플레이어는 <%= jobNum %>명입니다. <br /> <br />


현재 파티 구성 <br />
<%= partyJob %>(<%= partyTot %>명 참가중) <br />

</body>
</html>









































































































21.09.24_4회차
=======================================================================================================
*파라미터 입력(url, 입력태그&form), 파라미터 불러오기(request.getParameter)
=======================================================================================================






































































































######################################################################################################
개념정리_내장객체 개념 및 종류, request 객체의 요청파라미터

* JSP 내장 객체
- 개발자가 JSP 파일 내에 객체를 생성하지 않고 바로 사용할 수 있는 객체가 내장 객체입니다.
- JSP에서 제공되는 내장객체는 JSP 컨테이너에 의해 서블릿으로 변환될 때 자동으로 객체가 생성됩니다.


* JSP 내장 객체의 종류
1. request	javax.servlet.http.HttpServletRequest
2. response	javax.servlet.http.HttpServletResponse
3. out	javax.servlet.jsp.JspWriter
4. session	javax.servlet.http.HttpSession
5. application	javax.servlet.ServletContext
1. pageContext	javax.servlet.jsp.PageContext
1. page	javax.servlet.jsp.HttpJspPage
1. config	javax.servlet.ServletConfig
1. exception	java.lang.Throwable


* request 객체의 이해
- 웹 브라우저를 통해 서버에 어떤 정보를 요청하는 것을 request라고 합니다.
- 이러한 요청 정보가 담기고 관리되는 곳이 request객체입니다.

- request 객체가 제공하는 기능.
1. 클라이언트(웹 브라우저)와 관련된 정보 읽기 기능.
2. 서버와 관련된 정보 읽기 기능.
3. 클라이언트가 전송한 요청 파라미터 읽기 기능.
4. 클라이언트가 전송한 쿠키 읽기 기능.


<%--
*요청 파라미터(request parameters)
-클라이언트 측에서 서버로 데이터를 요청할때 전달되는 값들을 담은 변수를 요청 파라미터라고 부름
-요청 파라미터는 URL 주소 뒤에 ?를 붙인이후 [파라미터변수명=값]의 형식을 통해 서버로 데이터를
전달합니다.
-요청파라미터를 여러개 전달할때는 &기호를 통해 나열합니다.
 --%>    




- request 객체 관련 주요 메서드
1. getContextPath():String - 웹 어플리케이션의 컨텍스트 루트의 경로를 얻습니다.
1. getMethod():String - 웹 브라우저가 정보를 전송할 때 사용한 요청 방식을 구합니다.(get, post)
1. getServerName():String - 연결할 때 사용한 서버 이름을 구합니다.
1. getServerPort():int - 서버가 실행중인 포트 번호를 구합니다.
1. getRequestURL():String - 요청 URL을 얻습니다.
1. getRequestURI():String - 요청 URI를 얻습니다.
1. getRemoteAddr():String - 웹 서버에 연결한 클라이언트의 IP주소를 구합니다.
1. getProtocol():String - 해당 프로토콜을 얻습니다.
1. getParameter(String name):String
- 이름이 name인 파라미터 값을 구합니다. 존재하지 않을 경우 null을 반환합니다.
1. getParameterValues(String name):String[]
- 이름이 name인 모든 파라미터 값들을 배열로 구합니다. 존재하지 않을 경우 null을 반환합니다.
1. getParameterNames():java.util.Enumeration
- 웹 브라우저 전송한 파라미터의 이름 목록을 구합니다.
1. getParameterMap():java.util.Map
- 웹 브라우저가 전송한 파라미터의 맵을 구합니다. 맵은 <파라미터 이름, 파라미터 값> 쌍으로 구성됩니다.
* JSP&Servlet API문서
- http://docs.oracle.com/javaee/7/api/

######################################################################################################








######################################################################################################
예제15) request내장객체를 이용하여 파라미터 읽기



1)아래의 것들을 출력하라
folder추가: JspObj
jsp추가: req_info.jsp

reqUrl
reqUri
protocol
conPath
serverPort
serverName
userIP


# 요청 URL: http://localhost:8181/JSPBasic/JspObj/req_info.jsp
# 요청 URI: /JSPBasic/JspObj/req_info.jsp //uri는 context root부터 해당 파일까지의 경로이다
# 요청 protocol: HTTP/1.1
# 요청 context path: /JSPBasic
# 요청 server port: 8181
# 요청 server name: 8181
# 요청 user ip: 0:0:0:0:0:0:0:1	//우리꺼라서 이렇게 찍히는거 다른 클라이언트가오면 다르게찍힘


2)url로 파라미터전송하고 파라미터 읽기
req_param.jsp만들기

요청 파라미터 읽기 연습!!!
-아침밥: null
-점심밥: null 
-저녁밥: null

<parameter 입력 후 출력>

요청 파라미터 읽기 연습!!!
-아침밥: 샐러드
-점심밥: 샐러드계란
-저녁밥: 소고기



<%--
*요청 파라미터(request parameters)
-클라이언트 측에서 서버로 데이터를 요청할때 전달되는 값들을 담은 변수를 요청 파라미터라고 부름
-요청 파라미터는 URL 주소 뒤에 ?를 붙인이후 [파라미터변수명=값]의 형식을 통해 서버로 데이터를
전달합니다.
-요청파라미터를 여러개 전달할때는 &기호를 통해 나열합니다.
 --%>    



3)url로 파라미터전송하고 파라미터 읽기
	-bmi지수는 세째짜리까지 나타내라
req_bmi.jsp


체질량 지수(BMI) 계산
- 신장: 185.3
- 체중: 75.3
BMI 지수 : 21.933
당신은 정상체중입니다.


<%--
	bmi지수 계산 공식 [체중(kg) / 신장(m) * 신장(m)]
	* bmi지수가 23을 초과한다면 "당신은 과체중입니다."를 출력,
	18.5 미만이라면 "당신은 저체중입니다."를 출력,
	나머지는 "당신은 정상체중입니다."를 출력하세요.
	
	* 문자열 내부에 들어있는 데이터를 기본데이터 타입으로 변환하는 방법
	 포장 클래스에 들어있는 parse+기본타입이름()메서드 활용.
	 ex) String -> int
		Integer.parseInt(문자열);
	 	 String -> double
	 	Double.parseDouble(문자열);
 --%>


#소수점 컨트롤을 하고싶다면 round를 쓸것
	-round는 반드시 정수.0으로 만든다.
	-그러면 구하고싶은 소수점자리가 3자리라면 1000을 곱하여 해당 수를 보존한뒤 다시 1000을 나누면된다.

######################################################################################################



답:




1)아래의 것들을 출력하라
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
StringBuffer reqUrl = request.getRequestURL();
String reqUri = request.getRequestURI();
String protocol = request.getProtocol();
String conPath = request.getContextPath(); //root폴더
int serverPort = request.getServerPort();
String userIP = request.getRemoteAddr();
%>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<p>
# 요청 URL: <%= reqUrl %> <br />
# 요청 URI: <%= reqUri %> <br />
# 요청 protocol: <%= protocol %> <br />
# 요청 context path: <%= conPath %> <br />
# 요청 server port: <%= serverPort %> <br />
# 요청 user ip: <%= userIP %> <br />

</p>

</body>
</html>



2)요청파라미터 읽기연습

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%--
*요청 파라미터(request parameters)
-클라이언트 측에서 서버로 데이터를 요청할때 전달되는 값들을 담은 변수를 요청 파라미터라고 부름
-요청 파라미터는 URL 주소 뒤에 ?를 붙인이후 [파라미터변수명=값]의 형식을 통해 서버로 데이터를
전달합니다.
-요청파라미터를 여러개 전달할때는 &기호를 통해 나열합니다.
 --%>    

<%
//클라이언트에서 전송된 요청파라미터의 값을 읽는 방법
//내장객체 request의 메서드 getParameter(파라미터의 이름)
String br = request.getParameter("bf");
String lunch = request.getParameter("lunch");
String dinner = request.getParameter("dinner");
%>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>요청 파라미터 읽기 연습!!!</h2>

<p>
-아침밥: <%= br %> <br/>
-점심밥: <%= lunch %><br/>
-저녁밥: <%= dinner %><br/>
</p>

</body>
</html>



3)url로 파라미터전송하고 파라미터 읽기


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%

String cm = request.getParameter("cm");
String kg = request.getParameter("kg");
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>체질량 지수(BMI) 계산 </h2>
<hr/>

<p>
- 신장: <%= cm %><br/>
- 체중: <%= kg %><br/>
</p>

<p>
<%
double m = Double.valueOf(cm)*0.01;
double bmi = Double.valueOf(kg) / (m * m);
bmi = Math.round(bmi*1000)*0.001;
//bmi = Math.round(bmi*1000)/1000.0;
%>
BMI 지수 : <%= bmi %> <br/>

<%
if(bmi > 23) out.print("당신은 과체중입니다.<br/>");
else if (bmi < 18.5) out.print("당신은 저체중입니다.<br/>");
else out.print("당신은 정상체중입니다.<br/>");
%> 

할루 출력종료~
</p>

</body>
</html>













######################################################################################################
예제16) url로 파라미터 전송이아닌 입력버퍼를 통해 전송하기

1)아래 요구사항이 실현되도록하라
req_user_form.jsp //입력페이지
req_user_info.jsp //입력받은 데이터를 처리하는 페이지

-이름: 		//입력버퍼

-ID: 		//입력버퍼

-PW: 		//입력버퍼
			//파라미터값으로는 이름문자열이랑 id문자열 pw로 전송
			//파라미터변수로는 user_name, user_id, user_pw

-성별:  남성     여성	//동그라미 하나만 누를수있는 버튼후 남성 + 뛰어쓰기하나+명령어를통한 뛰어쓰기2개 한후 동그라미하나만하고 여성
			//파라미터값으로는 남자 여자중 선택한 단하나로 전송 
			//파라미터변수로는 gender
-취미: 축구   독서   수면   음악감상 //파라미터
			//파라미터값으로는 각 선택에 따라서 soccer reading rest music으로 전송 이때 전송가능한 값은 다중
			//파라미터변수로는 hobby
-지역: 서울		//셀렉트로 4개지역설정해서 클릭하여 선택하게만드삼
			//파라미터값은 서울, 울산 부산 경기
			//파리미터 변수는 region	
확인		//이 버튼을 누르면 위의 입력된 내용들이 현재 페이지를 거쳐서 req_user_infopage에 파라미터로 전송


form태그로 전달된 데이터 읽기 학습
#이름 : 김철수
#ID : 아메리카
#PW : asdsa
#성별 : 남자
#취미 : [soccer, rest, music]
#지역 : 부산


#체크박스 동그라미박스 등에서는 태그종료후 일반글로 축구 독서 수면 남성여성 쓴게 value로 자동넘어가지않는다. 태그가 끝나고 입력된 문자열을
 당긴것 뿐이니까 아무 연관성이 없다고 판단함
하지만 select는 태그안에 속성인 option으로 값이 들어가있기때문에 value로 인정해준다
	-이것또한 예전에는 value로 다시 다 쳐줬지만 지금은 html5에서는 option에 있는걸 자동으로 가져간다.

######################################################################################################



답:





<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<%--
	* 사용자의 입력값을 서버로 전송하는 방법.
	1. 사용자의 입력데이터를 서버로 전송하려면 HTML의 form태그를 사용합니다.
	2. form태그의 action속성에 데이터를 받을 페이지의 URL주소를 적습니다.
	3. input태그의 name속성으로 요청파라미터의 이름을 지정할 수 있습니다.
	4. 입력창이나 버튼체크에 의해 작성된 값이 요청파라미터의 값으로 처리됩니다.
	5. submit버튼을 사용하여 서버로 데이터를 전송합니다.
 --%>
 
<!--   <form action="http://localhost:8181/JSPBasic/JspObj/req_user_info.jsp">  --> <!--  위의 2번내용임-->
 <form action="req_user_info.jsp"> <!-- 상대경로를 뜻함, 엑션은
 현재 입력페이지에서 받은 파라미터를 어디페이지로 줄것이냐? 여기서 다해결할수도있지만
 함수로 기능나누듯이 페이지별로 기능을 나누는 거인듯 -->
 	<p>
 	-이름: <input type = "text" name = "user_name" size="10px" /> <br/>
 	-ID: <input type = "text" name = "user_id" size="10px" /> <br/>
 	-PW: <input type = "password" name = "user_pw" size="10px" /> <br/>
 	-성별: <input type = "radio" name = "gender" value = "남자" /> 남성 &nbsp;&nbsp;
 		  <input type = "radio" name = "gender" value = "여자" /> 여성  <br/>
 	-취미: 
 	<input type="checkbox" name="hobby" value="soccer"/>축구 &nbsp;
 	<input type="checkbox" name="hobby" value="reading"/>독서 &nbsp;
 	<input type="checkbox" name="hobby" value="rest"/>수면 &nbsp;
 	<input type="checkbox" name="hobby" value="music"/>음악감상 <br/>
 	
 	-지역:
 	<select name = "region">
 		<option>서울</option>
 		<option>경기</option>
 		<option>부산</option>
 		<option>제주</option> 	
 	</select> <br/>
 	
 	
 	<!-- 서버로 데이터를 전송하는 버튼의 타입이름: submit -->
 	<input type = "submit" value = "확인" />
 	</p>
 
 </form>
</body>
</html>








<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import = "java.util.Arrays"%>
    
<%
	String name = request.getParameter("user_name");
	String id = request.getParameter("user_id");
	String pw = request.getParameter("user_pw");
	String gender = request.getParameter("gender");
	//String hobby = request.getParameter("hobby"); //취미는 다중데이터가
				//올수있기때문에 이렇게만 안한다.
	String[] hobbys = request.getParameterValues("hobby");
	String region = request.getParameter("region");
%>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>form태그로 전달된 데이터 읽기 학습</h2>
<p>
#이름 : <%= name %> <br/>
#ID : <%= id %> <br/>
#PW : <%= pw %> <br/>
#성별 : <%= gender %> <br/>
#취미 : <%= Arrays.toString(hobbys) %> <br/>
#지역 : <%= region %> <br/>
</p>
</body>
</html>

















######################################################################################################
예제17)앞에서 만든 bmi 페이지(입력받은 데이터를 처리하는 페이지 앞의 req_user_info와 같은역할)를 이용하여 내장객체 request를통한
	파라미터 전송 및 처리 연습

req_bmi_form.jsp 만들기

1)req_bmi_form.jsp에서 입력한 데이터가 req_bmi.jsp로 흘러들어가게해서(매개변수전달) bmi의 페이지연산이 실행되게하시오

//req_bmi_form페이지 실행결과


//req_bmi페이지 실행결과
체질량 지수(BMI) 계산
- 신장: 180
- 체중: 75
BMI 지수 : 23.148
당신은 과체중입니다.
할루 출력종료~
######################################################################################################



답:



//req_bmi_form
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<form action="http://localhost:8181/JSPBasic/JspObj/req_bmi.jsp">
		<h3>
			#신장: <input type="text" name=cm size="10px" />cm
		</h3>
		<h3>
			#체중: <input type="text" name=kg size="10px" />kg
		</h3>


		<input type="submit" value="확인" />
	</form>
</body>
</html>


//req_bmi 위에서 원래 만든거랑 똑같은거임
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%

String cm = request.getParameter("cm");
String kg = request.getParameter("kg");
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h2>체질량 지수(BMI) 계산 </h2>
<hr/>

<p>
- 신장: <%= cm %><br/>
- 체중: <%= kg %><br/>
</p>

<p>
<%
double m = Double.valueOf(cm)*0.01;
double bmi = Double.valueOf(kg) / (m * m);
bmi = Math.round(bmi*1000)*0.001;
//bmi = Math.round(bmi*1000)/1000.0;
%>
BMI 지수 : <%= bmi %> <br/>

<%
if(bmi > 23) out.print("당신은 과체중입니다.<br/>");
else if (bmi < 18.5) out.print("당신은 저체중입니다.<br/>");
else out.print("당신은 정상체중입니다.<br/>");
%> 

할루 출력종료~
</p>

</body>
</html>











######################################################################################################
예제18)form태그를 이용해서 해당페이지에서 입력된 값을 특정 페이지에 파라메터로 설정하여 보내고 
	request 내장객체의 메서드로 파라미터를 받아와서 활용하기

사진은 네이버에서 대충구해라(01.jpg, 02.jpg)


//req_album.jsp -> 두 그룹에 대한 정보를 클릭하여 해당 그룹의 그룹명을 파라미터로 하여 req_album_result.jsp에 전송한다.
	-모든 내부 내용은 중앙정렬되어야하고 사진도 중앙정렬
	-마지막에 확인버튼은 위에가 5열이라서 네모박스 1열조그만한거 안에 들어가있는데 열병합해서 네모가 전체를 감싸게하라

4행 5열짜리 표를 만드시오
사진은 01, 02이름으로 만들고 저장은 jspObj폴더안에 간편하게 해라
1열: 동그라미버튼
2열: 앨범커버사진
3열: 가수이름
4열: 앨범제목
5열: 발매일자

1행: field
2~3행 : value
4행: 확인버튼

//req_album_result //파라미터를 받아서 각 그룹이 무엇이냐에 따라서 아래의것을 출력
	
선택하신 앨범정보		//h2
당신이 선택한 앨범은 <?>입니다. //문단처리
			//구분선
타이틀곡 <제목>		//h3
			//유튜브에서 타이틀곡 영상가져오기




#열병합: <td colspan = "열 병합 개수"></td>

#행병합: <td rowspan = "행 병합 개수"></td>

#div를 통해 전체 중앙정렬처리하기
<div align = "center">
</div>

#동영상넣기
유튜브-동영상우클릭-소스코드복사-붙여넣기
<iframe width="640" height="360" src="https://www.youtube.com/embed/HrTK1wVd3sg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


근데 이대로만해도 수동재생은됨(width와 height는 알아서 수정하면됨)
하지만 자동재생이 안됨
자동재생하려면 url주소뒤에 ?rel=0;apm;autoplay=1을 붙이면 페이지 출력시 자동실행이라고하는데 다해봐도 안된다.
	이건 일단 알고만있자 중요한게 이건아님

######################################################################################################





답:







<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<div align=center>
<form action = "req_album_result.jsp">
<table border ="1" >
	<tr>
		<td></td>
		<td>앨범 커버</td>
		<td>가수</td>
		<td>앨범 제목</td>
		<td>발매일</td>
	</tr>
	<tr>
		<td><input type = "radio" name = group value = "티아라"></td>
		<td align = "center"><img src = "01.jpg" width = "200px" height = "200px" alt = "티아라임" /></td>
		<td >티아라</td>
		<td>다시한번</td>
		<td>2021.09.24</td>
	</tr>
	<tr>
		<td><input type = "radio" name = group value = "소녀시대"></td>
		<td align = "center"><img src = "02.jpg" width = "200px" height = "200px" alt = "소녀시대임" /></td>
						
		<td >소녀시대</td>
		<td>소녀시대의 소녀시대</td>
		<td>2021.09.23</td>
	</tr>
	<tr>
		<!--  td colspan="5"--> <!--5열을 병합하라는 의미. 근데 td를 5개아만들면 병합할것도 없지 않는가?-->
		
		<td colspan="5">
		<input type = "submit" value = "확인" />
		</td>
	</tr>
	

</table>
</form>
</div>

</body>
</html>















<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	String group = request.getParameter("group");
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<% if(group.equals("티아라")){ %>
	<div align = "center">
		<h2>선택하신 앨범정보</h2>
		<p>
			당신이 선택한 앨범은 티아라의 무한한앨범 뽀삐뽀삐입니다~!
			
		</p>
		<hr/>
		<h3>타이틀곡 팔로우미~팔로우미~</h3>
	</div>	
<%} else{%>
	<div align = "center">
		<p>
			당신이 선택한 앨범은 소녀시대의 소녀시대입니다~!
			
		</p>
		<h3>타이틀곡 어리다고놀리지말아요.</h3>
		<iframe width="640" height="360" src="https://www.youtube.com/embed/AdjhDjKbcUg?rel=0;apm;autoplay=1" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
	</div>
<%} %>


</body>
</html>


































































































































21.09.25_5회차
=======================================================================================================
*requestMethod(get,post), response(getCharacterEncoding,sendRedirect), css
=======================================================================================================






































































































































######################################################################################################
예제19) form없이 요청파라미터 넘기는법 

form 빼고 해당내용과 관계없는것들 다빼라
3행4열이되게해라

1)제목을 클릭했을때 req_albumnoform으로 이동하게하라
	-이동하면 form과 input submit 이 없으니까 널포인트에러가 날것이다.
		-링크는 그냥그리로 이동하는것일뿐 요청파라미터를 송신할수없다.
	-그래서 에러나면 그냥 url로 파라미터를 송신해서 해당 페이지가 요청파라미터를 읽어 페이지를 뜨게하라

2)이번엔 url입력창에 사람이 직접 쳐서 파라미터를 주지말고 jsp코드상에서 링크에 파라미터를 주게 직접 해봐라

-나머지 사진 이름 등 다 똑같은 방식임

######################################################################################################



답:


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<div align=center>

<table border ="1" >
	<tr>
		<td>앨범 커버</td>
		<td>가수</td>
		<td>앨범 제목</td>
		<td>발매일</td>
	</tr>
	<tr>

		<td align = "center"><img src = "01.jpg" width = "200px" height = "200px" alt = "티아라임" /></td>
		<td >티아라</td>
		<td><a href = "req_album_result.jsp?group=티아라">다시한번</a></td>
		<td>2021.09.24</td>
	</tr>
	<tr>

		<td align = "center"><img src = "02.jpg" width = "200px" height = "200px" alt = "소녀시대임" /></td>
						
		<td >소녀시대</td>
		<td><a href = "req_album_result.jsp?group=소녀시대">소녀시대의 소녀시대</a></td>
		<td>2021.09.23</td>
	</tr>

	

</table>

</div>

</body>
</html>






















######################################################################################################
개념정리_요청방식에서 요청파라미터를 보내는 get방식과 post 방식의 차이점


* JSP&Servlet API문서
- http://docs.oracle.com/javaee/7/api/

* HttpRequest 방식
- GET 방식
1. 서버에 데이터를 요청하는 용도.
2. 전송하는 데이터가 주소에 묻어서 감.
3. 전송했던 데이터는 브라우저의 히스토리에 접속했던 주소와 함께 남아 있어 보안성에 취약함.
4. 게시판 글 조회나 검색 같이 서버의 정보를 가져올 필요성이 있을 때 사용함.
5. 전송할 수 있는 최대 크기는 브라우저별로 다르지만 크기가 정해져있음.
6. HTML form태그가 반드시 필요하지는 않습니다.


- POST 방식
1. 서버에 데이터를 전송하는 용도.
2. 전송되는 데이터가 URL에 묻어나가지 않고 전송 객체의 메시지 바디를 통해 전달됨.
3. 브라우저에 전달되는 데이터가 남지 않기 때문에 보안성에 강함.
4. 비밀번호나 주민번호 등 private한 데이터를 서버에 전송해야 할 때 사용함.
5. 반드시 HTML form태그가 필요합니다.
6. 데이터 양의 제한이 없기 때문에 대량의 데이터를 전송할 수 있습니다.


* GET/ POST 방식 브라우저 한글처리
- 톰캣서버의 기본 문자처리 방식은 IOS-8859-1 방식입니다.
- 따라서 개발자가 별도의 한글 인코딩을 하지 않으면 서버로 전송된 데이터의 한글들이 깨져보이는 현상이 발생합니다.


1. GET 방식의 한글처리
- server.xml 파일 수정
- <connector> 에 속성 값으로 URIEncoding="utf-8"


2. POST 방식의 한글처리
- post 방식을 처리하는 메서드(스크립트릿)에 request.setCharacterEncoding("utf-8");





######################################################################################################































######################################################################################################
예제20) 서버에게 요청시 request method를 post방식으로 파라미터 전송하기

jspobj폴더를 JspObjRequest로 변경
req_post_form.jsp 파일생성




1)form을 통해 url에 요청파라미터를 입력하게한후 페이지를 불러오는방식으로 아래가 출력되게하라
	-이렇게하면 문제점이 비번도 url에 나온다는것이다.
//req_post_form.jsp
-아이디:
-비밀번호:
-이름:
전송	//버튼

//req_post_take.jsp
# 아이디: 1
# 비밀번호: 1
# 이름: 1


f12를 누르고 network에서 클라이언트가 요청한 방식(request method)이 get인걸 확인하라
	-즉 아무것도 안하면 url에 파라미터가 묻어나오는 get방식으로 디폴트설정된다는것을 인지하라

2-1)특정페이지에서 다른페이지로 서버에게 요청할때 버퍼에 입력된 파라미터들을 post방식으로 전송하라
	-요청은 요청인데 전송의 느낌이 강하다.
	-이렇게 보내면 한글이깨진다.
		-jsp의 지시자에서도 utf-8로해주고 이클립스의 workspace에서도 utf-8로 해주고 그밖의 문서들도 다 utf-8햇는데
		 왜또 깨지는 현상이 발생하는가?
			-그건 톰캣서버의 기본처리 언어가 한글이 아니기때문이다. 하지만 겟으로
				보낼때는 기본처리언어를 자동으로 utf-8로 바꿔주도록 9.0에서 설계됐으나 
				post는 안됐음으로 지가노력해야함
2-2)한글 문제를 해결하라
	-get은 server.xml 설정파일에서 한글 설정해줘야하고 post는 메서드를 통해 설정해줘야함(서버에서 출력할 페이지측에서 실행될때
		나는 이제부터 request객체로 오는 요청파라미터 등모든것을 utf-8로 처리할것이다 라는 뜻인듯)

			



**********참고
#요청 : 클라이언트 -> 서버
	-이과정에서 클라이언트가 서버에 보낼때 파라미터를 함께 보내는 것을 요청 파라미터라한다.
요청방식에는 2가지가있다.
get, post
둘다 서버에 페이지를 요청하면서 동시에 파라미터를 전송한다.
그 파라미터를 요청파라미터라한다.


톰켓서버의 기본언어처리방식을 한글로 설정안해주면 깨진다.
get: get도 기본언어처리방식을 한글로 설정해주어야하는데 톰켓 9.0에서부터 굳이 한글로 안해줘도 자동으로 되게끔 해놨다.
	-회사가 톰캣서버 8.0을 쓰고 있다면 post처럼 servers-server.xml의 63번줄에서 수정해주어야함
post: 이거는 아쉽게 자동처리를 안해놔서 직접입력해야한다.
 

#요청파라미터 전송하는 법
1)url을 통해 요청하기 -> Get 방식
	-브라우저에서 url뒤에 수동입력
	-jsp 또는 html에서 form을 통해 body에 입력한뒤 상대편 page의 url뒤에 자동으로 입력하여 파라미터를 보낸다.
2)url을 통하지 않고 전송하기 -> post 방식
	-form을 사용해야만 한다.
		-form을 통해 body에 입력한뒤 상대편 page로 파라미터를 바로보낸다.


#servers-server.xml에서 서버설정변경하는법
63 connect: get형식의 요청파라미터를 읽을때 기본언어처리를 한글로 하게할수 있다.(한글이 안깨지게 할수있다)
152 context: context root를 path = ""속성으로 변경할수 있다.

######################################################################################################



답:



//req_post_form.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%--
	-전송방식을 post로 사용하기 위해서는 반드시 form 태그가 필요합니다.
	 form태그의 method라는 속성을 "post"로 설정하면 요청방식이 post방식으로
	  전송됩니다.
 --%>

<form action = "req_post_take.jsp" method = post>
	-아이디: <input type = "text" name = "id" size = "10px" /><br />
	-비밀번호: <input type = "password" name = "pw" size = "10px" /><br />
	-이름: <input type = "text" name = "name" size = "10px" /><br />
	<input type = "submit" value = "전송" />
</form>

</body>
</html>






//req_post_take.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>

<%
//post 방식을 통해 전송된 데이터의 한글처리는 아래의 메서드를 사용함
	request.setCharacterEncoding("utf-8");

	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	String name = request.getParameter("name");
%>


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<p>
	# 아이디: <%= id %> <br />
	# 비밀번호: <%= pw %> <br />
	# 이름: <%= request.getParameter("name") %> <br />
</p>


</body>
</html>























######################################################################################################
개념정리_response

* response 객체의 이해
- 웹 브라우저의 요청에 응답하는 것을 response라고 합니다.
- 이러한 응답의 정보를 가지고 있는 객체를 response객체라고 합니다.

- response 객체 주요 메서드
1. getCharacterEncoding(): 응답할 때의 문자의 인코딩 형태를 구합니다.
1. addCookie(Cookie c): 쿠키를 지정합니다.
1. sendRedirect(URL): 지정한 URL로 이동합니다.

* out 객체의 이해
- JSP 페이지가 생성하는 모든 내용은 out 기본 객체를 통해 전송됩니다.
- JSP 페이지 내에서 사용하는 비스크립트 요소들(HTML코드와 텍스트)이 out 객체에 전달됩니다.
- 값을 출력하는 표현식(expression)의 결과값도 out객체에 전달됩니다.

######################################################################################################















######################################################################################################
예제21) response를 통해 구조를 효율적으로 설계하기


1)아래 요구사항을 충족하는 페이지를 만들어라

JspObjResponse폴더생성
res_basic01.jsp 파일생성
res_basic02.jsp 파일생성
res_basic_ok.jsp 파일생성
res_basic_no.jsp 파일생성



01에서 나이입력
	-입력된 정보를 파라미터로하여 02에게 url뭍히지 않고 전송

02는 나이를 판별하여 20세이상일시 ok로 보내고 미만일시 no로 전송

ok는 아래 출력
성인입니다. 주류 구매 가능합니다. 
처음으로				//01로 돌아가는 링크작성

no는 아래 출력
학생입니다. 주류구매 불가능합니다. 	
처음으로				//01로 돌아가는 링크작성



######################################################################################################



답:




//res_basic01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<form action = "res_basic02.jsp" method = "post">
		-당신의 나이는?? <input type="text" name = "age" size = "5" />
		<br/>
		<input type = "submit" value = "확인" />
	</form>

</body>
</html>


//res_basic02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>

<%
	String strAge = request.getParameter("age");
	int age = Integer.parseInt(strAge);
	
	String url = "http://localhost:8181/JSPBasic/JspObjResoponse/res_basic_ok.jsp";
	if (age >= 20) {
		//response객체가 제공하는 sendRedirect() 메서드의 매개값으로 이동시킬
		//url 주소를 적으면 해당 페이지로 강제이동함
		response.sendRedirect(url);		
	}else{
		response.sendRedirect("res_basic_no.jsp");
	}
%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>


</body>
</html>







//res_basic_ok.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h3>성인입니다. 주류를 구매할수 있습니다.</h3>
<a href = "res_basic01.jsp">처음으로</a>

</body>
</html>







//res_basic_
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h3>학생입니다. 주류를 구매할수 없습니다.</h3>
<a href = "res_basic01.jsp">처음으로</a>
</body>
</html>

















######################################################################################################
예제22) response를 통해 구조를 효율적으로 설계하기

1)이전에 만든 앨범 페이지 두개를 이용해서 관리구조를 효율적으로 만들어라

req_album_result.jsp, req_album.jsp 두가지는 album에서 입력받고 result에서 티아라로 가는길과
	소녀시대 페이지로 가는 길 두가지를 모두 가지고있다.
	이렇게하면 관리적측면에서 안좋으니 album_response.jsp, tiara.jsp, girls.jsp를 만들고 활용하라
		-방식: album.jsp에서 입력받고 response에서 파라미터값에 알맞게 tiara 또는 girls로 알맞게 리스폰스해주면됨
			-tiara 및 girls의 내용물은 대충 알아서 복사하던가 다시만들던가


새로만들 파일이름: 원래는 response 연습중이니 이름을 req라하면되지만 파일이 많아져서 헷갈리니
		본래 따온 파일의 req를 따라가도록 한다.

req_album.jsp
req_album_result.jsp
req_tiara.jsp
req_girls.jsp

*할땐 상대경로와 절대경로로 나눠서해봐라 
	-절대경로
		-url 절대경로
		-uri 절대경로
			uri: 도메인주소+포트번호 뒤부터 모든것
	-상대경로
	
######################################################################################################













답:











//req_album.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<div align="center">
	<form action = "req_album_result.jsp" >
	
	<table border = "1">
	<tr>
		<td>
		선택
		</td>
		<td>
		앨범커버사진
		</td>
		<td>
		가수이름
		</td>
		<td>
		앨범제목
		</td>
		<td>
		발매일자
		</td>
	</tr>
	<tr>
		<td>
		<input type = "radio" name = "group" value = "티아라">
		</td>
		<td>
		<img src = "01.jpg" width = "200px" height = "200px"
		alt = "티아라">
		</td>
		<td>
		티아라
		</td>
		
		<td>
		뽀삐뽀삐
		</td>
		<td>
		21.09.24
		</td>
	</tr>
	<tr>
		<td>
		<input type = "radio" name = "group" value = "소녀시대">
		</td>
		<td>
		<img src = "02.jpg" width = "200px" height = "200px"
		alt = "소녀시대">
		</td>
		<td>
		소녀시대
		</td>
		<td>
		기억의 습작
		</td>
		<td>
		21.09.25
		</td>
	</tr>
	<tr>
		<td colspan = "5">
		<input type = "submit" value = "확인">
		</td>
	</tr>
	</table>
	</form>
	</div>
</body>
</html>













//req_album_result.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
String group = request.getParameter("group");
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%
if(group.equals("티아라")){
	response.sendRedirect("req_tiara.jsp");
} else if(group.equals("소녀시대")){
	response.sendRedirect("req_girls.jsp");
} else{
	out.print("즐! 그런 그룹 여긴 없거든! 흥!");
}
%>


</body>
</html>












//req_tiara.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
String group = request.getParameter("group");
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>선택하신 앨범정보</h2>



당신이 선택한 앨범은 티아라거입니다.
<hr/>

<h3>타이틀곡 뽀삐뽀삐</h3> 
<iframe width="640" height="360" src="https://www.youtube.com/embed/AdjhDjKbcUg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>



</body>
</html>















//req_girls.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
String group = request.getParameter("group");
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>선택하신 앨범정보</h2>

당신이 선택한 앨범은 소녀시대거입니다.
<hr/>

<h3>타이틀곡 뽀삐뽀삐</h3>
<iframe width="640" height="360" src="https://www.youtube.com/embed/AdjhDjKbcUg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


</body>
</html>









######################################################################################################
개념정리_CSS를 HTML에 적용하여 스타일변경하기


#CSS(cascade style sheet)
-HTML에 디자인 요소를 적용하는 언어는 CSS임
-CSS를 HTML에 적용하는 방식에는 3가지 방식이 있음
1.인라인 스타일 시트 - 태그 내부에 해당 태그에만 적용되는 스타일을 지정



<div align="center" style = "border: 2px solid red; width : 80%; padding: 15px">
style의 벨류값은 모두 css에서 작용하는 명령어임(html은 벨류값을 대입연산자를이용해서 넣지만 css는 클론을 이용해서 넣나보다)
border는 테두리선을 만하는 것으로, 선굵기는 2px, 선의 종류는 solid(실선), 선의 색갈은 red

solid 대신 dashed라고 쓰면 점선으로 바뀜
red 대신 blue라 쓰면 블루가되고 

width는 80%로 해도된다.
패딩은 박스내의 간격을 의미한다 (한글로따지면 여백)

2.내부스타일시트 - 태그의 스타일을 head태그에서 따로 지정
태그에 내부 스타일 시트방식으로 디자인을 적용하려면 선택자를 이용합니다.
	-즉 css 디자인을 적용해야하는 태그들을 따로 분류하는것이다.
		-1번의 인라인스타일시트가 하나의 태그를 변경하는거면 얘는 다중태그를 변경하는것이라 보면 되느니라
-클래스선택자: .[클래스이름]	//보통 css
-아이디선택자: #[아이디이름]	//보통 자바스크립트
-태그 선택자: [태그이름]

3.외부 스타일 시트- 외부에 .css 파일을 따로 만들어 디자인 소스만 모두 지정한 뒤 HTML에서 링크를 통해 로딩시킴
	-이건 홈페이지만드는 실습할때 할거임 지금 안할거


######################################################################################################























######################################################################################################
예제23) CSS->HTML

res_login_form.jsp 파일 만들기


sendRedirect 로그인 연습
//table을 2행 2열짜리로 만들고 좌측1열은 아이디입력, pw입력이고 우측1열은 행을 병합해서 로그인 버튼이 들어가게하라
		//로그인클릭시 id pw정보가 post 방식으로 전송
ID를 입력!	//text 박스안에 회색으로 해당문구넣고 입력시 사라지게하라
PW를 입력!	//text 박스안에 회색으로 해당문구넣고 입력시 사라지게하라

이렇게 간단하게 박스를 만든후 CSS를 연습해보자


1)css를 html에 적용하는 방식인 인라인 스타일 시트를 이용하여 div태그 내부에 있는것들은 전부다 아래 조건에맞게 변경해라
테두리선
선굵기: 2px~20px
선종류: 점선 또는 실선
선색깔: 빨간색 또는 블루
너비: 80%
글자와 div박스사이의 여백: 15px

2)내부 스타일시트방식을 이용하여 특정그룹을 만들고 해당 그룹에 로그인 버튼을 담당하는 태그를 가입시켜서 아래 양식으로 변경하라
특정그룹 그룹명: login_btn  -> 특정태그들을 그룹으로 엮어주는 선택자의 종류는 클래스로 하여라

버튼배경색: 노란색
너비: 60px
높이: 50px
폰트: cursive
버튼박스와 로그인 글자와의 간격: 2px(200px도 해봐라 간격이 넓어진다)



######################################################################################################



답:




<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>

<style type = "text/css">
	.login_btn{
		background-color: yellow;
		width: 60px;
		height: 50px;
		font-family: cursive;
		padding: 2px;
	}
</style>
	
</head>
<body>
	<div align="center" style = "border: 20px dashed red; width : 80%; padding: 15px">
		<h3>sendRedirect 로그인 연습</h3>
		<form action="res_Login_ok.jsp" method="post">
			<table border="1">
				<tr>
					<td><input type="text" name="id" size="10px" placeholder="ID를 입력!" /></td>
					<td rowspan = "2"><input class = "login_btn" type="submit" value="로그인" /></td>
					<br />
				</tr>
				<tr>
					<td><input type="password" name="pw" size="10px" placeholder="PW를 입력!"></td>
				</tr>
			</table>
		</form>
	</div>
</body>
</html>
















######################################################################################################
예제24) CSS->HTML

만들 페이지명: res_login_ok.jsp 이거외에 밑에서 말하는 파일도 만들어야함

<%--
	- 이 페이지에서는 넘어온 아이디값과 비밀번호값을 
	받아서 처리합니다.
	만약 아이디가 'abc1234'이고 비밀번호가 'xyz9876'이라면	//현재 DB가 없기때문에 이 id, pw로 고정한다
	아이디가 일치하지 않았을 경우
	'res_id_fail.jsp'로 리다이렉팅해서
	'존재하지 않는 회원입니다'를 브라우저에 출력하세요.
	아이디가 일치할 경우 비밀번호도 확인해서 틀렸을 경우
	'res_pw_fail.jsp'로 리다이렉팅해서
	'비밀번호가 틀렸습니다'를 브라우저에 출력하세요.
	ID와 PW가 전부 일치했을 경우 'res_welcome.jsp'로
	리다이렉팅하여 '회원님 반갑습니다'를 출력하세요.

 --%>


######################################################################################################



답:








//res_login_form.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>

<style type = "text/css">
	.login_btn{
		background-color: yellow;
		width: 60px;
		height: 50px;
		font-family: cursive;
		padding: 2px;
	}
</style>
	
</head>
<body>
	<div align="center" style = "border: 20px dashed red; width : 80%; padding: 15px">
		<h3>sendRedirect 로그인 연습</h3>
		<form action="res_login_ok.jsp" method="post">
			<table border="1">
				<tr>
					<td><input type="text" name="id" size="10px" placeholder="ID를 입력!" /></td>
					<td rowspan = "2"><input class = "login_btn" type="submit" value="로그인" /></td>
					<br />
				</tr>
				<tr>
					<td><input type="password" name="pw" size="10px" placeholder="PW를 입력!"></td>
				</tr>
			</table>
		</form>
	</div>
</body>
</html>








//res_login_ok.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
request.setCharacterEncoding("utf-8");

String id = request.getParameter("id");
String pw = request.getParameter("pw");
%>

<%
if(id.equals("abc1234")){
	if(pw.equals("xyz9876")){
		response.sendRedirect("res_welcom.jsp");	
	} else{
		response.sendRedirect("res_pw_fail.jsp");
	}
} else{
	response.sendRedirect("res_id_fail.jsp");
}
%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

</body>
</html>







//res_id_fail.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	존재하지 않는 회원입니다.<br/>
	<%@ include file = "footer.jspf" %>
</body>
</html>










//res_pw_fail.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	비밀번호가 틀렸습니다.<br/>
	<%@ include file = "footer.jspf" %>
</body>
</html>










//res_welcom.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	회원님 반갑습니다 ^^<br/>
	<%@ include file = "footer.jspf" %>
</body>
</html>









































































































































21.09.26_6회차 
=======================================================================================================
*쿠키(생성,응답,읽기,사용,유효시간,로그인로직_자동로그인,아이디기억등),세션(저장,읽기,유효시간,삭제등)
=======================================================================================================

































































































######################################################################################################
개념정리_쿠키 개념, 생성-전송-사용, 유효시간




* out 객체의 이해
- JSP 페이지가 생성하는 모든 내용은 out 기본 객체를 통해 전송됩니다.
- JSP 페이지 내에서 사용하는 비스크립트 요소들(HTML코드와 텍스트)이 out 객체에 전달됩니다.
- 값을 출력하는 표현식(expression)의 결과값도 out객체에 전달됩니다.



* 쿠키(Cookie)
- 웹 브라우저에서 서버로 어떤 데이터를 요청하면, 서버측에서는 알맞은 로직을 수행한 후 데이터를 웹 브라우저에 응답합니다.
- 그리고 Http 프로토콜은 응답 후에 웹 브라우저와의 관계를 종료합니다.
- 연결이 끊겼을 때, 어떤 정보를 지속적으로 유지하기 위한 수단으로 쿠키라는 방식을 사용합니다.
- 쿠키는 서버에서 생성하여, 서버가 아닌 클라이언트측(local)에 정보를 저장합니다.
- 서버에서 요청할 때마다 쿠키의 속성값을 참조 또는 변경할 수 있습니다.
- 쿠키는 개당 4kb로 용량이 제한적이며, 300개까지(1.2MB) 데이터 정보를 가질 수 있습니다.
- 쿠키문법: 쿠키클래스에서 쿠키 생성 -> setter메서드로 쿠키의 속성 설정 -> response객체에 쿠키 탑재 -> 로컬 환경에 저장

- Cookie 객체 관련 메서드
1. setMaxAge(): 쿠키의 유효시간을 설정합니다.
1. setPath(): 쿠키사용의 유효디렉토리를 설정합니다.
1. setValue(): 쿠키의 값을 설정합니다.
1. setVersion(): 쿠키 버전을 설정합니다.
1. getMaxAge(): 쿠키 유효기간 정보를 얻습니다.
1. getName(): 쿠키의 이름을 얻습니다.
1. getPath(): 쿠키사용의 유효디렉토리 정보를 얻습니다.
1. getValue(): 쿠키의 값을 얻습니다.
1. getVersion(): 쿠키 버전을 얻습니다.







#request: 이전페이지의 파라미터등의 정보를 담고있는 객체
#response: 현재 페이지의 정보가 담길 객체(다음 페이지에 넘겨주어야 할 정보)
		-객체의 기능중 강제로 다음페이지로 넘기는 메서드도 있음 sendRedirect(".jsp");

쿠키생성 및 전송 방법:
1.쿠키 객체를 생성 - 생성자의 매개값으로 쿠키의 이름과 저장할 데이터의를 입력
	Cookie apple = new Cookie("apple_cookie", "사과맛 쿠키");
			           쿠키이름		쿠키값
2.쿠키 클래스의 setter 메서드로 쿠키의 속성들을 설정
	apple.setMaxAge(60*60); // 쿠키의 유효시간 설정(초) : 60초 x 60초
	peanut.setMaxAge(20);

3.http 응답시 response객체에 생성된 쿠키를 탑재하여 클라이언트로 전송 //request 객체가 가지는 쿠키배열에 해당 쿠키들을 탑제하는거임
	response.addCookie(apple);
	response.addCookie(peanut);

쿠키사용방법:
1.쿠키 배열변수 cookies을 만든뒤 서버에게 받은 모든 쿠키를 저장하는 배열의 주소를 참조
	Cookie[] cookies = request.getCookies(); //서버에서 준 쿠키를 저장하고있는 request객체를 이용하여
							쿠키배열 참조

2.포문을통해 쿠키를 하나식 꺼내고 꺼내진 쿠키의 이름을 저장 
	String cookieName = cookies[0].getName(); //쿠키 이름을 얻어오는 메서드	

3.꺼내진 쿠키의 이름과 탐색하고자하는 쿠키의 이름이 같은지 비교하여 같다면 땅콩쿠키가 존재합니다. 등의 원하는 로직 수행 
	-모든쿠키가 그이름이 아니라면 flag를 false로 주어서 쿠키는 존재하지 않습니다.
	if(cookieName.equals("peanut_cookie")){
		flag = true;
	}

######################################################################################################











######################################################################################################
예제25) 쿠키 유효시간, 이전페이지에서 받은 모든 쿠키 출력 





- Cookie 객체 관련 메서드
1. : 쿠키의 유효시간을 설정합니다.
1. setPath(): 쿠키사용의 유효디렉토리를 설정합니다.
1. : 쿠키의 값을 설정합니다.
1. setVersion(): 쿠키 버전을 설정합니다.
1. : 쿠키 유효기간 정보를 얻습니다.
1. : 쿠키의 이름을 얻습니다.
1. getPath(): 쿠키사용의 유효디렉토리 정보를 얻습니다.
1. : 쿠키의 값을 얻습니다.
1. getVersion(): 쿠키 버전을 얻습니다.






Cookie 폴더
cookie_make.jsp : 쿠키를 만드는서버용
cookie_check.jsp : 쿠기를 받아 사용하는 클라이언트용
cookie_check_all.jsp : 모든 쿠키의 이름과 값을 출력하는 페이지(check에서 링크를통해 출력한다)

1)쿠키 유효시간확인
1-1)땅콩쿠키(peanut_cookie)와 사과맛쿠키(apple_cookie)를 만들고 유효기간을 각각 20초 60초x60초(1시간)
  로 설정한후 해당 두 쿠키를 응답할때 전송할 쿠키배열에 추가하라
1-2)그후 make에서 실행을하면 check에서 쿠키 배열을 참조해서 땅콩쿠키가 있다면 땅콩쿠키가 존재합니다. 없다면 사라졌습니다.(일단 사과맛말고
		땅콩만실시)
	-처음엔 될것이고 이후에는 쿠키 시간 20초를 넘어서 로컬에서 사라짐으로(삭제됨으로) 안되는것이다.

1-3)make에서 실행했을때 땅콩쿠키 확인하기~ 라는 링크를 만들고 그걸 클릭하면 check로 이동해서 땅콩의 유효성출력 



2)모든 쿠키 출력하는 페이지만들기
위의 1번에서 유효성출력후 그 아래에는 모든쿠키보기라는 링크를 달아놓고 클릭시 모든 쿠키보이게해라
(아래처럼)


쿠키의 이름: apple_cookie
쿠키의 값: 사과맛쿠키

=======================
쿠키의 이름: peanut_cookie
쿠키의 값: 땅콩맛쿠키			//여기도 20초뒤엔 사라짐

=======================
쿠키의 이름: JSESSIONID
쿠키의 값: 9E57E336F17994AA29394C527005A1F5

=======================






######################################################################################################



답:



- Cookie 객체 관련 메서드
1. setMaxAge(): 쿠키의 유효시간을 설정합니다.
1. setPath(): 쿠키사용의 유효디렉토리를 설정합니다.
1. setValue(): 쿠키의 값을 설정합니다.
1. setVersion(): 쿠키 버전을 설정합니다.
1. getMaxAge(): 쿠키 유효기간 정보를 얻습니다.
1. getName(): 쿠키의 이름을 얻습니다.
1. getPath(): 쿠키사용의 유효디렉토리 정보를 얻습니다.
1. getValue(): 쿠키의 값을 얻습니다.
1. getVersion(): 쿠키 버전을 얻습니다.





//cookie_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    
<%
	Cookie apple = new Cookie("apple_cookie", "사과맛쿠키");
	Cookie peanut = new Cookie("peanut_cookie", "땅콩맛쿠키");
	
	apple.setMaxAge(60*60); // 쿠키의 유효시간 설정(초) : 60초 x 60초
	peanut.setMaxAge(20);
	
	response.addCookie(apple);
	response.addCookie(peanut);
%>

<a href = "cookie_check.jsp">쿠키확인하기~</a>








//cookie_check.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%	
	//클라이언트에 저장된 쿠키를 가져오는 방법
	Cookie[] cookies = request.getCookies();
	
	boolean flag = false;
	for(Cookie c: cookies){
		String cookieName = c.getName(); //쿠키 이름을 얻어오는 메서드
		if(cookieName.equals("peanut_cookie")){
			out.println("<h3>땅콩 쿠키가 존재합니다.</h3>");
			String value = c.getValue(); //쿠키의 값을 읽어오는 메서드
			flag = true;
			break;
		}
	}
	
	if(!flag){
		out.println("<h3>땅콩쿠키는 존재하지 않습니다. 사라졌습니다.</h3>");
	}
	
%>    

<hr/>
<a href = "cookie_check_all.jsp">모든 쿠키보기~</a>
    









//cookie_check_all.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	Cookie[] cookies = request.getCookies();
	
	for(Cookie c : cookies){
		String cookieName = c.getName();
		String cookieValue = c.getValue();
		
		out.print("<p> 쿠키의 이름: "+cookieName+"<br/> 쿠키의 값: "+cookieValue+"</p>");
		out.print("=======================<br/>");
	}
%>    



















######################################################################################################
예제26) 은행 등이 사용하는 유효시간이 정해진 로그인 로직구현1





cookie_login.jsp
cookie_login_ok.jsp
cookie_login_welcome.jsp


1)login에서 입력받고 post방식으로 cookie_login_ok.jsp로 요청파라미터 보내기
	-login에서 입력받는양식

	ID입력	//아이디입력 박스, ID입력은 입력시 사라지도록 설정
	 아이디 기억하기 //앞에 체크박스체크하도록 둬라 (요청파라미터 이름은 id_remember로 하여라)
		//이건 id입력비번입력로그인등의 페이지 기본 글자크기의 70%정도로 작게 표시되게 하여라
			//근데 이건 ui로 넣어만놓고 따로 기능은 아직안함 나중에 배우려나봄
	PW입력	//비번입력 박스, PW입력은 입력시 사라지도록 설정
	로그인	//특정 페이지로 이동 및 요청파라미터전송하는 버튼



2)ok에서는 아이디 비밀번호가 일치하는지 검사한후 일치한다면 쿠키(쿠키객체의 주소를담는 참조변수명:idCookie 쿠키이름:id_cookie, 쿠키
값: 아이디)를 생성한 후 다음페이지로 보낼 정보를 담는 객체가 가지는 쿠키객체배열에 저장후 welcome.jsp로 페이지 이동(저장하면 자동같이전송됨)
	-id나 비번중 하나라도 틀리면 다른 출력없이 login.jsp 페이지로 이동 



3)유효성검증(로그인유지) 및 로그인된 id 정보 현재페이지에서 만든 변수에 저장
	-userId라는 이전페이지에서 로그인된 id를 저장할 참조변수 생성
3-1)welcome.jsp: 이전 페이지의 정보를 저장한  request를 통해 쿠키 배열을 cookies라는 참조변수에 저장한후 for문으로
	쿠키의 name값이 id_cookie인 쿠키가 있는지 탐색
3-2)있다면 userId에 로그인한 계정의 id를 저장후 userId님 환영합니다. 를 출력
	그리고 로그인화면으로 돌아가기 라는 링크도 추가(링크클릭시 login.jsp로 이동)
3-3)없다면 로그인은 됐지만 쿠키의 유효시간이 지난것임으로 재 로그인이 필요하니까 시간이 지나 자동 로그아웃 처리되었습니다를
 출력한 후 login.jsp로 돌이가는 링크(다시 로그인하기) 출력





#small 태그 : 일반글씨크기에서 70%의 크기로 작게 만들어주는 태그
<small>아이디 기억하기</small> <br/>
######################################################################################################



답:







//cookie_login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action="cookie_login_ok.jsp" method = "post">
	<input type = "text" name = "id" size = "10px" placeholder = "ID입력"/><br/>
	<input type = "checkbox" name = "id_remember" value = "yes" />
	<small>아이디 기억하기</small> <br/> <!-- 글씨크기를 일반에 대해 약 70%정도 작게 만들어주는 태그 -->
	<input type = "password" name = "pw" size = "10px" placeholder = "PW입력" /><br/>
	<input type = "submit" value = "로그인" />
</form>
</body>
</html>




//login_ok.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

    
<%
	request.setCharacterEncoding("utf-8");		
	//앞에서 체크를 하면 3개의 요청파라미터가 넘어오는것이고 체크선택 안하면 2개의 요청파라미터가 넘어옴
	
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	
	if(id.equals("abc1234") && pw.equals("aaa1111")){
		Cookie idCookie = new Cookie("id_cookie", id);
		idCookie.setMaxAge(30);
		//idCookie.setMaxAge(60*60*24*30); //초단위의 유효시간을 한달로설정하는법 직관적
		response.addCookie(idCookie);
		
		response.sendRedirect("cookie_login_welcome.jsp");
	}else{
		response.sendRedirect("cookie_login.jsp");
	}
%>  






//login_welcom.jsp
  
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	Cookie[] cookies = request.getCookies();
	String userId = null;
	
	for(Cookie c : cookies){
		if(c.getName().equals("id_cookie")){
			userId = c.getValue();
			break;
		}
	}
	
	if(userId != null){
		out.println("<p>"+userId+"님 환영합니다.</p>");
		out.println("<a href = 'cookie_login.jsp'>로그인화면으로 돌아가기.</a>");
	} else{
		out.println("시간이 지나 자동 로그아웃 처리되었습니다.<br/>");
		out.println("<a href = 'cookie_login.jsp'>다시 로그인하기.</a>");
	}
%>    











######################################################################################################
예제27) 은행 등이 사용하는 유효시간이 정해진 로그인 로직구현2


0-1)파일추가없음
	-작업위치: login.jsp

0-2)문제발생 배경
특정 페이지마다 로그인이 필요한 페이지가 있다.
그럴때마다 위에서 만든 login.jsp를 response.sendRedirect해주면된다.
그런데 위의 로직대로라면 로그인이 이미 된사람도 계속 로그인을 해야하는 일이발생한다.
그럼으로 로그인이 필요한 페이지일때 login.jsp로 이동은 하지만 기존 로그인된게 증명이 된다면(쿠키) 해당페이지에서 이미 로그인한 사용자입니다.
를 출력하게 하여라

0-3)구동프로세스: cookie_login_welcome.jsp에서 다시로그인 클릭 -> (유효기간이 남아있다면) 이미 로그인한 사용자입니다.
						  -> (유효기간이 끝나서 쿠키가삭제됐다면) 로그인 입력창 표시

1)26번에서 생성된 id_cookie 쿠키를 검색하여 쿠키가 존재한다면 로그인 창 대신 브라우저에 "이미 로그인한 사용자입니다."를 출력하고,
	id_cookie가 없는 사용자는 로그인 입력창이 등장하도록 구성하세요


2)아이디 기억하기 체크박스를 체크하면 쿠키 유효시간 내에서는 언제 로그인 창으로 와도 아이디가 입력되있도록 하라
//로그인성공했다는것을 증명하는 쿠키가 있다면 로그인 안해도되게하는 로직은 잠시 주석처리해놔라(테스트해야하니까)



######################################################################################################






답:







//cookie_login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>

<%

	Cookie[] cookies = request.getCookies();

	boolean isLogin = false;
	String userId = ""; 
	
	if(cookies != null){
		for(int i=0;i<cookies.length;i++){
			if(cookies[i].getName().equals("remember_id")){
				userId= cookies[i].getValue();
			}
			/*	//아이디기억하는지 테스트하기위해 잠시 끈다.
			if(cookies[i].getName().equals("id_cookie")){
				isLogin = true;
			}
			*/
		}	
	}

%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>


<%
if(!isLogin){
%>
	<form action="cookie_login_ok.jsp" method="post">

		
		<input type="text" name="id" size="10px" placeholder="ID입력" value="<%= userId %>" /><br />		
		<input type="checkbox" name="remember_id" value="yes" /> <small>아이디
			기억하기</small> <br />
		<!-- 글씨크기를 일반에 대해 약 70%정도 작게 만들어주는 태그 -->
		<input type="password" name="pw" size="10px" placeholder="PW입력" /><br />
		<input type="submit" value="로그인" />
	</form>

<%
} else{
	out.print("이미 로그인한 사용자입니다.<br/>");
	out.print("<a href = 'cookie_login_welcome.jsp'>웰컴 페이지로~ </a>");
}
%>

</body>
</html>












//cookie_login_ok.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

    
<%
	request.setCharacterEncoding("utf-8");		
	//앞에서 체크를 하면 3개의 요청파라미터가 넘어오는것이고 체크선택 안하면 2개의 요청파라미터가 넘어옴
	
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	String check = request.getParameter("remember_id");	
	//체크했던사람은 yes가 담긴 객체의 주소가 오고 안한사람은 null이 옴
	
	
	
	if(id.equals("abc1234") && pw.equals("aaa1111")){
		Cookie idCookie = new Cookie("id_cookie", id);
		idCookie.setMaxAge(5);
		//idCookie.setMaxAge(60*60*24*30); //초단위의 유효시간을 한달로설정하는법 직관적
		response.addCookie(idCookie);
	
		if(check != null){
			Cookie idMemory = new Cookie("remember_id", id);
			idMemory.setMaxAge(10);
			response.addCookie(idMemory);
		}

		response.sendRedirect("cookie_login_welcome.jsp");
	}else{
		response.sendRedirect("cookie_login.jsp");
	}
%>  
  











//cookie_login_welcome.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	Cookie[] cookies = request.getCookies();
	String userId = null;
	
	
	for(Cookie c : cookies){
		out.print(c.getName() + "<br/>");
		if(c.getName().equals("id_cookie")){
			userId = c.getValue();
			//break;//여기서 이걸하면 제일 먼저 추가된 id_cookie만 보이고 뒤에 쿠키들은보이지않음
		}
	}
	out.print("==========================<br/>");

	if(userId != null){
		out.println("<p>"+userId+"님 환영합니다.</p>");
		out.println("<a href = 'cookie_login.jsp'>로그인화면으로 돌아가기.</a>");
	} else{
		out.println("시간이 지나 자동 로그아웃 처리되었습니다.<br/>");
		out.println("<a href = 'cookie_login.jsp'>다시 로그인하기.</a>");
	}
%>    




















######################################################################################################
개념정리_session



* 세션(Session)
- 세션도 쿠키와 마찬가지로 서버와의 관계를 유지하기 위한 수단입니다.
- 단, 쿠키와 달리 클라이언트의 특정 위치에 저장되는 것이 아니라, 서버상에 객체형태로 존재합니다.
- 서버당 하나의 세션 객체를 가질 수 있습니다.
- 세션 객체는 브라우저 창을 종료하면 삭제됩니다.*******+세션이 만료되기전까지
- 따라서 세션은 서버에서만 접근이 가능하여 보안이 좋고, 저장할 수 있는 데이터에 한계가 없습니다.
- 세션은 클라이언트의 요청이 발생하면 자동생성되어 고유한 ID값을 클라이언트에 넘겨주며 이것은 쿠키에 저장됩니다.
- JSP에서는 session이라는 내장 객체를 지원하여 세션의 속성을 설정할 수 있습니다.

- session 객체 관련 메서드
1. setAttribute() - 세션에 데이터를 저장합니다.
	/*
	-세션은 쿠키와 마찬가지로 http 통신 데이터를 유지하기위한 수단으로 사용함
	-세션에 데이터를 저장할 때는 JSP 내장객체 session이 지원하는 setAttribute() 메서드를 사용함
	-해당 메서드의 첫번째 매개값으로 세션의 데이터의 이름을 정하고, 두번째 매개값으로 세션에 저장할 값을 정해줌
	*/
1. getAttribute() - 세션에 저장되어 있는 데이터를 얻습니다.
	/*
	-세션에 저장된 데이터는 브라우저 창이 종료될때까지 혹은 세션의 유효시간이만료되기 전까지 웹 어플리케이션의 모든
	jsp페이지에서 사용할수있음
	-세션에 저장된 데이터를 가져오려면 session객체의 getAttribute()메서드를 사용하여 매개값으로 가져올
	데이터의 세션명을 적음
	*/


1. getAttributeNames() - 세션에 저장되어 있는 모든 데이터의 세션 이름(key)을 얻습니다.
1. getId() - 자동생성된 세션의 유니크한 아이디를 얻습니다.
1. getCreationTime() - 세션이 생성된 시간을 구합니다.
1. getLastAccessedTime() - 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구합니다.

1. setMaxInactiveInterval() - 세션의 유효시간을 설정합니다. 초 단위로 기록합니다.

	//세션의 유효시간 설정 1800초로 나온다. 30분임 디폴트값이
	
	/*
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	*/
	
	//세션의 유효시간 디폴트값  1시간으로 변경
	session.setMaxInactiveInterval(60*60);
	
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	
1. getMaxInactiveInterval() - 세션의 유효시간을 얻습니다. 가장 최근 요청시점을 기준으로 카운트됩니다.

1. removeAttribute() - 특정 세션의 데이터를 삭제합니다.(섹션 객체의 삭제가 아님)

1. invalidate() - 모든 세션의 데이터를(키와벨류==이름과벨류인 엔트리형 객체) 삭제합니다.
	-isRequestedSessionIdValid() -현재 요청받은 정보를 담은 request 객체 안에 

	session.invalidate();
	if(request.isRequestedSessionIdValid()){	
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}
* 쿠키 vs 세션
- 쿠키 대신에 세션을 사용하는 가장 큰 이유는 세션이 쿠키보다 보안에서 앞서기 때문입니다.
- 쿠키의 이름이나 데이터는 네트워크를 통해 전달되기 때문에 HTTP 프로토콜을 사용하는 경우 중간에서 누군가가 쿠키의 값을 읽어올        
수 있습니다.
- 그러나 세션은 오직 서버에만 저장되기 때문에 중요한 데이터를 저장하기에 좋습니다.
- 세션을 사용하는 또 다른 이유는 웹 브라우저가 쿠키를 지원하지 않거나 강제로 사용자가 쿠키를 차단한 경우에도 사용할 수 있다는  점입니다.
- JSP에서는 쿠키를 사용할 수 없는 경우 세션ID를 쿠키에 저장하지 않고 URL  재작성 방식을 통해 세션ID를 URL로 웹 서버에 전달합     니다.

- 세션은 여러 서버에서 공유할수 없는 단점이 있습니다. 그러나 쿠키는 도메인을 이용해 쿠키를 여러  도메인에서 공유할 수 있기  때문        에 Naver, Daum과 같은 포털사이트들은 쿠키에 로그인 방식을 저장하는 것을 선호합니다.
ex) www.naver.com과 mail.naver.com, blog.naver.com의 서버는 각각 다름.

######################################################################################################



























######################################################################################################
예제28) session 


1) session 객체 관련 메서드
1.  - 세션에 데이터를 저장합니다.
1.  - 세션에 저장되어 있는 데이터를 얻습니다.
1. getAttributeNames() - 세션에 저장되어 있는 모든 데이터의 세션 이름(key)을 얻습니다.
1. getId() - 자동생성된 세션의 유니크한 아이디를 얻습니다.
1. getCreationTime() - 세션이 생성된 시간을 구합니다.
1. getLastAccessedTime() - 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구합니다.
1.  - 세션의 유효시간을 설정합니다. 초 단위로 기록합니다.
1.  - 세션의 유효시간을 얻습니다. 가장 최근 요청시점을 기준으로 카운트됩니다.
1.  - 특정 세션의 데이터를 삭제합니다.(섹션 객체의 삭제가 아님)

1.  - 모든 세션의 데이터를(키와벨류==이름과벨류인 엔트리형 객체) 삭제합니다.
	- -현재 요청받은 정보를 담은 request 객체 안에 유효한 세션 id가 있는지 확인

	session.invalidate();
	if(request.isRequestedSessionIdValid()){	
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}




2)session 실습

Session 폴더
session_make.jsp
session_check.jsp


2-1)세션값추가 및 링크(session_check.jsp)
	
클라이언트의 요청시 자동생성될 객체 session을 이용하여 내부의 session 값을 추가하라.
	-이름: nickname /value: 홍길동
	-이름: hobbys   /value: 축구, 게임, 독서

그 후 session_check.jsp로 이동하는 링크 작성
	-세션 데이터 활용하기


2-2)차후 활용을 위해 세션의 특정 데이터의 벨류값 저장(session_make.jsp) 및 출력

nick이란 참조변수를 만들고 내부에는 make.jsp에서 만든 session객체의 데이터중 이름을 nickname을 가진 데이터를
	넣어라.
hobbys란 배열타입변수를 만들고 make.jsp에서 만든 session객체의 hobbys란 이름을 가진 데이터의 값을 저장하라


2-3)세션의 기본 디폴트 유효시간 확인 후 유효시간을 1시간으로 설정하라

2-4)세션의 특정 이름을 가진 데이터 삭제

2-5)모든 세션 데이터 삭제 및 세션에 데이터가 남았는지 확인
	-조건식으로 데이터가 남았다면 유효한 세션이 존재함을 출력하고 그렇지 않다면 유효한 세션이 존재하지 않다고 출력


홍길동
[축구, 게임, 독서]
===================================
세션의 유효시간: 3600초
===================================
삭제 후 섹션객체의 데이터 nickname의 값: null
삭제되지 않은 섹션객체의 데이터 hobbys의 값: [축구, 게임, 독서] 
유효한 세션이 존재함
===========================================
유효한 세션이 존재하지 않음.

######################################################################################################






답:





1) session 객체 관련 메서드

1. setAttribute() - 세션에 데이터를 저장합니다.
	/*
	-세션은 쿠키와 마찬가지로 http 통신 데이터를 유지하기위한 수단으로 사용함
	-세션에 데이터를 저장할 때는 JSP 내장객체 session이 지원하는 setAttribute() 메서드를 사용함
	-해당 메서드의 첫번째 매개값으로 세션의 데이터의 이름을 정하고, 두번째 매개값으로 세션에 저장할 값을 정해줌
	*/
1. getAttribute() - 세션에 저장되어 있는 데이터를 얻습니다.
	/*
	-세션에 저장된 데이터는 브라우저 창이 종료될때까지 혹은 세션의 유효시간이만료되기 전까지 웹 어플리케이션의 모든
	jsp페이지에서 사용할수있음
	-세션에 저장된 데이터를 가져오려면 session객체의 getAttribute()메서드를 사용하여 매개값으로 가져올
	데이터의 세션명을 적음
	*/


1. getAttributeNames() - 세션에 저장되어 있는 모든 데이터의 세션 이름(key)을 얻습니다.
1. getId() - 자동생성된 세션의 유니크한 아이디를 얻습니다.
1. getCreationTime() - 세션이 생성된 시간을 구합니다.
1. getLastAccessedTime() - 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구합니다.

1. setMaxInactiveInterval() - 세션의 유효시간을 설정합니다. 초 단위로 기록합니다.

	//세션의 유효시간 설정 1800초로 나온다. 30분임 디폴트값이
	
	/*
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	*/
	
	//세션의 유효시간 디폴트값  1시간으로 변경
	session.setMaxInactiveInterval(60*60);
	
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	
1. getMaxInactiveInterval() - 세션의 유효시간을 얻습니다. 가장 최근 요청시점을 기준으로 카운트됩니다.

1. removeAttribute() - 특정 세션의 데이터를 삭제합니다.(섹션 객체의 삭제가 아님)

1. invalidate() - 모든 세션의 데이터를(키와벨류==이름과벨류인 엔트리형 객체) 삭제합니다.
	-isRequestedSessionIdValid() -현재 요청받은 정보를 담은 request 객체 안에 

	session.invalidate();
	if(request.isRequestedSessionIdValid()){	
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}













2)session 실습






//session_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    
<%
	/*
	-세션은 쿠키와 마찬가지로 http 통신 데이터를 유지하기위한 수단으로 사용함
	-세션에 데이터를 저장할 때는 JSP 내장객체 session이 지원하는 setAttribute() 메서드를 사용함
	-해당 메서드의 첫번째 매개값으로 세션의 이름을 정하고, 두번째 매개값으로 세션에 저장할 값을 정해줌
	*/
	
	session.setAttribute("nickname", "홍길동");
	session.setAttribute("hobbys", new String[]{"축구", "게임", "독서"});
	
%>


<a href = "session_check.jsp">세션 데이터 활용하기</a>











//session_check.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import = "java.util.Arrays"%>
    
<%
/*
-세션에 저장된 데이터는 브라우저 창이 종료될때까지 혹은 세션의 유효시간이만료되기 전까지 웹 어플리케이션의 모든
jsp페이지에서 사용할수있음

-세션에 저장된 데이터를 가져오려면 session객체의 getAttribute()메서드를 사용하여 매개값으로 가져올
데이터의 세션명을 적음
*/

	String nick = (String)session.getAttribute("nickname");
	String[] hobbys = (String[])session.getAttribute("hobbys");
	
	out.print(nick+"<br/>");
	out.println(Arrays.toString(hobbys)+"<br/>");
	
	out.print("===================================<br/>");
	
	//세션의 유효시간 설정 1800초로 나온다. 30분임 디폴트값이
	
	/*
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	*/
	
	//세션의 유효시간 디폴트값  1시간으로 변경
	session.setMaxInactiveInterval(60*60);
	
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	
	
	//특정세션 데이터(특정 이름을 가진 데이터) 삭제
	session.removeAttribute("nickname");
	nick = (String)session.getAttribute("nickname");
	out.println("삭제 후 섹션객체의 데이터 nickname의 값: "+nick+"<br/>");
	out.println("삭제되지 않은 섹션객체의 데이터 hobbys의 값: "+Arrays.toString(hobbys));
	
	if(request.isRequestedSessionIdValid()){
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}
	out.print("===========================================<br/>");
	
	//모든 세션데이터 삭제 및 세션에 데이터가 남아있는지 확인
	session.invalidate();
	if(request.isRequestedSessionIdValid()){
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}
	
%>    































21.09.27_7회차
=======================================================================================================
*session을 통한 로그인 로직구현, application 저장범위를 이용한 예매로직
=======================================================================================================

​

​

​

​

​

​

​

######################################################################################################
예제29)session을 통해 로그인 로직 구현

session_login.jsp : 입력 ui 만들기(밑에 있는거 붙여서 양식만 확인하고 작성은 직접하라)

  -로그인 실패시 실패 문구를 띠우고 확인을 누르면 로그인화면으로 다시 돌아가도록

session_login_ok.jsp : 분별하여 성공시 welcome 실패시 경고창 띄우고 다시 돌아가기

session_login_welcome.jsp : 아래 주석이 말하는 바 수행

​

//session_login.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"

  pageEncoding="UTF-8"%>

<!DOCTYPE html>

<html>

<head>

<meta charset="UTF-8">

<title>Insert title here</title>

​

<style type = "text/css">

fieldset{

  width: 50%;

  align-content: center;

}

</style>

​

</head>

<body>

​

  <form action="session_login_ok.jsp" method="post">

     <fieldset>

        <legend>로그인 폼</legend>

        <input type="text" name="id" size="10px" placeholder="id"> <br />

        <!--  span은 div같은건데 자동으로 줄개행이 안일어나는 상자임 -->

        <input type="password" name="pw" size="10px"placeholder="pw"> <br />

        <input type="text" name="nick" size="10px" placeholder="별명"> <br />

        <input type="submit" value="로그인" />

     </fieldset>

  </form>

​

</body>

</html>

​

//session_login_welcome.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"

   pageEncoding="UTF-8"%>

<%

​

​

/*

  1.로그인하지 않은 사용자가 주소창에 이 페이지의 URL을 적고 들어왔을 경우 로그인창으로 돌려보내는

     코드를 작성하세요.

	

  2.로그인한 회원의 아이디와 별명을 통해 "nick(id)님 환영하세요"를 출력하세요

 

  3.a태그로 로그인창으로 돌아가는 링크와 request 폴더에 앨범페이지로

  갈 수 있는 링크 2개를 작성하세요.

 

  4.a태그로 로그아웃페이지에 가서 거기서 로그아웃할수 있도록 하시오. (로그아웃 파일이름 : session_logout.jsp)

	-로그아웃안하면 세션이 계속 유지되고있기때문에 1,2,3 제대로 작성했어도 로그인 페이지로 갔을때

		거기에서 welcome.jsp 주소를 url에 입력하면 들어가짐;; 세션이 당연히 남아있으니 만료되거나

		html꺼질때까지 되겠지 그러니 4번을 꼭 구현해야함

 

  ***5.session_login.jsp 위치에서 작업: 로그인이 된사람은 welcome페이지에서 로그인 창으로 돌아가는것을 클릭했을때

	그냥 로그인창이 나오는것이 아닌 이미 누구누구님은 로그인된 사람입니다. 라는 것을 출력

 

	**쿠키와 세션의 차이: 브라우저 껐다켰을때 로그인이 유지되는가? 세션은 안되고 쿠키는됨 세션 안되는거

	확인해봐라(그럼 1번 작성후 4번안만들어도 처음 로그인할때랑 브라우저껐다켰을때는 welcome주소쳐도

		login으로 와지겠네? session값이 없으니까 이거도 확인해라)

*/

​

%>

​

​

<!DOCTYPE html>

<html>

<head>

<meta charset="UTF-8">

<title>Insert title here</title>

</head>

<body>

​

​

</body>

</html>

######################################################################################################

​


답:



​

//session_login.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"

  pageEncoding="UTF-8"%>

 

 

 

<!DOCTYPE html>

<html>

<head>

<meta charset="UTF-8">

<title>Insert title here</title>

​

<style type = "text/css">

fieldset{

  width: 50%;

  align-content: center;

}

</style>

​

</head>

<body>

​

 

<%

	if(session.getAttribute("user_id")==null){

%>			

  <form action="session_login_ok.jsp" method="post">

     <fieldset>

        <legend>로그인 폼</legend>

        <input type="text" name="id" size="10px" placeholder="id"> <br />

        <!--  span은 div같은건데 자동으로 줄개행이 안일어나는 상자임 -->

        <input type="password" name="pw" size="10px"placeholder="pw"> <br />

        <input type="text" name="nick" size="10px" placeholder="별명"> <br />

        <input type="submit" value="로그인" />

     </fieldset>

  </form>

<%

	} else{

		out.print("당신은 이미 로그인 되어있다구요! 이런거 필요없음! 세션이 유지될때까지는!<br />");

		out.print("<a href = "session_login_welcome.jsp">웰컴페이지로이동</a>");		

	}

%>

 

 

 

</body>

</html>

​

​

 

 

 

 

//session_login_ok.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"

   pageEncoding="UTF-8"%>    

   

<%

  request.setCharacterEncoding("utf-8");

​

  String id = request.getParameter("id");

  String pw = request.getParameter("pw");

  String nick = request.getParameter("nick");

 

  if(id.equals("kkk777") && pw.equals("7777")){

     session.setAttribute("user_id", id);

     session.setAttribute("user_nick", nick);

​

     session.setMaxInactiveInterval(5);

     response.sendRedirect("session_login_welcome.jsp");

  } else{%>

 

  <!--  html 내부에 자바스크립트 코드를 사용하려면 <script>태그를 사용함

 

  -js내장함수 alert()는 브라우저에 경고창을 띄웁니다.

  -js내장객체 history가 제공하는 back() 메서드는 뒤로가기 기능을 수행함

  -->

  <script type = "text/javascript">

     alert("로그인에 실패했습니다.");

     history.back();

  </script>

  <%} %>

​

​
​

//session_login_welcome.jsp

 

<%@ page language="java" contentType="text/html; charset=UTF-8"

   pageEncoding="UTF-8"%>

<%

​

​

/*

  1.로그인하지 않은 사용자가 주소창에 이 페이지의 URL을 적고 들어왔을 경우 로그인창으로 돌려보내는

     코드를 작성하세요.   

  2.로그인한 회원의 아이디와 별명을 통해 "nick(id)님 환영하세요"를 출력하세요

 

  3.a태그로 로그인창으로 돌아가는 링크와 request 폴더에 앨범페이지로

  갈 수 있는 링크 2개를 작성하세요.

*/

  if((String)session.getAttribute("user_id") == null){

     response.sendRedirect("session_login.jsp");  

  }

  String userId = (String)session.getAttribute("user_id");

  String userNick = (String)session.getAttribute("user_nick");
%>

​
​

<!DOCTYPE html>

<html>

<head>

<meta charset="UTF-8">

<title>Insert title here</title>

</head>

<body>
  <%= userNick %>(<%= userId %>)님 환영해요~~! <br />

  <a href = "../JspObjRequest/req_album.jsp">앨범 페이지로 가기</a><br />

  <a href = "session_login.jsp">로그인창으로 돌아가기</a> <br />

  <a href = "session_logout.jsp">로그아웃</a> <br />

</body>

</html>

​

​

//session_logout.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"

   pageEncoding="UTF-8"%>



<%

	session.invalidate();

	response.sendRedirect("session_login.jsp");

%>

​

 

 

​

######################################################################################################

개념정리_데이터의 저장범위(scope)
 

 * 쿠키 vs 세션
- 쿠키 대신에 세션을 사용하는 가장 큰 이유는 세션이 쿠키보다 보안에서 앞서기 때문입니다.
- 쿠키의 이름이나 데이터는 네트워크를 통해 전달되기 때문에 HTTP 프로토콜을 사용하는 경우 중간에서 누군가가 쿠키의 값을 읽어올 수 있습니다.
- 그러나 세션은 오직 서버에만 저장되기 때문에 중요한 데이터를 저장하기에 좋습니다.
- 세션을 사용하는 또 다른 이유는 웹 브라우저가 쿠키를 지원하지 않거나 강제로 사용자가 쿠키를 차단한 경우에도 사용할 수 있다는 점입니다.
- JSP에서는 쿠키를 사용할 수 없는 경우 세션ID를 쿠키에 저장하지 않고 URL 재작성 방식을 통해 세션ID를 URL로 웹 서버에 전달합 니다.

- 세션은 여러 서버에서 공유할수 없는 단점이 있습니다. 그러나 쿠키는 도메인을 이용해 쿠키를 여러 도메인에서 공유할 수 있기 때문 에 Naver, Daum과 같은 포털사이트들은 쿠키에 로그인 방식을 저장하는 것을 선호합니다.
ex) www.naver.com과 mail.naver.com, blog.naver.com의 서버는 각각 다름.


* application 기본 객체
- 특정 웹 어플리케이션에 포함된 모든 JSP페이지는 하나의 application 기본 객체를 공유합니다.
- application 객체는 웹 어플리케이션 전반에 걸쳐서 사용되는 정보를 담고 있습니다.
- request 객체는 요청영역마다 생성되고, session 객체는 브라우저별로 생성되고, application은 프로그램 전체에서 딱 한번 최초 가동 시 생성됩니다.


######################################################################################################

​

​

 
 

 

 
​

​










######################################################################################################
예제30) 방문자수를 통한 데이터의 저장범위(scope) 확인



webcontent 폴더에 folder 추가 :  Application

파일: app_basic.jsp

 

 

1) 세션의 데이터와 메서드를 이용하여 방문자수를 조회하는 로직을 작성하라

 

 

 

//session_login_welcome.jsp 여기에 <!doctype> 위에 아래코드 추가 //1번에서 만든걸 지시자로 include하는거다.

<%@ include file = "../Application/app_basic.jsp" %>

 

//연속적으로 <body>아래에 아래코드추가	// 가시적으로 include된걸 보기위해 출력하는거다. 이게 위에랑 세트다

<hr/><h3>방문자 수 : <%= count %></h3><hr/> 

 

 

//그후 welcome의 req_album.jsp에도 마우스갖다대고 f3 클릭하여 그리로 이동후 똑같이 추가
	//이때 welcome의 방문자수와 album의 방문자수는 달라야한다. welcome 화면에 올때마다 방문객수가늘고 album은 앨범에 갈때마다
		//방문객수가 늘어야한다.
		//jsp파일이 1개 더필요하다면 app_basic02.jsp로 만들어라
 

//그후  브라우저가 종료되기 전까지는 welcome에서 방문자수가 오르는것확인, 앨범리스트보기 링크탔을때도 방문자수오르는것 확인
	//-이거 현실세계를생각하면 로그아웃을 하고 다른걸로와도 방문자수는 유지되어야한다. 하지만 지금 프로그램이면
		//로그아웃 후 들어오면 유지안된다. 그이유는 로그아웃시 모든 session데이터를 날려버리니까 그런거다 ㅋ
			//이건 알아서 조치를 해줘야한다. 로그아웃할때는 로그인을 인증하는 세션만 날리면된다.

 

//그후 session.get(or set)Attribute("visit") 을 전부 request로 바꿔라(app_basic.jsp)
		//album은 그대로 둬서 session과 request의 차이와 session과 application의 차이를 두눈으로확인하라
	-이렇게하면 데이터저장범위(scope)에 따라 request는 위임된 페이지로밖에 데이터가 저장안되니까

	 당연히 안됨을 확인 1은됨 위임됐으니까

	-리퀘스트는 한번요청하고 끝나면 날라간다

	-자세한건 forward할때 다시 배운다

	-여하튼 지금은 session만 데이터 저장범위가 이렇게 넓다는것을 인지해라(다만 브라우저 종료되기전까지)

 

 

//그후 다시 request를 application.getAttribute("visit)으로 바꿔라

	-브라우저 종료되고 다시나와도 방문자수가 유지되서 잘되는걸 확인하라

		-즉 application이 데이터저장 범위가 아주 크다는것을 인식하라

	-서버를껏다 켜야 비로서 방문자수가 0로 되는것을 확인하라

 

 

 

	

######################################################################################################

​



답:

​



1) 세션의 데이터와 메서드를 이용하여 방문자수를 조회하는 로직을 작성하라

 
//app_basic01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"

   pageEncoding="UTF-8"%>

 

 

<%

	int count = 0;

	if(session.getAttribute("visit") != null){

		count = (Integer)session.getAttribute("visit");

	}

	count++;

 

	session.setAttribute("visit", count);
	//request.setAttribute("visit", count); 이런식으로 위에있는 getAttribute도 포함해서 전부 바꿔가면됨
	//application.setAttribute("visit", count);
 

%>

 




//app_basic02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    
    
<%
	
	int albumCount = 0;
	if(session.getAttribute("albumVisit")!=null){
		albumCount = (Integer)session.getAttribute("albumVisit");	
	}
	albumCount++;
	
	session.setAttribute("albumVisit", albumCount);

%>    






//session_login_welcome.jsp-> 2줄만 보면됨 inclue, 방문자수 부분
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%


/*
	1.로그인하지 않은 사용자가 주소창에 이 페이지의 URL을 적고 들어왔을 경우 로그인창으로 돌려보내는
		코드를 작성하세요.
		
		
		
	2.로그인한 회원의 아이디와 별명을 통해 "nick(id)님 환영하세요"를 출력하세요
	
	3.a태그로 로그인창으로 돌아가는 링크와 request 폴더에 앨범페이지로 
	갈 수 있는 링크 2개를 작성하세요.
*/
	if((String)session.getAttribute("user_id") == null){
		response.sendRedirect("session_login.jsp");	
	}
		
	String userId = (String)session.getAttribute("user_id");
	String userNick = (String)session.getAttribute("user_nick");
	
%>



<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<%= userNick %>(<%= userId %>)님 환영해요~~! <br />
	<a href = "session_login.jsp">로그인창으로 돌아가기</a> <br />
	<a href = "../JspObjRequest/req_album.jsp">앨범 페이지로 가기</a><br />
  	<a href = "session_logout.jsp">로그아웃</a> <br />

	<%@ include file = "../Application/app_basic.jsp" %>  	
	<hr/><h3>방문자 수 : <%= count %></h3><hr/>
</body>
</html>


 








//req_album.jsp -> 2줄만 보면됨 inclue, 방문자수 부분
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<div align=center>
<form action = "req_album_result.jsp">
<table border ="1" >
	<tr>
		<td></td>
		<td>앨범 커버</td>
		<td>가수</td>
		<td>앨범 제목</td>
		<td>발매일</td>
	</tr>
	<tr>
		<td><input type = "radio" name = group value = "티아라"></td>
		<td align = "center"><img src = "01.jpg" width = "200px" height = "200px" alt = "티아라임" /></td>
		<td >티아라</td>
		<td>다시한번</td>
		<td>2021.09.24</td>
	</tr>
	<tr>
		<td><input type = "radio" name = group value = "소녀시대"></td>
		<td align = "center"><img src = "02.jpg" width = "200px" height = "200px" alt = "소녀시대임" /></td>
						
		<td >소녀시대</td>
		<td>소녀시대의 소녀시대</td>
		<td>2021.09.23</td>
	</tr>
	<tr>
		<!--  td colspan="5"--> <!--5열을 병합하라는 의미. 근데 td를 5개아만들면 병합할것도 없지 않는가?-->
		
		<td colspan="5">
		<input type = "submit" value = "확인" />
		</td>
	</tr>
	

</table>
 
	<%@ include file = "../Application/app_basic02.jsp" %>  	
	<hr/><h3>방문자 수 : <%= albumCount %></h3><hr/>
</form>
</div>

</body>
</html>

​

​



















######################################################################################################

예제31) application의 저장범위를 이용하여 예매로직 만들기

​

Application폴더

concert_auth.jsp 만들기
concert_auth_check.jsp 만들기
concert_reserve.jsp 만들기
concert_reserve_check.jsp 만들기

 
 
1)concert_auth.jsp 
1-1)랜덤 인증번호를 받는 참조변수를 스크립트릿에 만들어라(그중 4개의 문자를 인증번호로 사용할것이다.)(//concert_auth.jsp)
	//인증을 1분내에 안하면 인증번호가 무효가되도록 만들어라(유효시간이용)


1-2) 그 후 회원 인증페이지로 아래 있는 코드를 복사하라(//concert_auth.jsp)
	


<!DOCTYPE html>

<html>

<head>

<meta charset="UTF-8">

<title>Insert title here</title>

</head>

<body>

	<h2>회원 인증페이지</h2>
	<h1>인증문자: <del><%= uuids[1] %></del></h1>
	<form action="concert_auth_check.jsp">
		<small>위의 인증문자를 입력해주세요!</small>
		<input type="text" name="code" size="5">
		<input type="submit" value="확인">
	</form>

</body>

</html>

 

 


2)concert_auth_check.jsp : 사용자가 입력한 인증번호와 1)에서 만든 인증번호가 일치하는지 확인하는페이지
	//일반적으로 인증번호는 서버가 팅기기전까지 유지될 필요가없다. 오히려 그러면 보안의미가없다.
		//그래서 인증번호는 session을 이용해라

2-1)인증번호가 일치한다면 나중에 실수로 뒤로가기를 누른경우 다시 인증하지 않도록 auth_pass라는 네임을 가진 session 데이터를 만들어라.
		-auth.jsp에서 해당 코드추가
			-그리고 여기뿐만아닌 차후 reserve에서도(예약하는 페이지) 누군가 인증도 안했는데 url입력해서 오면 안되니까
			 막는 용도로도 쓰일 session의 데이터이다.

2-2)인증번호가 일치한다면 concert_reserve.jsp로 자동이동시켜라.
2-3)check로 이동하여 검사했더니 인증번호가 일치하지 않는다면 
	인증코드가 일치하지 않습니다. 다시인증해주세요. 라는 팝업을 노출시키고 
	확인을 누르면 자동으로 이전페이지인 auth.jsp로 이동하도록하라


 

3)concert_reserve.jsp : 예매 ui 만들기 , 각 좌석의 체크박스를 클릭후 파라미터 전송시 값으로 A-1과 같이 열-행 을 넣어주기
	-각 체크박스의 벨류값이 잘들어갔는지 확인하려면 우클릭 페이지소스보기 해서 확인(for문을 돌려도 모든 돌려진 결과소스가 표시됨)
	-*****해당ui는 아래 로직을 돌려서 어떤모양인지 확인만 한 후 작성하시오. 
	

4)concert_reserve_check.jsp
	-확정리스트(list), 희망좌석문자배열(seat), 임시리스트(temp)

	//1.예매가 확정된 좌석정보를 저장할 리스트
//2.사용자가 예매를 희망하는 좌석정보가 들어있는 배열
//3.예약 선점여부를 확인할 로직
//4.예약선점여부 결과 선점한 좌석이 없을시 모든 임시리스트 내부객체의 주소들을 확정리스트에 추가하기
//5.브라우저가 종료되도 리스트가 유지되어야한다. 그래야 다른 브라우저가 와도 어디어디예약이
	//남는지 아니까 그래서 application에 저장한다. 세션데이터의 이름은 complete_list
//6.list가 생성되고 내부의 선점된 좌석들을 넣어줘야하니까 선점된(완료된) 좌석데이터의 값이
	//있다면 list에 그 값들을 넣어주고 없으면 그냥 아무것도안하고 빈 list를 내려보내면 된다.

5)concert_reserve_check.jsp의 ui 만들기
	아래껄 실행해보고 만들어봐라(아래 내용이 check.jsp의 body에 들어가야한다)

<div align="center">
		<h2>콘서트 예매 처리 결과</h2>
		<p>
			선택한 좌석<br>
			<%
				for(String s : seat) {
					out.println("<b>[" + s + "]</b>");
				}
			%>
			<br>가 예매 신청되었습니다.
		</p>
		<p>
			예매 신청 결과: <%= (count == seat.length) ? "성공" : "실패" %>
			<br>
			<% if(count != seat.length) { %>
				예매하고자 하는 좌석이 이미 선점되었습니다.
			<% } %>
			<br>
			<a href="concert_reserve.jsp">추가 예매하기</a>
		</p>
		
	</div>


6)여기까지하면 기본적인거 다 끝났다. 위에서 충분히 테스트케이스 돌려봐라.
	하지만 선점된 좌석을 선택못하게 다른 색으로 만들어놓으면 좋을것같다. 그리 해라
	-작업위치: concert_reserve.jsp

######################################################################################################

​

​

​

답:

​




​
//concert_auth.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@ page import = "java.util.*" %>    
    
    
<%
	
	UUID uuid = UUID.randomUUID();
	System.out.println(uuid);
	
	String[] uuids = uuid.toString().split("-");
	
	System.out.println(Arrays.toString(uuids));
	System.out.println(uuids[1]);
	
	session.setAttribute("auth_code", uuids[1]);
	//session.setMaxInactiveInterval(60); 1분지나면 유효시간지나서 만료됨
%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

 
	<h2>회원 인증페이지</h2>
	<h1>인증문자: <del><%= uuids[1] %></del></h1>
	<form action="concert_auth_check.jsp" method = "post">
		<small>위의 인증문자를 입력해주세요! 1분이 지나면 의미없습니다.</small>
		<input type="text" name="code" size="5">
		<input type="submit" value="확인">
	</form>


</body>
</html>
 




 

//concert_auth_check.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<% 
	String code = request.getParameter("code");

	

	if(code.equals(session.getAttribute("auth_code"))){
		session.setAttribute("auth_pass", true);	
		response.sendRedirect("concert_reserve.jsp");
	} else{
%>

<script type = "text/javascript">
	alert("인증코드가 일치하지 않습니다. 다시 인증해 주세요.");
	history.back();
</script>

<%		
	}
%>   













//concert_reserve.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ page import = "java.util.*" %>    
<%
	if(session.getAttribute("auth_pass")==null){
		response.sendRedirect("concert_auth.jsp");
				//history.back()쓰면안되나?
	}

	List<String> list = new ArrayList<>();
	if(application.getAttribute("complete_list")!=null){
		list = (List<String>)application.getAttribute("complete_list");
	}
%>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<div align = "center">
		<h2>콘서트 좌석예매</h2>
		<h4>예매할 좌석을 체크한 후 예약 버튼을 눌러주세요.</h4>
	</div>
	
	<hr/>
	
	<form action = "concert_reserve_check.jsp">
	<p align="center">
		<strong>좌석 배치도</strong>
		<br/>&nbsp;&nbsp;&nbsp;&nbsp;
		<% for(char c = 'A'; c<='Z';c++) { %>
			<small><%= c %></small>&nbsp;&nbsp;
		<%} %> <br />
		
		<%for (int r=1;r<=3;r++) {%>
			<%= r %>	
			<%for(char c = 'A'; c<='Z';c++) {%>
				<% if(list.contains(c+"-"+r)){ %>
					<input type = "checkbox" name = "seat" value = "<%=c%>-<%=r%>" disabled/>
				<%} else{%>
					<input type = "checkbox" name = "seat" value = "<%=c%>-<%=r%>" />
				<%} %>
			<%} %>
			<br/>	
		<%} %><br/>	
		
		
		<%for (int r=4;r<=6;r++) {%>
			<%= r %>
			<%for(char c = 'A'; c<='Z';c++) {%>
				<% if(list.contains(c+"-"+r)){ %>
					<input type = "checkbox" name = "seat" value = "<%=c%>-<%=r%>" disabled/>
				<%} else{%>
					<input type = "checkbox" name = "seat" value = "<%=c%>-<%=r%>" />
				<%} %>
			<%} %>
			<br/>
		<%} %> <br /><br />
		
		<input type = "submit" value = "예약">&nbsp;
		<input type = "reset" value = "재설정">
	</p>
	</form>

</body>
</html>

















//concert_reserve_check.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@ page import = "java.util.*"%>
    
<%
	//1.예매가 확정된 좌석정보를 저장할 리스트
	List<String> list = new ArrayList<>();
	
	//6.list가 생성되고 내부의 선점된 좌석들을 넣어줘야하니까 선점된(완료된) 좌석데이터의 값이
	//있다면 list에 그 값들을 넣어주고 없으면 그냥 아무것도안하고 빈 list를 내려보내면 된다.
	if(application.getAttribute("complete_list") != null){
		list = (List<String>)application.getAttribute("complete_list");
	}
	
	//2.사용자가 예매를 희망하는 좌석정보가 들어있는 배열
	String[] seat = request.getParameterValues("seat");
	
	
	//3.예약 선점여부를 확인할 로직
	List<String> temp = new ArrayList<>();//예약확정 전에 임시로 좌석정보를 저장할 리스트
	
	int count =0; //몇자리를 예약할수 있는지의 여부를 체크할 변수
	for(String s : seat){
		if(list.contains(s)){ //보통 예약할때 3자리 예약하면 3명지인앉으려하는데
					//도중에 한자리가 선점되어있으면 그자리빼고 2자리만해주나? 아니잖아
					//3명 같이앉아야하니까 1자리라도 선점되면 싹다 예약취소시켜버리잖아
					//그래서 이거도 하나라도 발견되면 브레이크하는거!
			break;
		} else{
			temp.add(s);
			count++;
		}
	}
	
	
	//4.예약선점여부 결과 선점한 좌석이 없을시 모든 임시리스트 내부객체의 주소들을 확정리스트에 추가하기 	
	if(count == seat.length){
		//addAll()메서드는 리스트내부에 리스트객체들을 전부 추가하는 메서드임
		list.addAll(temp);
	}
	
	
	//5.브라우저가 종료되도 리스트가 유지되어야한다. 그래야 다른 브라우저가 와도 어디어디예약이
	//남는지 아니까 그래서 application에 저장한다. 세션데이터의 이름은 complete_list
	application.setAttribute("complete_list", list);
%>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<div align="center">
		<h2>콘서트 예매 처리 결과</h2>
		<p>
			선택한 좌석<br>
			<%
				for(String s : seat) {
					out.println("<b>[" + s + "]</b>");
				}
			%>
			<br>가 예매 신청되었습니다.
		</p>
		<p>
			예매 신청 결과: <%= (count == seat.length) ? "성공" : "실패" %>
			<br>
			<% if(count != seat.length) { %>
				예매하고자 하는 좌석이 이미 선점되었습니다.
			<% } %>
			<br>
			<a href="concert_reserve.jsp">추가 예매하기</a>
		</p>
		
	</div>
</body>
</html>














































































































21.09.29_9회차(8강)
=======================================================================================================
*예외처리, jsp action tag(forward, include), request 동작방식(sendR,forW)
=======================================================================================================


































































































######################################################################################################
개념정리_예외페이지 개념 및 처리방법

* 예외 페이지
- 예외 상황이 발생했을 경우 웹 컨테이너(톰캣)에서 제공되는 기본적인 예외페이지가 보여집니다.
- 개발 과정에서는 이러한 예외 페이지를 보고 어떤 에러가 발생했는지 알 수 있기 때문에 오류를 수정하는 데 도움이 됩니다.
- 그러나 사용자에게 상용 서비스를 제공하고 있는데 이러한 딱딱한 페이지가 보여진다면 사용자로 하여금 불쾌감을 일으키고, 
	해당 사이트에 대한 신뢰도가 하락하게 됩니다.
- 또한 코드의 일부가 노출되어 보안 측면에도 좋지 않습니다.
- 그래서 개발자가 따로 만들어 둔 에러 페이지로 유도하여 사용자에게 친숙한 페이지를 보여줍니다.


* HTTP 주요 응답 상태 코드
1. 404: 요청한 URL을 찾을 수 없는 경우.
1. 500: 서버측 내부 오류로 인해 페이지가 나타나지 않는 경우(java, JSP 페이지 내의 코드오류)
1. 200: 요청을 성공적으로 처리함.
1. 307: 임시로 페이지를 리다이렉트함.
1. 400: 클라이언트의 요청이 잘못된 구문으로 작성됨.
1. 405: 요청 방식을 허용하지 않음(GET, POST 등)
1. 503: 서버가 일시적으로 서비스를 제공할 수 없음(일시적 서버과부하, 서버 임시 보수 등)


* JSP에서 에러를 처리하는 방법
1. 직접 예외를 처리하기
- 자바의 키워드인 try ~ catch를 사용하여 직접 개발자가 예외를 처리합니다.

2. 에러를 처리할 페이지를 따로 지정하기
- JSP는 실행 도중 예외가 발생할 때 톰캣 기본 에러화면 대신 개발자가 지정한 JSP페이지를 보여줄 수 있는 기능을 제공하고 있습니다.
- 에러가 발생하면 보여줄 JSP페이지는 페이지 지시자(directive)의 errorPage 속성을 사용하여 지정합니다.
- 예외가 발생할 것으로 예상되는 페이지에 예외가 발생했을 때 보여줄 페이지를 지정합니다.   ex) <%@ page errorPage="
	예외가 발생했을 시 보여줄 페이지" %>

- 에러 발생시 유도된 페이지에는 페이지  지시자태그로  isErrorPage  속성을  사용하여  true로  값을  설정합니다.  ex) <%@ page isErrorPage="true" %>
		<%@ page isErrorPage="true" %>   : 해당페이지가 에러페이지가 맞는거냐고 물어보는 속성이고 "true"를 넣으면
				해당페이지에서 에러발생시에 작동할 내장객체 exception을 사용할수있게된다.


- 에러 페이지로 지정된 JSP파일 내에서는 예외를 처리해주는 exception 내장객체를 사용할 수 있습니다.

- 인터넷 익스플로러 브라우저의 경우 전체 응답 결과의 데이터가 512바이트보다 작을 경우 마이크로소프트에서 자체 제공하는 에러페이지를 출력합니다.
######################################################################################################














######################################################################################################
예제32) 예외페이지 처리하기 1

​Exception 폴더
error_trycatch.jsp
error_page01.jsp
error_page02.jsp


* HTTP 주요 응답 상태 코드
1. : 요청한 URL을 찾을 수 없는 경우.
1. : 서버측 내부 오류로 인해 페이지가 나타나지 않는 경우(java, JSP 페이지 내의 코드오류) / 자바문법에러
1. 200: 요청을 성공적으로 처리함.
1. 307: 임시로 페이지를 리다이렉트함.
1. 400: 클라이언트의 요청이 잘못된 구문으로 작성됨.
1. 405: 요청 방식을 허용하지 않음(GET, POST 등)
1. 503: 서버가 일시적으로 서비스를 제공할 수 없음(일시적 서버과부하, 서버 임시 보수 등)




<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	String id = request.getParameter("id");
%>    


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h4><%= id.toLowerCase() %></h4>
</body>
</html>



1)원초적인 예외처리 : error_trycathch.jsp

2)에러를 처리할 페이지를 따로 지정하기 : error_page01.jsp(에러가 발생하는 페이지), perror_page02.jsp(에러시 보여줄 페이지ui)
	에러소스 : <%= request.getParameter("id").toLowerCase() %>
	-예외클래스명: 
	 예외클래스의가 가진 에러원인 메세지: 

3)인터넷익스플로어 특성: 매우 작은 kb의 에러페이지는 저것도 에러페이지라고 ㅋ 하고 자기들이 만들걸보여줌;; 그래서 반드시
	512kb를 채워야한다. 
	-error_page02.jsp의 예외클래스명 또는 에러원인 메세지를 잠시지우고 웹브라우저를 internet exploer로 변경후 테스트해바라
		문자열 추가하면 또 우리꺼보인다.

######################################################################################################

​

답:

​


* HTTP 주요 응답 상태 코드
1. 404: 요청한 URL을 찾을 수 없는 경우.
1. 500: 서버측 내부 오류로 인해 페이지가 나타나지 않는 경우(java, JSP 페이지 내의 코드오류) / 자바문법에러
1. 200: 요청을 성공적으로 처리함.
1. 307: 임시로 페이지를 리다이렉트함.
1. 400: 클라이언트의 요청이 잘못된 구문으로 작성됨.
1. 405: 요청 방식을 허용하지 않음(GET, POST 등)
1. 503: 서버가 일시적으로 서비스를 제공할 수 없음(일시적 서버과부하, 서버 임시 보수 등)





1)원초적인 예외처리


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	String id = request.getParameter("id");
%>    


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>


	<%try{%>
		<h4><%= id.toLowerCase() %></h4>
	<% } catch(Exception e){%>
		<h4>죄송합니다. 서버측에 오류가 발생했습니다.</h4>
		<p><strong>잠시만 기다리시면 빠른시간 내에 해결하겠습니다.</strong></p>
	<%} %>

</body>
</html>





2)에러를 처리할 페이지를 따로 지정하기 : error_page01.jsp(에러가 발생하는 페이지), perror_page02.jsp(에러시 보여줄 페이지ui)
	에러소스 : <%= request.getParameter("id").toLowerCase() %>


//error_page01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ page errorPage = "error_page02.jsp" %>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%= request.getParameter("id").toLowerCase() %>

</body>
</html>



//error_page02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page isErrorPage="true" %>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<p>
	요청처리과정에서 문제가 발생했습니다. <br/> 
	빠른시간내에 문제를 해결하겠습니다.
</p>

<p>
	<strong>잠시만</strong> 기다려주세오 ㅠㅠㅠㅠ<br/>
	진짜진짜 빨리 처리할게요 ㅠㅠㅠ<br/>
</p>

<p>
	예외클래스명: <em><%= exception %></em> <br/>
	예외클래스의가 가진 에러원인 메세지: <em><%= exception.getMessage() %></em>
</p>

</body>
</html>
















######################################################################################################
개념정리_예외페이지 처리방법2

* JSP에서 에러를 처리하는 방법
1. 직접 예외를 처리하기
- 자바의 키워드인 try ~ catch를 사용하여 직접 개발자가 예외를 처리합니다.

2. 에러를 처리할 페이지를 따로 지정하기(실행할 페이지에서 에러발생시 특정 에러페이지 지정)

3. 응답 상태 코드별로 에러 페이지 지정하기(web.xml에서 에러발생시 코드에 따라 에러페이지 명시)
- JSP는 에러 코드별로 사용할 에러 페이지를 web.xml파일 수정을 통해 지정할 수 있습니다.
- 이렇게 지정한 에러페이지는 일반 JSP파일과 동일하게 작성하면 됩니다.

4. 예외 타입별로 에러 페이지 지정하기
- 발생하는 예외의 종류별로도 에러 페이지를 지정할 수 있습니다. web.xml파일을 수정합니다.


* 에러 페이지의 우선순위
- 에러 페이지를 여러 방법으로 지정한 경우 다음의 우선순위에 따라 사용할 에러 페이지를 선택합니다.
1. 페이지 지시자 태그의 errorPage속성에 지정한 페이지.
2. web.xml에 지정한 에러 타입에 따른 페이지.
3. web.xml에 지정한 응답 상태 코드에 따른 페이지.
4. 위 3항목에 해당하지 않을 경우 톰캣이 제공하는 에러 페이지.

######################################################################################################














######################################################################################################
예제33) 예외페이지 처리하기 2


​Exception 폴더
error_get404.jsp
error_404.jsp
error_get500.jsp 
error_500.jsp

1)응답 상태 코드별로 에러페이지를 지정하라
 -404, 500

error_get404.jsp : jsp링크 에러발생
	-발생코드: 대충 못찾는 파일링크 갖다넣어라
error_404.jsp : 에러발생시 보여줄 페이지

error_get500.jsp : 자바문법 에러발생 
	-발생코드 : 10을 0으로 나눠서 arithmeticException 발생
error_500.jsp : 에러발생시 보여줄 페이지

######################################################################################################

​

답:

​//error_get404.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<a href = "hello.jsp">404에러페이지유발이리로 가는링크가 없는파일이라서남</a> 

</body>
</html>


​//error_404.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<h4>페이지를 찾을수 없는 404에러입니다.</h4>
	<p>
		요청한 페이지는 존재하지 않습니다.
	</p>

</body>
</html>


<a href = "hello.jsp">404에러페이지유발이리로 가는링크가 없는파일이라서남</a> 

</body>
</html>





​//error_get500.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%
	int a = 10 /0;
%>

</body>
</html>








​//error_500.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h4>서버측 코드 오류로인한500번 에러입니다.</h4>
<p>
	개발자 노네 ㅋ 개발자야 빨리 처리해라~
</p>
</body>
</html>






//web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">
  <display-name>JSPBasic</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <error-page>
  	<error-code>404</error-code>
  	<location>/Exception/error_404.jsp</location>
  </error-page>
   
  <error-page>
  	<error-code>500</error-code>
  	<location>/Exception/error_500.jsp</location>
  </error-page>
  
</web-app>
















######################################################################################################
예제34) 예외페이지 처리하기 3 및 예외페이지 처리 우선순위


​Exception 폴더
error_getNull.jsp
error_null.jsp

1)예외 타입별로 에러페이지지정(위에는 코드번호별로였고 이번에는 이름임) 
error_getNull.jsp : 에러발생
	-발생코드: String name = "null"하고 name을 이용해라. name.indexOf("프") 등
error_null.jsp : 에러발생시 처리할 페이지


2)위에꺼 지정하면 에러시 처리할 페이지가 겹친다.  NullPointerException는 500번에 포함되니까.
	이경우 뭐가 우선되는지 확인하라
		-nullpointer임

3)이렇게되면 error_page01.jsp는 에러 처리페이지의 경우의수가 3개다 ㅋ 어디로갈지 확인해보라
	-결과: directive가 1순위다.
		-directive 주석처리하고 다시해봐라
			-에러타입별 페이지지정한게 2순위다.
			-꼴지가 에러 코드별 지정이다.


######################################################################################################

​

답:



<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">
  <display-name>JSPBasic</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <error-page>
  	<error-code>404</error-code>
  	<location>/Exception/error_404.jsp</location>
  </error-page>
   
  <error-page>
  	<error-code>500</error-code>
  	<location>/Exception/error_500.jsp</location>
  </error-page>
  
  <error-page>
  	<exception-type>java.lang.NullPointerException</exception-type>
  	<location>/Exception/error_null.jsp</location>
  </error-page>
  
</web-app>












######################################################################################################
개념정리_jsp action tag



* JSP Action Tag
- JSP 페이지 내에서 어떤 동작을 하도록 지시하는 태그입니다.
- 종류에는 페이지 이동을 강제하는 forward, 페이지를 삽입하는
  include, forward나 include를 할 때 값을 지정하는 param, 자바의 클래스와 연동하는 useBean 등이 있습니다.
1. forward: 현재의 페이지에서 다른 특정 페이지로 전환할 때 사용합니다.
1. include: 현재 페이지에 다른 페이지를 삽입할 때 사용합니다.
1. param: forward 및 include 태그에 데이터를 전달할 목적으로 사용되는 태그입니다. name과 value 속성으로 이루어져 있습니다.


* forward vs sendRedirect
1. forward(sendRe와 다르게 주소가 안바뀐다.)
- 요청 받은 요청객체(request)를 위임하는 컴포넌트에 요청 객체값을 동일하게 전달할 수 있습니다.
- 요청을 처리함과 동시에 해당 결과를 바로 보여줘야 하는 경우
ex) 게시판 목록에서 글 제목을 클릭했을 때 바로 내용을 보여줘야 하는 경우.

2. sendRedirect
- 요청 받은 요청객체를(request) 위임하는 컴포넌트에 전달하는 것이 아닌, 새로운 요청객체를 생성합니다.
- 요청을 처리한 다음 새로운 요청으로 작업을 해야할 경우에 사용합니다. ex) 회원가입 요청 처리 후 단순히 메인페이지로 안내해야 할 경우.

######################################################################################################















######################################################################################################
예제35) jsp action tag_forward, include 

JspActionTag 폴더
forward_ex01.jsp
forward_ex02.jsp
include_ex01.jsp
include_ex02.jsp

1)forward 태그를 사용하여 자동페이지 이동을 해보고 sendRedirect와 다르게 주소가 최종 이동한 페이지로 바뀌지 않는다는 것을 확인하라

​forward_ex01.jsp : 02.jsp를 본인 페이지 내부에서 실행할 파일
forward_ex02.jsp : 01.jsp의 forward에 의해서 01 내부에서 실행될 파일

2)jsp태그 중 지시자태그종류의 include태그인지 action tag종류의 include 태그인지차이에 따른 include 사용법
	-지시자 태그종류
		-page 태그
		-include 태그
	-jsp action tag 종류 
		-forward 태그
		-include 태그
		-param 태그

include_ex01.jsp : body에 텍스트 2개 1번페이지임, 그리고 좀 아래에 다시 1번페이지임
include_ex02.jsp : 여기는 2번페이지임
	-위처럼 두개 페이지 만든뒤 1번 페이지의 두 텍스트 사이에 2번페이지를 불러온다.
		-이때방법은 jsp태그중 지시자(directive)를 이용한 방법과 action tag를 이용한 방법이 있는데 두가지방법으로 
			두번 불러라

<%--jsp 태그 중 디렉티브 태그의 include와 액션태그의 include 의 차이점
	# 디렉티브 태그의 include:
		ex) <%@ include file = "삽입할 페이지" %>
		-페이지 내부에서 공유하면서 써야할 변수나 메서드를 다른 파일에 선언해두고 삽입하여 사용
			-자바코드 응용 필요할때
			
	# 액션태그의 include:
		ex) <jsp:include page = "삽일할 페이지" %>
		-단순히 UI를 복사하고 싶을때 주로 사용
				-광고 등 그냥 갖다 넣기만 하면될때
 --%>
######################################################################################################

​

답:



1)forward 태그를 사용하여 자동페이지 이동을 해보고 sendRedirect와 다르게 주소가 최종 이동한 페이지로 바뀌지 않는다는 것을 확인하라


//forward_ex01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%--
	*jsp action tag 사용법
		-<jsp:forward 속성=값, ....> </jsp:forward>
		-e닫는 태그는 태그 내부에 추가적으로 종속된 태그가 없다면 닫는 태그를 생략하고
		열린 태그 끝부분은 />로 마감할수 있음
		ex)<jsp:forward 속성=값,... />
 --%>    
    
<jsp:forward page = "forward_ex02.jsp"></jsp:forward>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h3>forward_ex01페이지입니다.</h3>
	<p>포워드 기능에 의해 이 메시지를 보실수 없습니다.</p>

</body>
</html>





//forward_ex02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<h3>forward_ex01페이지에 의해 강제 이동된 페이지입니다.</h3>
</body>
</html>


		
2)jsp태그 중 지시자태그종류의 include태그인지 action tag종류의 include 태그인지차이에 따른 include 사용법


//include_ex01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%--
	# 디렉티브 태그의 include:
		ex) <%@ include file = "삽입할 페이지" %>
		-페이지 내부에서 공유하면서 써야할 변수나 메서드를 다른 파일에 선언해두고 삽입하여 사용
			-자바코드 응용 필요할때
			
	# 액션태그의 include:
		ex) <jsp:include page = "삽일할 페이지" %>
		-단순히 UI를 복사하고 싶을때 주로 사용
				-광고 등 그냥 갖다 넣기만 하면될때
 --%>

	<h3>안녕하세요. 여기는 1번 페이지입니다.</h3>
	
	<%@ include file = "include_ex02.jsp" %>
	
	<jsp:include page="include_ex02.jsp" />
	
	<h4>다시 여기는 1번 페이지 입니다.</h4>

</body>
</html>


//include_ex02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<h3>여기는 2번페이지입니다1!!</h3>












######################################################################################################
개념정리_sendRedirect위임과 forward위임에서 동작방식의 차이로 인한 request의 차이 


#sendRedirect: 
	클라1 --- request1 --> 서버(요청페이지)   
	클라1 <-- response1 -- 서버(요청페이지)	
	클라1 --- request2 --> 서버(위임페이지)
	클라1 <-- response2 -- 서버(위임페이지)

-http통신은 request와 response가 끝나면 통신을 종료하기때문에 내부 데이터도 소실된다. 즉 클라1에서 로그인을 했다면
  해당 정보는 서버의 요청페이지로 가서 일치하는지 체크한 후 일치한다면 일단 다시 클라1로 보내서 로그인당시 정보를 모두 털고
	클라1이 자동으로 서버의 위임페이지로 가도록 안내한다.
	그럼 서버의 위임페이지에는 로그인 정보는 남지않고 다른 일을 하면 된다. 웰컴창이라던지.
		굳이 로그인 정보를 아이디와 비번을 가지고 웰컴에 있을필요가 없으니까 한번만 쓰면 되는 데이터다
	 		
#forward:
	클라1 --- request1 --> 서버(요청페이지)   
	서버(요청페이지) --- request1 --> 서버(위임페이지)
	클라1 <-- response -- 서버(위임페이지)

-회원정보 수정시 데이타베이스에서 가져온뒤 수정한걸 데이타베이스로 보내고 그 정보를 출력하는 기능 페이지를 따로 구현할때
	해당페이지에서 다시 디비에게 받아올 필요없이 바로 req로 보내주어 위임하면 디비의 중복 데이터사용을 막을수 있다.


######################################################################################################

















######################################################################################################
예제36) sendRedirect의 위임과 forward의 위임의 차이

send_vs_forward 폴더 생성
forward_ex01.jsp 생성
forward_ex02.jsp 생성
forward_ex03.jsp 생성
send_ex01.jsp 생성
send_ex02.jsp 생성
send_ex03.jsp 생성


forward_ex01.jsp : 아이디 비번 입력페이지(클라이언트에게 처음 노출되어 서버에게 request 하는 클라이언트 페이지)
			-요청파라메터 전송은 post 방식으로 하라
forward_ex02.jsp : ex03으로 forward로 위임하는 페이지
forward_ex03.jsp : 아이디와 비번 출력하는 페이지

send_ex01.jsp : 위와동일
send_ex02.jsp : ex03으로 sendRedirect로 위임하는 페이지
send_ex03.jsp  : 위와동일


######################################################################################################

​

답:





//forward_ex01.jsp 생성

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action = "forward_ex02.jsp" method = "post">
	<input type = "text" name = "id" placeholder = "ID" /> <br />
	<input type = "password" name = "pw" placeholder = "PW" /> <br />
	<input type = "submit" value = "로그인" />
</form>

</body>
</html>






//forward_ex02.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
	request.setCharacterEncoding("utf-8");
%>    
<jsp:forward page = "forward_ex03.jsp" />    
    






//forward_ex03.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	

	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
%>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	# 아이디 : <%= id %> <br />
	# 비밀번호 : <%= pw %> <br />

</body>
</html>








//send_ex01.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action = "send_ex02.jsp" method = "post">
	<input type = "text" name = "id" placeholder = "ID" /> <br />
	<input type = "password" name = "pw" placeholder = "PW" /> <br />
	<input type = "submit" value = "로그인" />
</form>

</body>
</html>







//send_ex02.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	request.setCharacterEncoding("utf-8");
	response.sendRedirect("send_ex03.jsp");
%>    







//send_ex03.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

    
<%
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
%>        
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	# 아이디 : <%= id %> <br />
	# 비밀번호 : <%= pw %> <br />
	
</body>
</html>





























































21.09.30_10회차(9강) 
=======================================================================================================
*JavaBean, JspActionTag(useBean,getProperty,setProperty)
=======================================================================================================
































































######################################################################################################
개념정리_자바빈 기본개념

 자바빈 (JAVA Bean)
- 자바빈이란 JAVA언어의 데이터(변수)와 기능(메서드)으로 이루어진 클래스입니다.
- 자바빈은 데이터를 저장하는 변수, 데이터를 읽어오는 메서드(getter), 데이터를 저장할 때 사용되는 메서드(setter)로 이루어져 있습    니다.
- 자바빈은 데이터베이스와의 반복적인 작업을 효율적으로 처리하기 위해 사용합니다.

/*
 * 자바빈
 * 자바빈은 데이터베이스와의 반복 데이터 작업을 쉽게 처리하기 위한 클래스
 * 일반적으로 데이터베이스의 컬럼과 1:1로 매칭되는 멤버변수(필드)를 선언
 */

	/*
	 * 자바빈 클래스는 일반적으로 기본생성자(필수) 1개
	 * 와 모든 멤버변수를 초기화하는 생성자(선택)를 1개 선언합니다.
	 */
	


######################################################################################################


























######################################################################################################
예제37) java bean 클래스 만들기

kr.co.jspbasic.user 패키지이름
UserBean	클래스

1)기본적인 java bean 형태로 UserBean 클래스를 만들어라(기능은 게터세터만 있으면되고 멤버변수는 id, pw, name, email로 하라_은닉성보장)



######################################################################################################

​

답:

package kr.co.jspbasic.user;

/*
 * 자바빈
 * 1.자바빈은 데이터베이스와의 반복 데이터 작업을 쉽게 처리하기 위한 클래스
 * 2.일반적으로 데이터베이스의 컬럼과 1:1로 매칭되는 멤버변수(필드)를 선언
 * 3.자바빈 클래스는 은닉(캡슐화)를 사용하여 데이터를 보호합니다.
 */

public class UserBean {
	private String id;
	private String pw;
	private String name;
	private String email;
	
	/*
	 * 자바빈 클래스는 일반적으로 기본생성자(필수) 1개
	 * 와 모든 멤버변수를 초기화하는 생성자(선택)를 1개 선언합니다.
	 */
	
	public UserBean() {}
	public UserBean(String id, String pw, String name, String email) {
		super();
		this.id = id;
		this.pw = pw;
		this.name = name;
		this.email = email;
	}
	
	
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getPw() {
		return pw;
	}
	public void setPw(String pw) {
		this.pw = pw;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	
	
}























######################################################################################################
예제38) JavaBean 객체 만들어 사용하기

JavaBean 폴더 생성
bean_make.jsp 파일생성
bean_use.jsp 파일생성 : 원래 make에서 받아서 db에게 보내는거인데 아직 db를 안배웠으니 bean_use.jsp를 디비라생각하고 보낸다.

1)아래의 코드는 javabean 클래스를 사용하지않아서 매우 귀찮고 불편하다. javabean으로 바꿔라 
	-bean_use에서 request는 주석처리하고진행
	-parameter는 인풋태그 쓰지말고 그냥 웹브라우저의 url에서 입력하게하라
	-객체를 만들어서 사용하라(액션태그사용x)
	
//bean_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	String name = request.getParameter("name");
	String email = request.getParameter("email");
	
	
	
	request.setAttribute("user_id", id);
	request.setAttribute("user_pw", pw);
	request.setAttribute("user_name", name);
	request.setAttribute("user_email", email);
	
%>

<jsp:forward page = "bean_use.jsp" />







//bean_use.jsp
<%@page import="kr.co.jspbasic.user.UserBean"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
 

# 아이디: <%= request.getAttribute("user_id") %> <br/>
# 비밀번호: <%= request.getAttribute("user_pw") %> <br/>
# 이름: <%= request.getAttribute("user_name") %> <br/>
# 이메일: <%= request.getAttribute("user_email") %> <br/>




######################################################################################################

​

답:



//bean_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@
	page import = "kr.co.jspbasic.user.UserBean"  
%>
    
<%
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	String name = request.getParameter("name");
	String email = request.getParameter("email");
	
	
	UserBean user = new UserBean(id, pw, name, email);
	request.setAttribute("user", user);
	/*
	request.setAttribute("user_id", id);
	request.setAttribute("user_pw", pw);
	request.setAttribute("user_name", name);
	request.setAttribute("user_email", email);
	*/
	
%>

<jsp:forward page = "bean_use.jsp" />




//bean_use.jsp
<%@page import="kr.co.jspbasic.user.UserBean"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	UserBean user = (UserBean)request.getAttribute("user");
%>    
    


# 아이디: <%= user.getId() %> <br/>
# 비밀번호: <%= user.getPw() %> <br/>
# 이름: <%= user.getName() %> <br/>
# 이메일: <%= user.getEmail() %> <br/>

<%-- 
# 아이디: <%= request.getAttribute("user_id") %> <br/>
# 비밀번호: <%= request.getAttribute("user_pw") %> <br/>
# 이름: <%= request.getAttribute("user_name") %> <br/>
# 이메일: <%= request.getAttribute("user_email") %> <br/>
--%>
























######################################################################################################
개념정리_액션태그를 사용하여 자바빈 사용하기

 자바빈 (JAVA Bean)
- 자바빈이란 JAVA언어의 데이터(변수)와 기능(메서드)으로 이루어진 클래스입니다.
- 자바빈은 데이터를 저장하는 변수, 데이터를 읽어오는 메서드(getter), 데이터를 저장할 때 사용되는 메서드(setter)로 이루어져 있습    니다.
- 자바빈은 데이터베이스와의 반복적인 작업을 효율적으로 처리하기 위해 사용합니다.

- JSP에서는 액션태그를 사용하여 자바빈을 사용할 수 있는 방법이 있습니다.
- JSP 액션태그로 자바빈 사용하는 방법
ex) <jsp:useBean id="자바빈 객체 이름" class="자바빈이 위치한 실제 경로" scope="객체를 사용할 범위" />



1. id - JSP 페이지에서 자바빈 객체에 접근할 때 사용할 이름을 지정함.
2. class - 패키지 이름을 포함한 자바빈 클래스의 완전한 경로를 입력함.
3. scope - 자바빈 객체를 저장할 영역을 지정함.

--a. page: 하나의 JSP페이지를 처리할 때 사용되는 영역.
--b. request: 하나의 요청을 처리할 때 사용되는 영역.
--c. session: 하나의 웹 브라우저와 관련된 영역.
--d. application: 하나의 웹 어플리케이션과 관련된 영역.


- JSP 액션태그로 setter와 getter메서드를 사용할 수 있습니다.
1. setter 사용 방법
ex) <jsp:setProperty name="자바빈 id" property="자바빈 클래스의 변수명" value="할당할 값" />
--a. name: 값을 변경할 자바빈 객체의 이름을 지정합니다. useBean태그에서 id속성에 지정한 값을 그대로 사용합니다.
--b. property: 값을 지정할 프로퍼티의 이름을 지정합니다. 자바빈 클래스의 변수명을 적어줍니다.
--c. value: 프로퍼티의 값을 지정합니다. 표현식이나 EL도 사용할 수 있습니다.

2. getter 사용 방법
ex)  <jsp:getProperty  name="자바빈  id"  property="변수명" />
--a. name: useBean태그에서 id속성에 지정한 값을 사용합니다.
--b. property: 출력할 프로퍼티의 이름을 지정합니다. 자바빈 클래스의 변수명을 적습니다.


* Servlet 특징
1. 동적 웹어플리케이션 컴포넌트
2. .java 확장자
3. 클라이언트의 요청에 동적으로 작동하고, 응답은 html을 이용.
4. java thread를 이용하여 동작.
5. MVC패턴에서 Controller로 이용됨.

######################################################################################################


























######################################################################################################
예제39)

JavaBean 폴더 생성
bean_make.jsp 파일사용
bean_use.jsp 파일사용 

1)위 38번의 코드조차도 귀찮다!(위가 정석적인방법) 아래의 코드를 jsp의 액션태그를 통해서 java bean 클래스 객체를 만들어라
	-객체를 만들고 객체 값넣고 객체를 request에 저장하는게 귀찮다는 거다.
		-객체 만들고와 객체를 request에 저장하는 것을 한번에 하라.
			-make: 객체 만들고 객체 request 저장 한번에됨
			-use: 객체를 새로 만들필요없이 자동으로 주소가 참조하게됨 





2)스코프연습 : 지우고하면 페이지범위인데 리퀘스트에 값이 안들어가니 null 값이 bean_use의 user참조변수에 들어가고 그걸 참조해서 사용했으니
		NullPointerException이 일어난다. 그걸 두눈으로 확인하라(500번에러)
	-make에서 session이라해도되지만 그러면 use에서 받는것도 request가 아니라 session으로 받아야한다.
	-그런데 보통은 request 정도만 한다고 한다.

3)bean_use에서 받는것도 귀찮다! 받는것도 make에서 만든 액션태그를 복사만해서 만들어라
	-이렇게 use에서 복사한다고해서 새로운 user객체를 만드는게 아니라 make에서 만든 user객체를 동시에 사용하는것임을 인지

######################################################################################################

​

답:



//bean_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@
	page import = "kr.co.jspbasic.user.UserBean"  
%>
    
    
<jsp:useBean id = "user" class = "kr.co.jspbasic.user.UserBean" scope = "request" />
<!--  스코프를 생략하면 현재페이지에서만 쓰겠다는 소리임. 스코프는 request, session, application
다가능 -->


<%
	
	user.setId(request.getParameter("id"));
	user.setPw(request.getParameter("pw"));
	user.setName(request.getParameter("name"));
	user.setEmail(request.getParameter("email"));
	
	
	//UserBean user = new UserBean(id, pw, name, email);
		//request.setAttribute("user", user);
		
		
		
		/*
		request.setAttribute("user_id", id);
		request.setAttribute("user_pw", pw);
		request.setAttribute("user_name", name);
		request.setAttribute("user_email", email);
		*/
%>
     
<jsp:forward page = "bean_use.jsp" />








//bean_use.jsp
<%@page import="kr.co.jspbasic.user.UserBean"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<jsp:useBean id = "user" class = "kr.co.jspbasic.user.UserBean" scope = "request" />    <!--이게 3번답-->
<%

	//UserBean user = (UserBean)request.getAttribute("user"); //여기까지가 2번답
%>    
    


# 아이디: <%= user.getId() %> <br/>
# 비밀번호: <%= user.getPw() %> <br/>
# 이름: <%= user.getName() %> <br/>
# 이메일: <%= user.getEmail() %> <br/>

<%-- 
# 아이디: <%= request.getAttribute("user_id") %> <br/>
# 비밀번호: <%= request.getAttribute("user_pw") %> <br/>
# 이름: <%= request.getAttribute("user_name") %> <br/>
# 이메일: <%= request.getAttribute("user_email") %> <br/>
--%>



















######################################################################################################
개념정리_jsp 액션태그(setProperty, getProperty)


- JSP 액션태그로 setter와 getter메서드를 사용할 수 있습니다.
1. setter 사용 방법
ex) <jsp:setProperty name="자바빈 id" property="자바빈 클래스의 변수명" value="할당할 값" />
--a. name: 값을 변경할 자바빈 객체의 이름을 지정합니다. useBean태그에서 id속성에 지정한 값을 그대로 사용합니다.
--b. property(재산): 값을 지정할 프로퍼티의 이름을 지정합니다. 자바빈 클래스의 변수명을 적어줍니다.
	#빈에 있는 멤버변수를 filed라고 안부르고 property라고 부른다
--c. value: 프로퍼티의 값을 지정합니다. 표현식이나 EL도 사용할 수 있습니다.

2. getter 사용 방법
ex)  <jsp:getProperty  name="자바빈  id"  property="변수명" />
--a. name: useBean태그에서 id속성에 지정한 값을 사용합니다.
--b. property: 출력할 프로퍼티의 이름을 지정합니다. 자바빈 클래스의 변수명을 적습니다.


* Servlet 특징
1. 동적 웹어플리케이션 컴포넌트
2. .java 확장자
3. 클라이언트의 요청에 동적으로 작동하고, 응답은 html을 이용.
4. java thread를 이용하여 동작.
5. MVC패턴에서 Controller로 이용됨.

######################################################################################################

























######################################################################################################
예제40)  jsp action tag를 이용해서 요청파라미터에 대해 각각 setter, getter 적용하기1

JavaBean 폴더 생성
bean_make.jsp 파일사용
bean_use.jsp 파일사용 

0)위의 문제의 결과로 나온 파일 make에 String변수 id만 만들고 value를 클라이언트가 url에 넣은
	요청파라미터로 넣어주어라

1)jsp 액션태그를 이용하여 property중 id만 setter기능을 사용하라
	-값을넣는거니까 make파일만 수정하면됨


2)jsp 액션태그를 이용하여  property중 id만 getter 기능을 사용하라출력할때 getId()등으로 접근하지 말것
	-값을 받는거니까 use파일만 수정하면됨


######################################################################################################

​

답:

//bean_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@
	page import = "kr.co.jspbasic.user.UserBean"
%>
    
<%
	String id = request.getParameter("id");

%>    
    
<jsp:useBean id = "user" class = "kr.co.jspbasic.user.UserBean" scope = "request" />
<jsp:setProperty name = "user" property = "id" value = "<%= id %>" />

<%
	
	//user.setId(request.getParameter("id"));
	user.setPw(request.getParameter("pw"));
	user.setName(request.getParameter("name"));
	user.setEmail(request.getParameter("email"));
	
	
	//UserBean user = new UserBean(id, pw, name, email);
		//request.setAttribute("user", user);
		
		
		
		/*
		request.setAttribute("user_id", id);
		request.setAttribute("user_pw", pw);
		request.setAttribute("user_name", name);
		request.setAttribute("user_email", email);
		*/
%>
     
<jsp:forward page = "bean_use.jsp" />







//bean_use.jsp
<%@page import="kr.co.jspbasic.user.UserBean"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<jsp:useBean id = "user" class = "kr.co.jspbasic.user.UserBean" scope = "request" />    
<%

	//UserBean user = (UserBean)request.getAttribute("user");
%>    
    


# 아이디: <jsp:getProperty name = "user" property = "id" /> <br/>
# 비밀번호: <%= user.getPw() %> <br/>
# 이름: <%= user.getName() %> <br/>
# 이메일: <%= user.getEmail() %> <br/>

<%-- 
# 아이디: <%= request.getAttribute("user_id") %> <br/>
# 비밀번호: <%= request.getAttribute("user_pw") %> <br/>
# 이름: <%= request.getAttribute("user_name") %> <br/>
# 이메일: <%= request.getAttribute("user_email") %> <br/>
--%>






















######################################################################################################
예제41)  jsp action tag를 이용해서 요청파라미터에 대해 각각 setter, getter 적용하기2

JavaBean 폴더 
bean_form.jsp 파일생성
bean_make.jsp 파일사용
bean_use.jsp 파일사용

구동원리 : form -> make -> ues

1)위에서 제시한 구동원리 개념이 되도록 설계하라
	form의 ui부분만은 답을 보고 만들든지 복사하든지 해라 중요한게 아니다.
	-조건: make 및 use에서  모든 setter역할과 getter 역할은 java action tag로 수행하라.
	

######################################################################################################

​

답:



//bean_form.jsp 
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<form action="bean_make.jsp" method="post">
	<div align="center">
	<table border="1">
			<tr>
				<td>아이디</td>
				<td><input type="text" name="id" size="10"></td>
				<td>비밀번호</td>
				<td><input type="password" name="pw" size="10"></td>
			</tr>
			<tr>
				<td>이름</td>
				<td><input type="text" name="name" size="10"></td>
				<td>이메일</td>
				<td><input type="text" name="email" size="10"></td>
			</tr>
			<tr>
				<td colspan="4" align="center"><input type="submit" value="회원가입"></td>
			</tr>			
		</table>
		</div>
</form>
</body>
</html>



//bean_make.jsp 
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@ page import = "kr.co.jspbasic.user.UserBean"%>

<% 
	request.setCharacterEncoding("utf-8");
%>    
    
<%
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	String name = request.getParameter("name");
	String email = request.getParameter("email");
%>    
    
<jsp:useBean id = "user" class = "kr.co.jspbasic.user.UserBean" scope = "request" />
<jsp:setProperty name = "user" property = "id" value = "<%= id %>" />
<jsp:setProperty name = "user" property = "pw" value = "<%= pw %>" />
<jsp:setProperty name = "user" property = "name" value = "<%= name %>" />
<jsp:setProperty name = "user" property = "email" value = "<%= email %>" />
     
<jsp:forward page = "bean_use.jsp" />




//bean_use.jsp
<%@page import="kr.co.jspbasic.user.UserBean"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<jsp:useBean id = "user" class = "kr.co.jspbasic.user.UserBean" scope = "request" />    

# 아이디: <jsp:getProperty name = "user" property = "id" /> <br/>
# 비밀번호: <jsp:getProperty name = "user" property = "pw" /> <br/>
# 이름: <jsp:getProperty name = "user" property = "name" /> <br/>
# 이메일: <jsp:getProperty name = "user" property = "email" /> <br/>

 





















######################################################################################################
예제42)  jsp action tag 하나를 이용해서 모든 요청파라미터에 대해 setter적용하기

JavaBean 폴더 
bean_form.jsp 파일생성
bean_make.jsp 파일사용
bean_use.jsp 파일사용

구동원리 : form -> make -> ues

0)41번에서 푼 결과를보면 String참조변수로 id, pw, name, email을 만들고 value로 request.setParameter("id") 같은
	형식으로 값을 다 넣어준 뒤 setter기능을 jsp action tag로 넣었다.

1)이렇게 String참조변수를 만드는 행위와 request를 이용해 파라미터를 불러오는 행위, setProperty를 4번이나 하는 행위를 다없애고
	setProperty 한번만에 모든 과정을 통합하라
******bean_make.jsp만 수정하면됨

	-조건1) make의 id,pw,name,email 모두 주석처리 또는 삭제하라
	-조건2) make의 액션태그인 setProperty를 주석또는 삭제처리 후 문제를 풀어라
		-setProperty를 한번만 사용해라(setProperty에서는 value를 써야하지만 한번만사용하려면 안써야한다_물론전제조건을 잘지켜야함)
					-전제조건 이미 지켜져있긴 함
	<!-- 
	파라미터의 이름과 자바빈 클래스의 멤버변수명이 일치할경우 액션태그 setProperty의 속성인 
	property의 값을 *로 지정하면 자동으로 파라미터 값을 읽어서 자바빈 클래스 변수에 저장합니다.
 	-->

######################################################################################################

​



답:




<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%@ page import = "kr.co.jspbasic.user.UserBean"%>

<% 
	request.setCharacterEncoding("utf-8");
%>    
    
<%
	/*
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	String name = request.getParameter("name");
	String email = request.getParameter("email");
	*/
%>    
    
<jsp:useBean id = "user" class = "kr.co.jspbasic.user.UserBean" scope = "request" />

<!-- 
	파라미터의 이름과 자바빈 클래스의 멤버변수명이 일치할경우 액션태그 setProperty의 속성인 
	property의 값을 *로 지정하면 자동으로 파라미터 값을 읽어서 자바빈 클래스 변수에 저장합니다.
 -->
 
<jsp:setProperty name = "user" property = "*" />

<%--   
<jsp:setProperty name = "user" property = "id" value = "<%= id %>" />
<jsp:setProperty name = "user" property = "pw" value = "<%= pw %>" />
<jsp:setProperty name = "user" property = "name" value = "<%= name %>" />
<jsp:setProperty name = "user" property = "email" value = "<%= email %>" />
--%>

<jsp:forward page = "bean_use.jsp" />


























######################################################################################################
예제43) 점수관리 프로그램을 통한 javabean  실습

kr.co.jspbasic.scan 패키지 생성
ScoreBean.java 클래스 생성


JavaBean 폴더 
score_form.jsp 파일생성
score_bean_make.jsp 파일생성
score_bean_make.jsp 파일생성
score_bean_use.jsp 파일생성


ui나 코드실행시 입력 및 결과를 보려면 workspace의 JSPBasic/Webcontent/JavaBean/score_form.jsp 파일을 실행시킨후 푸시오

-ScoreBean의 setter 및 getter는 모두 자동으로 만들고 절대 수정하지마시오.
-ScoreBean 타입으로 객체를 만들경우 참조변수명은 score 또는 user로 하시오.


######################################################################################################

​



답:




//ScoreBean
package kr.co.jspbasic.user;

public class ScoreBean {
	/*
	 # 여기에는 국어점수(kor:int), 영어점수(eng:int),
	   수학점수(math:int), 총점(total:int), 평균(average:double)
	   총 5개의 데이터를 관리하는 자바빈 클래스를 구성하세요.
	 */
	
	int kor;
	int eng;
	int math;
	int tot;
	double avg;
	
	public ScoreBean() {}
	public ScoreBean(int kor, int eng, int math) {
		this.kor = kor;
		this.eng =  eng;
		this.math = math;
		this.tot = kor+eng+math;
		this.avg = tot / 3.0;
	}
	public int getKor() {
		return kor;
	}
	public void setKor(int kor) {
		this.kor = kor;
	}
	public int getEng() {
		return eng;
	}
	public void setEng(int eng) {
		this.eng = eng;
	}
	public int getMath() {
		return math;
	}
	public void setMath(int math) {
		this.math = math;
	}
	public int getTot() {
		return tot;
	}
	public void setTot(int total) {
		this.tot = total;
	}
	public double getAvg() {
		return avg;
	}
	public void setAvg(double avg) {
		this.avg = Math.round(avg*100) / 100.0;
	}
	
	
	
}


//score_form.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action="score_bean_make.jsp">
	<%--
		국어, 영어, 수학점수를 입력받아 전송하는
		폼을 작성하세요.
	 --%>
	# 국어: <input type="text" name="kor" size="5"/>&nbsp;
	# 영어: <input type="text" name="eng" size="5"/>&nbsp;
	# 수학: <input type="text" name="math" size="5"/>&nbsp;
	<input type="submit" value="확인"/>
</form>

</body>
</html>




//score_bean_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<jsp:useBean id = "user" class = "kr.co.jspbasic.user.ScoreBean" scope = "request" />
<jsp:setProperty name = "user" property = "*" />

<%
	int tot = user.getKor() + user.getEng() + user.getMath();
	double avg = tot / 3.0;
%>


<jsp:setProperty name = "user" property = "tot" value = "<%= tot %>" />
<jsp:setProperty name = "user" property = "avg" value = "<%= avg %>" />
 
 
<%--
	
	액션태그를 사용하여 ScoreBean의 객체를 request범위로 생성하시고
	setProperty를 사용하여 객체 내부 데이터에 파라미터데이터를 셋팅한 뒤
	파라미터데이터 3개와 총점, 평균을 구하여 5개를 모두 객체에 포장하여
	score_bean_use.jsp로 전송(포워딩)하세요.
--%>

<jsp:forward page = "score_bean_use.jsp" />

</body>
</html>










//score_bean_use.jsp
<%@page import="kr.co.jspbasic.user.UserBean"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<jsp:useBean id = "user" class = "kr.co.jspbasic.user.UserBean" scope = "request" />    

# 아이디: <jsp:getProperty name = "user" property = "id" /> <br/>
# 비밀번호: <jsp:getProperty name = "user" property = "pw" /> <br/>
# 이름: <jsp:getProperty name = "user" property = "name" /> <br/>
# 이메일: <jsp:getProperty name = "user" property = "email" /> <br/>






































































































21.10.01_11회차(10강) 
=======================================================================================================
*MYSQL 환경구축 및 기본개념실습
=======================================================================================================






























































































######################################################################################################
개념정리_환경구축

www.mysql.com
mysql community downloads (이게 무료판이다.)
mysql installer for windows
설치 준비한후 기존에있는건 다 삭제(서버, mysql로 시작하는모든거 제어판, programfile)
custom, next
edit -> other release -> filter -> server, workbench -> 8.0.16 장바구니에 넣기
그다음은 계속 넥스트 또는 excute
3306 포트번호 확인후 넥트스
*비번은 mysql로 설정

gui열어서 mysql 치면 됨
	-혹시나 서버에러나면
		mysql 8.0 command line client에 즉 tui 환경 창열어서 비번입력하면 켜짐 데몬활성화가 안되서 그렇나봄

######################################################################################################














######################################################################################################
개념정리_MYSQL 기본문법

* 데이터 베이스(DataBase)
- 수 많은 데이터들을 관리하기 위한 수단으로 데이터베이스가 사용됩니다.
- 데이터베이스는 데이터의 추가, 삭제, 검색, 수정, 이동 등의 기능이 있습니다.
- 그리고 이 데이터베이스를 관리하는 도구가 DBMS(DataBase Management System)입니다.
- DBMS는 SQL언어와 데이터베이스를 연결해주는 도구입니다.
- DBMS의 종류는 매우 다양하며 그 중 가장 많이 사용되는 DBMS는 RDBMS(관계형 데이터베이스: Relational DBMS)입니다.
- 우리가 흔히 사용하는 오라클, MySQL, MS SQL 등이 대표적인 관계형 데이터베이스입니다.



* MySQL 설치
- www.mysql.com
- 관리자 계정 비밀번호: mysql


* SQL이란?
- Structured Query Language의 약자로서 데이터베이스로부터 데이터를 조회하고 삭제하는 등의  작업을 수행할  때 사용하는 언어입 니다.


* 테이블과 레코드
- RDBMS에서 데이터를 저장하는 장소를 테이블이라고 합니다.
- 테이블은 데이터들을 저장하며 데이터들의 정보를 갖고 있습니다.
- 테이블의 구조와 관련된 정보를 테이블 스키마(Schema)라고 부릅니다.
- 테이블의 구조는 각각의 정보를 저장하는 컬럼(column)과 컬럼 타입 그리고 컬럼의 길이로 구성됩니다.
- 각 컬럼에 저장된 데이터 값을 레코드(record)라고 부릅니다.
- 레코드, 컬럼 그리고 테이블을 사용해서 데이터를 저장하고 조회하는 등의 작업을 수행하는 것을 데이터베이스 프로그래밍이라고 부    릅니다.

* SQL 문법
- SQL문의 특징은 대/소문자를 구분하지 않습니다.

# DDL(Data Definition Language)
- CREATE : 테이블이나 인덱스, 뷰등 데이터베이스 객체를 생성
- DROP : 생성된 데이터베이스 객체를 삭제
- ALTER : 이미 생성된 데이터베이스 객체를 수정
- TRANCATE : 테이블이나 클러스터의 데이터를 통째로 삭제

# DML(Data Manipulation Language)
- SELECT : 테이블이나 뷰에 있는 데이터 조회
- INSERT : 데이터를 신규로 생성
- UPDATE : 이미 생성된 데이터를 수정
- DELETE : 데이터를 삭제
- COMMIT : 트랜잭션 처리, 변경된 데이터를 최종 적용
- ROLLBACK : 트랜잭션 처리, 변경된 데이터를 적용하지 않고 이전으로 되돌림
# DCL(Data Control Language)
- GRANT : 사용자에게 특정 권한을 부여
- REVOKE : 사용자에게 부여된 권한을 회수





1. 데이터베이스 생성
- create database [db이름] default character set utf8;

2. 사용자 계정 생성과 권한 부여
- 관리자 계정의 이름은 'root'입니다.

a. 사용자 계정 생성
- create user '[계정명]' identified by '[암호]';

b. 권한 부여
- grant [권한 목록] on [데이터베이스이름].[대상] to '[계정]';

3. 테이블 생성 문법
3-1. create table [테이블 이름] (
[컬럼명1]  [컬럼데이터 타입(byte)],
[컬럼명2]  [컬럼데이터 타입(byte)],
....
);

3-2. 테이블 생성시 필요한 SQL 데이터 타입(프로그램 별 문법에 따른 타입정리)

A. MYSQL 문법
- 문자형 컬럼일 경우 CHAR, VARCHAR
- 정수형 컬럼일 경우 INT
- 날짜형 컬럼일 경우 DATETIME

A. ORACLE 문법
- 문자형 컬럼일 경우 VARCHAR2
- 정수형 컬럼일 경우 NUMBER
- 날짜형 컬럼일 경우 DATE
- 주요 키(primary key)

a. 테이블에 있는 레코드를 조회할 때 특정 값을 이용해서 조회한다면 좀 더 빠르게 레코드를 검색할 수 있습니다.

b. 주요 키로 지정된 컬럼은 하나의 테이블에 저장된 모든 레코드가 중복된 값 없이 모두 다른 값을 갖는 레코드를 말합니다.

c. 주로 회원 아이디나 게시판 글 번호 등이 주요 키로 지정됩니다.



1. DROP 문
- 테이블을 삭제할 수 있는 쿼리문입니다.
- drop table [테이블 이름];

2. commitINSERT 문
- insert문은 데이터를 저장하는 용도의 쿼리문입니다.
- insert into [테이블명] ([컬럼1], [컬럼2], ... ) values ([값1], [값2], ... );
- 테이블명 뒤에 컬럼명을 명시하지 않으면 전체 컬럼에 대해 값을 지정해야 합니다.

3. UPDATE 문
- update 쿼리는 데이터를 수정하는 용도입니다.
- update [테이블명] set [수정할 컬럼]=[수정할 값] where [조건];

4. DELETE 문
- delete 쿼리는 데이터를 삭제하는 용도입니다.
- delete from [테이블명] where [조건];

5. SELECT 문
- select 쿼리는 데이터베이스로부터 정보를 조회하는 문장입니다.
- select [컬럼1], [컬럼2], ... from [테이블명] where [조건];
- 모든 컬럼을 조회하고 싶으면 조회할 컬럼 이름에 * 를 써줍니다. ex) select * from member;
- where절로 조건을 지정할 때 like를 사용하면 특정 문장을 포함하고 있는지 확인할 수 있습니다. ex) select * from member where name like '홍%';
-> name 컬럼의 값이 '홍******'의 형태를 갖는지 확인

6. SELECT 문의 정렬
- 게시판이나 회원목록 등을 출력할 때 이름 순서나 아이디 오름차순 혹은 글 번호순으로 정렬하는 것이 일반적입니다.
- sql 쿼리문에서는 where 조건절 뒤에 order by절을 사용하여 데이터를 정렬합니다.
- 오름차순이면 asc, 내림차순이면 desc를 사용합니다.

7.commit 
- 서버에 입력한 쿼리문들의 상태지점을 저장하는 용도.
- commit과 rollback은 DML문에서만 작동합니다.

8. rollback
- commit된 위치를 기준으로 commit 이후에 작성 쿼리문을 commit한 시점으로 되돌리는 문장.


w3schools.com 에서 sql 공부해라





<그후 자동으로 commit 다시 저장해라 수업원할한 진행을 위해서>
********트랜젝션은 최종커밋지점으로 돌아가는것이다.
	-그런데 커밋은 오토커밋되어있는데 이러면 위험하다.
	-수동으로 바꾸는법 edit--preferences-sqleditor-sql execution
		-거기에 new connections ~ 새로운 연결할때마다 자동으로 커밋해주는 모드를 사용하겠느냐 있는데
			이걸 체크박스 풀면 수동으로 커밋가능

######################################################################################################


















######################################################################################################
예제44) MYSQL 기본 문법 실습


###참고: 
	-워크벤치에서 sql문 실행명령 : 컨트롤 + enter
	-관리자 계정명: root // 비밀번호: mysql

	********쿼리문을 작성하는 페이지에서 계속 디비이름을 적어줘야하는데 새로만든 디비객체를 디폴트화하면 그러지않아도된다
		-디폴트화: 해당객체 우클릭-set as default schema
			-기본DB로 만들기 성공

#워크벤치에서 sql문 실행명령 : 컨트롤 + enter
#관리자 계정명: root // 비밀번호: mysql


1)데이터베이스 객체생성명령	
	-데이터베이스 객체 이름: jsp_practice, 기본 문자 : 한국어 utf로 처리



2)DB사용자 계정생성_앞 jsp 아이디, 뒤 jsp 비번을 뜻함
		-아이디: jsp, 비번 : jsp


3)사용자에게 권한 부여_위에 만든 jsp 계정에게 모든권한 부여 


4)테이블 생성명령
	-id(20),pw(20),name(30),email(80)(모두 문자)
	-id는 중복금지, pw와 name을 입력안할시 table에 저장금지



5)테이블 전체 조회


6)데이터 저장 INSERT
	-id: abc123, pw:1234, name:홍길동 인 데이터를 저장후 테이블 전체 조회
	-그후 7개의 데이터 정도를 알아서 더미 만들어라 단 id의 마지막숫자는 서로 오름차순되도록 마지막숫자만 바꾸는 식으로해라
	-이름이 같은것도 만들어라



7)데이터 수정 UPDATE
	-2번데이터의 name의 벨류를 신사임당으로 바꾸고 email을 shin012@daum.net로 변경하라(id를 이용해서) 
	-3번데이터의 이름을 손흥민으로 변경하고 비밀번호를 7777로 하라 (id를 이용해서) 


****데이터 삭제 DELETE
	-4번째 데이터를 삭제하라(id를 이용해서)


8)데이터 조회 SELECT
	8-1)현재 만든 테이블 member에서 필드인 id속성을 가진 필드와 벨류들을 출력해라 
	8-2)member에서 name과 email 속성을 가진 컬럼을 모두 출력해라
	8-3-1)member table에서 email 속성을 가진 컬럼을 출력하라
	8-3-2)member table에서 email 속성을 가진 컬럼이면서 id가 abc123인놈을 출력하라(신사임당의 email만 보기)
	

9)ID가 bbb456인 회원의 비밀번호를 조회


10-1)이름이 이로 시작하는사람 조회

10-2)이름이 민으로 끝나는 사람 조회

10-3)이름이 중간에 성이 들어가는 사람 조회


11)email이 naver인 사람의 이름정보를 조회하세요


12)검색 데이터 정렬 
12-1)member 객체의 데이터를 이름의 오름차순으로 정렬
12-2)member 객체의 데이터를 id의 내림차순으로 정렬
12-3)이름을 오름차순정렬, 같은 이름은 id의 오름차순정렬
12-4)이름을 오름차순정렬, 같은 이름은 id의 내림차순 정렬
12-5)이름이 '이'로 시작하는 회원들의 row를 ID오름차순으로 정렬



13)트랜잭션 처리 
13-0)'가가가', '1234', '가가가', '가가가' 이런식으로 나,다까지 row 3개를 추가하라 
	-하기전에 자동지점저장을 풀고해라
	-이때 처음 가가가를 만들고 나면 지점을 저장해라
	-member 전체 컬럼조회를 통해 가,나,다 데이터가 멀쩡히 다 들어옴을 확인하라
13-1)트랜잭션실시한 후 다시 member 출력해서 나,다가 사라지고 가만 남음을 확인해라


14)테이블 객체 삭제
14-1)member 테이블삭제 후 확인하여 없음을 확인
14-2)트랜젝션으로 이전 커밋지점으로 돌리려 노력해봐야 복구안됨을 확인

<drop으로 날린 더미데이터 다시 복구 : 1)db객체 생성 부분 ctrl enter 2)더미데이터 ctrl enter>



15)member 테이블의 필드만 남겨두고 모든 row를 삭제하라 : 내부만 비워짐 테이블 필드는 남아있음 응용프로그래머가 잘 안한다. 이건 db관리자가 사용하는데 개념은 알아야하니 한다.


16)테이블 컬럼 수정
16-1)컬럼추가_address
16-2)컬럼삭제_email



<그후 자동으로 commit 다시 저장해라 수업원할한 진행을 위해서>
********트랜젝션은 최종커밋지점으로 돌아가는것이다.
	-그런데 커밋은 오토커밋되어있는데 이러면 위험하다.
	-수동으로 바꾸는법 edit--preferences-sqleditor-sql execution
		-거기에 new connections ~ 새로운 연결할때마다 자동으로 커밋해주는 모드를 사용하겠느냐 있는데
			이걸 체크박스 풀면 수동으로 커밋가능


######################################################################################################

​



답:

#워크벤치에서 sql문 실행명령 : 컨트롤 + enter
#관리자 계정명: root // 비밀번호: mysql


1)데이터베이스 객체생성명령	
	-데이터베이스 객체 이름: jsp_practice, 기본 문자 : 한국어 utf로 처리
CREATE DATABASE jsp_practice default character set utf8;


2)DB사용자 계정생성_앞 jsp 아이디, 뒤 jsp 비번을 뜻함
		-아이디: jsp, 비번 : jsp
CREATE USER 'jsp' identified by 'jsp';

3)사용자에게 권한 부여_위에 만든 jsp 계정에게 모든권한 부여 
GRANT ALL PRIVILEGES ON jsp_practice.* to 'jsp';

4)테이블 생성명령
	-id(20),pw(20),name(30),email(80)(모두 문자)
	-id는 중복금지, pw와 name을 입력안할시 table에 저장금지

#primary key - 컬럼의 주요키를 뜻하며 중복 데이터를 방지함
#not null - 데이터에 null 값이 들어오는 것을 방지
CREATE TABLE member(
    id varchar(20) primary key,
    pw varchar(20) not null,  
    name varchar(30) not null,
    email varchar(80)
);

5)테이블 전체 조회
select * from member;

6)데이터 저장 INSERT
	-id: abc123, pw:1234, name:홍길동 인 데이터를 저장후 테이블 전체 조회
	-그후 7개의 데이터 정도를 알아서 더미 만들어라 단 id의 마지막숫자는 서로 오름차순되도록 마지막숫자만 바꾸는 식으로해라
	-이름이 같은것도 만들어라

INSERT INTO member (id, pw, name)
VALUES('abc123', '1234', '홍길동');

select * from member;

INSERT INTO member
VALUES ('def4561', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4562', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4563', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4564', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4565', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4566', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4567', '4433', '이순신', 'aaa@bbb.com');

select * from member;


7)데이터 수정 UPDATE
	-2번데이터의 name의 벨류를 신사임당으로 바꾸고 email을 shin012@daum.net로 변경하라(id를 이용해서) 
	-3번데이터의 이름을 손흥민으로 변경하고 비밀번호를 7777로 하라 (id를 이용해서) 
	
UPDATE member
SET 
name ='신사임당',
email = 'shin012@daum.net'
WHERE id = 'def456';

UPDATE member
SET 
name = '손흥민',
pw = '7777'
WHERE id = 'def4561';


#데이터 삭제 DELETE
	-4번째 데이터를 삭제하라(id를 이용해서)
DELETE FROM member WHERE id = 'def4562';



select * from member;

8)데이터 조회 SELECT

	8-1)현재 만든 테이블 member에서 필드인 id속성을 가진 필드와 벨류들을 출력해라 
SELECT id FROM member;

	8-2)member에서 name과 email 속성을 가진 컬럼을 모두 출력해라
SELECT name, email FROM member;
SELECT * FROM member;

	8-3-1)member table에서 email 속성을 가진 컬럼을 출력하라
SELECT email FROM member; #email field의 모든 벨류 출력
	8-3-2)member table에서 email 속성을 가진 컬럼이면서 id가 abc123인놈을 출력하라(신사임당의 email만 보기)
SELECT email FROM member
WHERE ID = 'def456'; #신사임당의 email만보기

	
9)ID가 bbb456인 회원의 비밀번호를 조회
SELECT pw FROM member
WHERE id = 'def456';

10-1)이름이 이로 시작하는사람 조회
SELECT * FROM member
WHERE name LIKE '이%';

10-2)이름이 민으로 끝나는 사람 조회
SELECT * FROM member
WHERE name LIKE '%민';

10-3)이름이 중간에 성이 들어가는 사람 조회
SELECT * FROM member
WHERE name LIKE '%성%';

11)email이 naver인 사람의 이름정보를 조회하세요
SELECT name FROM member
where email LIKE '%naver%';

12)검색 데이터 정렬 
12-1)member 객체의 데이터를 이름의 오름차순으로 정렬
SELECT * FROM member ORDER BY name ASC;

12-2)member 객체의 데이터를 id의 내림차순으로 정렬
SELECT * FROM member ORDER BY id DESC;

12-3)이름을 오름차순정렬, 같은 이름은 id의 오름차순정렬
SELECT * FROM member ORDER BY name ASC;
SELECT * FROM member ORDER BY name ASC, id ASC;

12-4)이름을 오름차순정렬, 같은 이름은 id의 내림차순 정렬
SELECT * FROM member ORDER BY name ASC, id DESC;

12-5)이름이 '이'로 시작하는 회원의 모든 컬럼을 ID오름차순으로 정렬
select * from member 
where name like '이%'
ORDER BY id ASC;


13)트랜잭션 처리 
13-0)'가가가', '1234', '가가가', '가가가' 이런식으로 나,다까지 row 3개를 추가하라 
	-하기전에 자동지점저장을 풀고해라
	-이때 처음 가가가를 만들고 나면 지점을 저장해라
	-member 전체 컬럼조회를 통해 가,나,다 데이터가 멀쩡히 다 들어옴을 확인하라

INSERT INTO member VALUES ('가가가', '1234', '가가가', '가가가');

COMMIT;
INSERT INTO member VALUES('나나나', '1234', '나나나', '나나나');
INSERT INTO member VALUES('다다다', '1234', '다다다', '다다다');


SELECT * FROM member;

13-1)트랜잭션실시한 후 다시 member 출력해서 나,다가 사라지고 가만 남음을 확인해라
ROLLBACK; #이거 후 SELECT 하면 나, 다 사라짐 트랜잭션 완료
SELECT * FROM member;

14)테이블 객체 삭제
14-1)member 테이블삭제 후 확인하여 없음을 확인
DROP TABLE member;
SELECT * FROM member;

14-2)트랜젝션으로 이전 커밋지점으로 돌리려 노력해봐야 복구안됨을 확인
ROLLBACK;	//이렇게해도 복구안된다. drop은 객체자체를 날리는 것이니 위험하다
SELECT * FROM member;

<drop으로 날린 더미데이터 다시 복구 : 1)db객체 생성 부분 ctrl enter 2)더미데이터 ctrl enter>

SELECT * FROM member; //복구된거 확인


15)member 테이블의 필드만 남겨두고 모든 row를 삭제하라 : 내부만 비워짐 테이블 필드는 남아있음 응용프로그래머가 잘 안한다. 이건 db관리자가 사용하는데 개념은 알아야하니 한다.
TRUNCATE TABLE member;
SELECT * FROM member;

16)테이블 컬럼 수정
16-1)컬럼추가_address
ALTER TABLE member ADD address varchar(100);
SELECT * FROM member;

16-2)컬럼삭제_email
ALTER TABLE member DROP COLUMN email;
SELECT * FROM member;

<그후 자동으로 commit 다시 저장해라 수업원할한 진행을 위해서>






