21.10.02_12회차(11강)
=======================================================================================================
*JDBC 개념, db연동실습(Connection,Statement,ResultSet)
=======================================================================================================







######################################################################################################
개념정리_JDBC 개념, db연동실습(Connection,Statement,ResultSet)

* JDBC(Java Database Connectivity) 프로그래밍
- JDBC란? 자바 프로그램에서 SQL문을 실행하여 데이터를 관리하기 위한 JAVA API입니다.
- 특징은 다양한 데이터베이스에 대해서 별도의 프로그램을 만들 필요 없이, 해당 데이터베이스의 JDBC를 이용하면 하나의 프로그램으        로 데이터베이스를 관리할 수 있습니다.
- 우리는 MySQL을 사용하므로 MySQL용 JDBC를 사용합니다.


* 데이터베이스와 JAVA의 연결 순서
1. JDBC 드라이버 로드.
2. 데이터베이스 Connection 객체 생성.
3. 쿼리문 실행을 위한 Statement 객체 생성.
4. 쿼리문을 실행.
5. ResultSet 객체를 통해 쿼리문 실행 결과값을 소비.
6. Statement 객체 종료.
7. 데이터베이스 Connection 객체 종료.


* DBMS와의 통신을 위한 JDBC 드라이버
- JDBC 드라이버는 DBMS와의 통신을 담당하는 자바 클래스로서 각 DBMS마다 별도의 드라이버가 필요합니다.
- 주요 DBMS의 JDBC 드라이버 클래스
1. MySQL: "com.mysql.jdbc.Driver"
2. ORACLE: "oracle.jdbc.driver.OracleDriver"


* 데이터베이스 식별을 위한 JDBC URL
- 웹이 주소를 구분할 때 URL을 사용하는 것처럼 데이터베이스도 URL을 통해 데이터베이스들을 구분합니다.
- 주요 DBMS의 JDBC URL 패턴
1. MySQL: "jdbc:mysql://호스트이름:포트번호/DB이름"
2. ORACLE: "jdbc:oracle:thin:호스트이름:포트번호:DB이름"




* 데이터베이스 연결을 위한 Connection 객체
- JDBC를 이용해서 데이터베이스를 사용하려면 데이터베이스와 연결된 커넥션을 구해야 합니다.
- java.sql 패키지에 있는 Connection 클래스가 데이터베이스 커넥션을 지원하며 
	DriverManager 클래스가 제공하는 getConnection() 메서드를 사용하여 커넥션을 구할 수 있습니다.
- getConnection() 메서드에 파라미터 값으로 JDBC URL, DB 사용자 계정명, 
	DB 사용자 암호를 전달하면 메서드는 DB와 연결된 커넥션 객체를 리턴합니다.
- 만일 제대로 객체를 생성하지 못하면 SQLException이 발생하므로 getConnection() 메서드를 사용할 때는 반드시  
	try  ~ catch 구문 으로 예외처리를 해줘야 합니다.
- Connection 객체를 다 사용한 뒤에는 반드시 close() 메서드를 호출하여 Connection 객체가 사용한 시스템 자원을 반환해야 합니         다. 
	그렇지 않으면 시스템 자원이 불필요하게 소모되어 커넥션을 구할 수 없는 상황이 발생할 수도 있습니다.
* 쿼리문을 실행하기 위한 Statement 객체
- Connection 객체를 생성한 후에는 Connection 객체로부터 Statement를 생성하고 쿼리문을 실행할 수 있습니다.
- Statement 객체는 Connection객체의 createStatement() 메서드를 이용하여 생성합니다.
- Statement 객체를 사용하면 쿼리문을 실행시킬 수 있습니다.
1. executeQuery(String query):ResultSet - Select 쿼리문을 실행합니다.
2. executeUpdate(String query):int - Insert, Update, Delete 쿼리문을 실행합니다.


* 쿼리문을 실행하기 위한 Statement 객체
- Connection 객체를 생성한 후에는 Connection 객체로부터 Statement를 생성하고 쿼리문을 실행할 수 있습니다.
- Statement 객체는 Connection객체의 createStatement() 메서드를 이용하여 생성합니다.
- Statement 객체를 사용하면 쿼리문을 실행시킬 수 있습니다.
1. executeQuery(String query):ResultSet - Select 쿼리문을 실행합니다.
2. executeUpdate(String query):int - Insert, Update, Delete 쿼리문을 실행합니다.


* 쿼리 실행 결과 값을 읽어오는 ResultSet 객체
- Statement 객체의 executeQuery() 메서드는 Select 쿼리문의 결과를 ResultSet객체에 담아서 리턴합니다.
- 따라서 데이터 조회의 결과값을 ResultSet이 제공하는 메서드를 통해 읽어올 수 있습니다.
- ResultSet 객체가 제공하는 next() 메서드는 Select 쿼리문의 결과값의 존재 여부를 확인하는 메서드입니다.

- ResultSet 주요 메서드
1. getString(String name):String - 지정한 컬럼 값을 String으로 읽어옴. 파라미터 변수 name에는 DB 테이블의 컬럼이름을 적습니다.
2. getInt(String name):int - 지정한 컬럼 값을 int 타입으로 읽어옴.
3. getDouble(String name):double - 지정한 컬럼 값을 double 타입으로 읽어옴


######################################################################################################










######################################################################################################
예제46)Jdbc 환경구축

가.웹프로젝트 생성
	-이름: Jdbc
	-다이나믹
	-context root 프로젝트명으로
	-content directory : Webcontent(기존그대로)

나.새로만든 프로젝트를 기존서버에 등록
1)하나의 서버에 두개의 웹사이트(프로젝트)를 만들수 있다는 것을 확인
	-좌측하단 Servers에서 생성되어있는 tomcat v9.0 우클릭-add and remove 클릭
	-configured: JSPBasic / Available: Jdbc가 나오는데 현재 이서버에서 구동되는 웹사이트는(프로젝트) JSPBasic이고
		추가로 구동시킬수 있는 프로젝트는 Jdbc이다. 라고 뜨는것이다. 하지만 이렇게 하나의 서버에서 두개의 웹사이트를
		돌리게되면 속도가 느려지니 새로 생성하도록한다.
	
2)기존 프로젝트 서버에서 remove 하고 Jdbc를 서버에 등록 
	-서버가 Jdbc프로젝트만 관리하도록 한다.
	-관리 프로젝트가 많아지면 부하가 생긴다.


다.새로생성한 프로젝트에 db와 웹서버의 연결을 위한 mysql connector를 pc에 설치 후 프로젝트에도 설치하기
	-connector pc설치: mysql 공식홈페이지-다운로드가서 connector/j -> 5.1.46.zip버전설치(최신이있지만 강의에서버전이이거)
								(반드시 zip으로 설치)
	-압축풀고 5.1.46.bin.jar 파일 복사 후 이클립스의 외부라이브러리저장하는 lib 폴더에 붙여넣기
		-Jdbc/WebContent/WEB-INF/lib

라.DB에서 member table의 필드 만들기(id, pw, name, email)
	-user : id = jsp, pw = jsp
		-jsp_practice객체의 모든 권한을 여기서만든 계정에게 줘야함(안그러면 나중에 연동하고 보내도 user가 권한이없어서
						db까지 다와놓고 변화를 못줌)
	-DB: 첫 db수업에 만든 jsp_practice 
		-set as default schema
	-table: member
		-field : id, pw, name, email
	

마.Jdbc 프로젝트에서 자바 패키지 생성(db를 자바에서 구동시킬 클래스들이 들어갈 패키지)
	-패키지: kr.co.koo.jdbc.basic


######################################################################################################










######################################################################################################
예제47)db연동 후 기본 insert하기

패키지: kr.co.koo.jdbc.basic 사용
class: JdbcInsert.java 생성(main메서드 포함)
import java.sql.*;

#수업때는 db객체를 jsp_practice를 사용한것이고, 복습때는 jsp_practice2 등 추가로 만들어서 사용해도된다

1)DB연동을 실시하라
	-db연동의미 추측: db의 url과 계정정보를 알고있는 객체를 만들어줌으로써 연결되고 
		그 객체를 통해 언제든지 쿼리를 조작하고 데이터를받아올수 있는 상태
			-즉 connection으로 연결가능 상태를 만들고 sql문 전달 및 실행을 위한 객체까지 만들어야지 비로서
				db연동이 되었다는 것
		-그래서 연동이 되었다라는 뜻은 객체가 잘만들어지고 주소가 참조변수로 들어가서 언제든 이용할수 있는 상황을 뜻하는듯
			-연동 : 객체=>(참조변수=>연결)=>쿼리문전달 및 실행객체생성
	-연결의 의미추측: 언제든지 db에 접근할수 있는상태
		-즉 connection 객체만 만들어도됨
	
-String 타입 변수 3개 : uid, upw, url
	-각 변수명에 맞게 id, pw, url을 집어넣어라
	-url은 MYSQL 형식의 url을 집어넣어라
-연결하는 객체의 주소를 참조할 변수명 : conn
-쿼리문을 전달 및 실행하게 하는 객체의 주소를 참조할 변수명 : stmt

2)DB연동된 class에서 아래의 회원정보를 연결된 db객체의 member table에 추가하라
	-단, table 정보삽입이 끝났으면 class에서 원활한 jdbc 프로그래밍을 위해 사용한 자원들을 무조건 반납하도록 해라
		-연동에 실패하든 성공하든 
id: jsp012
pw: jjj123
이름: 김제이에스피
email: jjj123@jsp.com

######################################################################################################


답:




package kr.co.koo.jdbc.basic;

import java.sql.*;

public class JdbcInsert {

	public static void main(String[] args) {
		//DB연동 순서
		//1. DB사용자 계정명과 암호, DB URL 등 초기 데이터  변수를 설정
		String uid = "jsp";
		String upw = "jsp";
		String url = "jdbc:mysql://localhost:3306/jsp_practice";
		Connection conn = null;
		Statement stmt = null;
		
		try {
			//2.JDBC 커넥터 드라이버 호출
			Class.forName("com.mysql.jdbc.Driver");
			
			//3.DB연동을 위한 클래스들의 객체를 생성
			/*
			 * # a - Connection 객체
			 * :DB와의 연결을 위한 객체, Connection객체를 생성하려면 직접 new 연산자를
			 * 통해 객체를 생성할수 없고(Connection은 interface이기때문임)
			 * DriverManager 클래스가 제공하는 정적 메서드 getConnection()을
			 * 호출하여 객체를 생성합니다. 
			 */
			conn = DriverManager.getConnection(url, uid, upw);
			
			System.out.println(conn); //주소값이 잘나오면되는거고 null이면 
							//연동을 위한 객체가 연동을 못한것
			
			

			/*
			 * # b - Statement 객체:
			 * SQL문 실행을 위한 객체.
			 * Statement 객체는 Connection 객체가 제공하는 createStatement() 메
			 * 서드를 호출하여 생성
			 */
			
			stmt = conn.createStatement();
			/*
			 * c - SQL문 작성
			 * SQL문은 String 형태로 작성
			 */
			
			String sql = "INSERT INTO member VALUES ('jsp012', 'jjj123', '김제이에스피', 'jjj123@jsp.com')";
			
			/*
			 * # d = Statement 객체를 통한 SQL문 실행
			 * 1.insert, update, delete 명령일 경우 executeUpdate()를 호출
			 * 2.select 명령일 경우 excuteQuery()를 호출
			 * 3.excuteUpdate는 실행 성공시 성공한 쿼리의 개수를, 실패시 0 을 리턴 
			 */
			
			int resultNum = stmt.executeUpdate(sql);
			
			if(resultNum==1) {
				System.out.println("DB에 회원정보 저장 성공!");
			}else {
				System.out.println("DB에 회원정보 저장 실패!");
			}
			
		} catch (Exception e) {
			//catch (ClassNotFoundException e) {
			//상위클래스인 exception으로 받아주자 그냥
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			/*
			 * 4. DB연동 객체들 자원 반납
			 * -원활한  JDBC프로그래밍을 위해 사용한 자원들을 반납함
			 */
			try {
				conn.close();
				stmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}	//이렇게하면 try안에서 conn과 stmt를 선언했으면 
						//여기서 에러남. 왜냐면 try에서 만들고 try에서 사라지니까그래서
				///선언을 밖으로 뺌
		}
		
		
	}
}















######################################################################################################
예제48)db연동 후 입력함수를이용하여 회원정보를 insert하기

패키지: kr.co.koo.jdbc.basic 사용
class: JdbcInsert.java 생성(main메서드 포함)
import java.sql.*;

1)47번문제에서 입력함수를 이용하여 회원정보를 insert하라(class에서 입력함수사용, class에서 실행)
	-마지막에 scan도 반납해야하는데 기존의 trycatch구문을 이용해서해라
	-왠진모르겠지만 db에 추가되고나면 바로 select 부분을 실행시키면 안되고 공백에서 실행을 한번하고 select 쿼리를 실행해야추가됨
######################################################################################################


답:



package kr.co.koo.jdbc.basic;

import java.sql.*;
import java.util.Scanner;

public class JdbcInsert {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("# 회원정보 입력을 시작합니다.");
		System.out.print("* 아이디: ");
		String id = sc.next();
		
		System.out.print("* 비밀번호: ");
		String pw = sc.next();
		
		System.out.print("* 이름: ");
		String name = sc.next();
		
		System.out.print("* 이메일: ");
		String email = sc.next();
		
		//DB연동 순서
		//1. DB사용자 계정명과 암호, DB URL 등 초기 데이터  변수를 설정
		String uid = "jsp";
		String upw = "jsp";
		String url = "jdbc:mysql://localhost:3306/jsp_practice";
		Connection conn = null;
		Statement stmt = null;
		
		try {
			//2.JDBC 커넥터 드라이버 호출
			Class.forName("com.mysql.jdbc.Driver");
			
			//3.DB연동을 위한 클래스들의 객체를 생성
			/*
			 * # a - Connection 객체
			 * :DB와의 연결을 위한 객체, Connection객체를 생성하려면 직접 new 연산자를
			 * 통해 객체를 생성할수 없고(Connection은 interface이기때문임)
			 * DriverManager 클래스가 제공하는 정적 메서드 getConnection()을
			 * 호출하여 객체를 생성합니다. 
			 */
			conn = DriverManager.getConnection(url, uid, upw);
			
			System.out.println(conn); //주소값이 잘나오면되는거고 null이면 
							//연동을 위한 객체가 연동을 못한것
			
			

			/*
			 * # b - Statement 객체:
			 * SQL문 실행을 위한 객체.
			 * Statement 객체는 Connection 객체가 제공하는 createStatement() 메
			 * 서드를 호출하여 생성
			 */
			
			stmt = conn.createStatement();
			/*
			 * c - SQL문 작성
			 * SQL문은 String 형태로 작성
			 */
			
			//String sql = "INSERT INTO member VALUES ('jsp012', 'jjj123', '김제이에스피', 'jjj123@jsp.com')";
			String sql = "INSERT INTO member VALUES "
					+ "('"+id+"', '"+pw+"', '"+name+"', '"+email+"')";
			/*
			 * # d = Statement 객체를 통한 SQL문 실행
			 * 1.insert, update, delete 명령일 경우 executeUpdate()를 호출
			 * 2.select 명령일 경우 excuteQuery()를 호출
			 * 3.excuteUpdate는 실행 성공시 성공한 쿼리의 개수를, 실패시 0 을 리턴 
			 */
			
			int resultNum = stmt.executeUpdate(sql);
			
			if(resultNum==1) {
				System.out.println("DB에 회원정보 저장 성공!");
			}else {
				System.out.println("DB에 회원정보 저장 실패!");
			}
			
		} catch (Exception e) {
			//catch (ClassNotFoundException e) {
			//상위클래스인 exception으로 받아주자 그냥
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			/*
			 * 4. DB연동 객체들 자원 반납
			 * -원활한  JDBC프로그래밍을 위해 사용한 자원들을 반납함
			 */
			try {
				conn.close();
				stmt.close();
				sc.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}	//이렇게하면 try안에서 conn과 stmt를 선언했으면 
						//여기서 에러남. 왜냐면 try에서 만들고 try에서 사라지니까그래서
				///선언을 밖으로 뺌
		}	
	}
}







######################################################################################################
예제49)db연동후 delete 쿼리문 실행하기

패키지: kr.co.koo.jdbc.basic 사용
class: JdbcDelete.java 생성(main메서드 포함)
import java.sql.*;

1)
삭제할 회원의 ID를 입력하세요.
> banana34234324

삭제에 실패했습니다.

삭제할 회원의 ID를 입력하세요.
> banana999

회원ID: banana999이(가) 정상 삭제되었습니다.


######################################################################################################


답:



package kr.co.koo.jdbc.basic;

import java.sql.*;
import java.util.Scanner;

public class JdbcDelete {
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
		String uid = "jsp"; //root
		String upw = "jsp"; //mysql로 해도된다
		String url = "jdbc:mysql://localhost:3306/jsp_practice";
		
		
		String id;
		System.out.println("삭제할 회원의 ID를 입력하세요.");
		System.out.print("> ");
		id = scan.next();
		
		
		
		
		Connection conn = null;
		Statement stmt = null;
		
		String sql = "DELETE FROM jsp_practice.member"
				+ "where id = '"+id+"';";
		try {
			Class.forName("com.mysql.jdbc.Driver");
			
			conn = DriverManager.getConnection(url, uid, upw);
			System.out.println(conn);
			
			stmt = conn.createStatement();
			System.out.println(stmt);
			int resultNum = stmt.executeUpdate(sql);
			
			if(resultNum >= 1) {
				System.out.println("db에 데이터저장성공!");
			} else {
				System.out.println("데이터 저장 실패!");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				stmt.close();
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			scan.close();
		}
	}
}





















######################################################################################################
예제50)db연동후 db정보 불러오기

패키지: kr.co.koo.jdbc.basic 사용
class: JdbcSelect.java 생성(main메서드 포함)
import java.sql.*;

1)db에서 현재 jsp_practice db객체의 table인 member에 담긴 모든 레코드를 JdbcSelect 클래스에서 출력해봐라


######################################################################################################


답:




package kr.co.koo.jdbc.basic;

import java.sql.*;

public class JdbcSelect {

	public static void main(String[] args) {
		String url = "jdbc:mysql://localhost:3306/jsp_practice";
		String uid = "jsp";
		String upw = "jsp";
		
		String sql = "SELECT * FROM member";
		
		Connection conn = null;
		Statement stmt = null;
		
		ResultSet rs = null; // select 문에서만 사용하는 객체
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			conn = DriverManager.getConnection(url, uid, upw);
			stmt = conn.createStatement();
			
			rs = stmt.executeQuery(sql);
			
			/*
			 * -select 쿼리문의 실행 결과 데이터가 한 줄이라도 존재한다면
			 * rs.next() 메서드는 true를 리턴하며, 해당 행을 지목합니다.
			 */
			
			System.out.println("===========================");
			while(rs.next()) {
				String id = rs.getString("id");
				String pw = rs.getString("pw");
				String name = rs.getString("name");
				String email = rs.getString("email");
				
				System.out.printf("#아이디 : %s, 비번: %s, 이름:%s, 이메일:%s\n",
						id, pw, name, email);
			}
			System.out.println("===========================");
			
			/*
			 * -select의 실행결과의 컬럼레코드를 읽어오려면 
			 * getString(), getInt()등의 메서드를 사용합니다.
			 * -해당 메서드의 매개값으로 읽어올 테이블의 컬럼명을 지정합니다.
			 */
			
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
				stmt.close();
				rs.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
}






















######################################################################################################
예제51)db연동후 db정보 불러오기

패키지: kr.co.koo.jdbc.basic 사용
class: JdbcSelect2.java 생성(main메서드 포함)
import java.sql.*;


1)아래처럼 출력되게 하되 반복문을 소스코드내에 넣지말고 아래처럼 출력되게 하라

조회할 회원의 ID를 입력하세요.
> 123

===============회원정보===============
아이디 : 123
비번 : 123
이름 : 123
email : 123
===================================




2)아래처럼 출력되게하고 반복문은 break 조건 안넣고 일시정지 하면서 테스해라

조회할 회원의 ID를 입력하세요.
> 123

===============회원정보===============
아이디 : 123
비번 : 123
이름 : 123
email : 123
===================================

조회할 회원의 ID를 입력하세요.
> ohala33	

===============회원정보===============
아이디 : ohala33
비번 : 1234
이름 : hate
email : naver
===================================

조회할 회원의 ID를 입력하세요.
> 
######################################################################################################


답:







1)아래처럼 출력되게 하되 반복문을 소스코드내에 넣지말고 아래처럼 출력되게 하라





package kr.co.koo.jdbc.basic;

import java.sql.*;
import java.util.Scanner;

public class JdbcSelect2 {

	public static void main(String[] args) {
		/*
		 * 회원의 ID를 입력받아 해당 ID의 회원정보를 모두 출력하는
		 * JDBC프로그래밍 코드를 작성하세요.
		 */

		Scanner sc = new Scanner(System.in);
		System.out.println("조회할 회원의 ID를 입력하세요.");
		System.out.print("> ");
		String userId = sc.next();

		String url = "jdbc:mysql://localhost:3306/jsp_practice";
		String uid = "jsp";
		String upw = "jsp";

		String sql = "SELECT * FROM member WHERE id='" + userId + "'";

		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null; 

		try {
			Class.forName("com.mysql.jdbc.Driver");
			conn = DriverManager.getConnection(url, uid, upw);
			stmt = conn.createStatement();
		
			rs = stmt.executeQuery(sql);
			
			if(rs.next()) {				
				String id = rs.getString("id");
				String pw = rs.getString("pw");
				String name = rs.getString("name");
				String email = rs.getString("email");
				
				System.out.println("==========회원 정보=========");
				System.out.println("아이디: " + id);
				System.out.println("비밀번호: " + pw);
				System.out.println("이름: " + name);
				System.out.println("이메일: " + email);
				System.out.println("=========================");
			} else {
				System.out.println("해당 회원 정보는 존재하지 않습니다.");
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
				stmt.close();
				rs.close();
				sc.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}

}









2)아래처럼 출력되게하고 반복문은 break 조건 안넣고 일시정지 하면서 테스해라


package kr.co.koo.jdbc.basic;

import java.sql.*;
import java.util.Scanner;

public class jdbcSelect2 {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
		String uid = "jsp";
		String upw = "jsp";
		String url = "jdbc:mysql://localhost:3306/jsp_practice";

		
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		
		String sql = "SELECT * FROM member";
		try {
			
			Class.forName("com.mysql.jdbc.Driver");
			conn = DriverManager.getConnection(url, uid, upw);
			
			stmt = conn.createStatement();
			
			
			
			while(true) {
				rs = stmt.executeQuery(sql);
				System.out.println("\n조회할 회원의 ID를 입력하세요.");
				System.out.print("> ");
				String id = scan.next();
				
				
				System.out.println("\n===============회원정보===============");
				while(rs.next()) {
					if(id.equals(rs.getString("id"))) {
						System.out.println("아이디 : " + rs.getString("id"));
						System.out.println("비번 : " + rs.getString("pw"));
						System.out.println("이름 : " + rs.getString("name"));
						System.out.println("email : " + rs.getString("email"));
						break;
					}
				}				
				System.out.println("===================================");
			}
	
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
				stmt.close();
				rs.close();
				scan.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}

}


