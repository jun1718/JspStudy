21.09.29_9회차(8강)
=======================================================================================================
*예외처리, jsp action tag(forward, include), request 동작방식(sendR,forW)
=======================================================================================================








######################################################################################################
개념정리_예외페이지 개념 및 처리방법

* 예외 페이지
- 예외 상황이 발생했을 경우 웹 컨테이너(톰캣)에서 제공되는 기본적인 예외페이지가 보여집니다.
- 개발 과정에서는 이러한 예외 페이지를 보고 어떤 에러가 발생했는지 알 수 있기 때문에 오류를 수정하는 데 도움이 됩니다.
- 그러나 사용자에게 상용 서비스를 제공하고 있는데 이러한 딱딱한 페이지가 보여진다면 사용자로 하여금 불쾌감을 일으키고, 
	해당 사이트에 대한 신뢰도가 하락하게 됩니다.
- 또한 코드의 일부가 노출되어 보안 측면에도 좋지 않습니다.
- 그래서 개발자가 따로 만들어 둔 에러 페이지로 유도하여 사용자에게 친숙한 페이지를 보여줍니다.


* HTTP 주요 응답 상태 코드
1. 404: 요청한 URL을 찾을 수 없는 경우.
1. 500: 서버측 내부 오류로 인해 페이지가 나타나지 않는 경우(java, JSP 페이지 내의 코드오류)
1. 200: 요청을 성공적으로 처리함.
1. 307: 임시로 페이지를 리다이렉트함.
1. 400: 클라이언트의 요청이 잘못된 구문으로 작성됨.
1. 405: 요청 방식을 허용하지 않음(GET, POST 등)
1. 503: 서버가 일시적으로 서비스를 제공할 수 없음(일시적 서버과부하, 서버 임시 보수 등)


* JSP에서 에러를 처리하는 방법
1. 직접 예외를 처리하기
- 자바의 키워드인 try ~ catch를 사용하여 직접 개발자가 예외를 처리합니다.

2. 에러를 처리할 페이지를 따로 지정하기
- JSP는 실행 도중 예외가 발생할 때 톰캣 기본 에러화면 대신 개발자가 지정한 JSP페이지를 보여줄 수 있는 기능을 제공하고 있습니다.
- 에러가 발생하면 보여줄 JSP페이지는 페이지 지시자(directive)의 errorPage 속성을 사용하여 지정합니다.
- 예외가 발생할 것으로 예상되는 페이지에 예외가 발생했을 때 보여줄 페이지를 지정합니다.   ex) <%@ page errorPage="
	예외가 발생했을 시 보여줄 페이지" %>

- 에러 발생시 유도된 페이지에는 페이지  지시자태그로  isErrorPage  속성을  사용하여  true로  값을  설정합니다.  ex) <%@ page isErrorPage="true" %>
		<%@ page isErrorPage="true" %>   : 해당페이지가 에러페이지가 맞는거냐고 물어보는 속성이고 "true"를 넣으면
				해당페이지에서 에러발생시에 작동할 내장객체 exception을 사용할수있게된다.


- 에러 페이지로 지정된 JSP파일 내에서는 예외를 처리해주는 exception 내장객체를 사용할 수 있습니다.

- 인터넷 익스플로러 브라우저의 경우 전체 응답 결과의 데이터가 512바이트보다 작을 경우 마이크로소프트에서 자체 제공하는 에러페이지를 출력합니다.
######################################################################################################














######################################################################################################
예제32) 예외페이지 처리하기 1

​Exception 폴더
error_trycatch.jsp
error_page01.jsp
error_page02.jsp


* HTTP 주요 응답 상태 코드
1. : 요청한 URL을 찾을 수 없는 경우.
1. : 서버측 내부 오류로 인해 페이지가 나타나지 않는 경우(java, JSP 페이지 내의 코드오류) / 자바문법에러
1. 200: 요청을 성공적으로 처리함.
1. 307: 임시로 페이지를 리다이렉트함.
1. 400: 클라이언트의 요청이 잘못된 구문으로 작성됨.
1. 405: 요청 방식을 허용하지 않음(GET, POST 등)
1. 503: 서버가 일시적으로 서비스를 제공할 수 없음(일시적 서버과부하, 서버 임시 보수 등)




<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	String id = request.getParameter("id");
%>    


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h4><%= id.toLowerCase() %></h4>
</body>
</html>



1)원초적인 예외처리 : error_trycathch.jsp

2)에러를 처리할 페이지를 따로 지정하기 : error_page01.jsp(에러가 발생하는 페이지), perror_page02.jsp(에러시 보여줄 페이지ui)
	에러소스 : <%= request.getParameter("id").toLowerCase() %>
	-예외클래스명: 
	 예외클래스의가 가진 에러원인 메세지: 

3)인터넷익스플로어 특성: 매우 작은 kb의 에러페이지는 저것도 에러페이지라고 ㅋ 하고 자기들이 만들걸보여줌;; 그래서 반드시
	512kb를 채워야한다. 
	-error_page02.jsp의 예외클래스명 또는 에러원인 메세지를 잠시지우고 웹브라우저를 internet exploer로 변경후 테스트해바라
		문자열 추가하면 또 우리꺼보인다.

######################################################################################################

​

답:

​


* HTTP 주요 응답 상태 코드
1. 404: 요청한 URL을 찾을 수 없는 경우.
1. 500: 서버측 내부 오류로 인해 페이지가 나타나지 않는 경우(java, JSP 페이지 내의 코드오류) / 자바문법에러
1. 200: 요청을 성공적으로 처리함.
1. 307: 임시로 페이지를 리다이렉트함.
1. 400: 클라이언트의 요청이 잘못된 구문으로 작성됨.
1. 405: 요청 방식을 허용하지 않음(GET, POST 등)
1. 503: 서버가 일시적으로 서비스를 제공할 수 없음(일시적 서버과부하, 서버 임시 보수 등)





1)원초적인 예외처리


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	String id = request.getParameter("id");
%>    


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>


	<%try{%>
		<h4><%= id.toLowerCase() %></h4>
	<% } catch(Exception e){%>
		<h4>죄송합니다. 서버측에 오류가 발생했습니다.</h4>
		<p><strong>잠시만 기다리시면 빠른시간 내에 해결하겠습니다.</strong></p>
	<%} %>

</body>
</html>





2)에러를 처리할 페이지를 따로 지정하기 : error_page01.jsp(에러가 발생하는 페이지), perror_page02.jsp(에러시 보여줄 페이지ui)
	에러소스 : <%= request.getParameter("id").toLowerCase() %>


//error_page01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ page errorPage = "error_page02.jsp" %>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%= request.getParameter("id").toLowerCase() %>

</body>
</html>



//error_page02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page isErrorPage="true" %>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<p>
	요청처리과정에서 문제가 발생했습니다. <br/> 
	빠른시간내에 문제를 해결하겠습니다.
</p>

<p>
	<strong>잠시만</strong> 기다려주세오 ㅠㅠㅠㅠ<br/>
	진짜진짜 빨리 처리할게요 ㅠㅠㅠ<br/>
</p>

<p>
	예외클래스명: <em><%= exception %></em> <br/>
	예외클래스의가 가진 에러원인 메세지: <em><%= exception.getMessage() %></em>
</p>

</body>
</html>
















######################################################################################################
개념정리_예외페이지 처리방법2

* JSP에서 에러를 처리하는 방법
1. 직접 예외를 처리하기
- 자바의 키워드인 try ~ catch를 사용하여 직접 개발자가 예외를 처리합니다.

2. 에러를 처리할 페이지를 따로 지정하기(실행할 페이지에서 에러발생시 특정 에러페이지 지정)

3. 응답 상태 코드별로 에러 페이지 지정하기(web.xml에서 에러발생시 코드에 따라 에러페이지 명시)
- JSP는 에러 코드별로 사용할 에러 페이지를 web.xml파일 수정을 통해 지정할 수 있습니다.
- 이렇게 지정한 에러페이지는 일반 JSP파일과 동일하게 작성하면 됩니다.

4. 예외 타입별로 에러 페이지 지정하기
- 발생하는 예외의 종류별로도 에러 페이지를 지정할 수 있습니다. web.xml파일을 수정합니다.


* 에러 페이지의 우선순위
- 에러 페이지를 여러 방법으로 지정한 경우 다음의 우선순위에 따라 사용할 에러 페이지를 선택합니다.
1. 페이지 지시자 태그의 errorPage속성에 지정한 페이지.
2. web.xml에 지정한 에러 타입에 따른 페이지.
3. web.xml에 지정한 응답 상태 코드에 따른 페이지.
4. 위 3항목에 해당하지 않을 경우 톰캣이 제공하는 에러 페이지.

######################################################################################################














######################################################################################################
예제33) 예외페이지 처리하기 2


​Exception 폴더
error_get404.jsp
error_404.jsp
error_get500.jsp 
error_500.jsp

1)응답 상태 코드별로 에러페이지를 지정하라
 -404, 500

error_get404.jsp : jsp링크 에러발생
	-발생코드: 대충 못찾는 파일링크 갖다넣어라
error_404.jsp : 에러발생시 보여줄 페이지

error_get500.jsp : 자바문법 에러발생 
	-발생코드 : 10을 0으로 나눠서 arithmeticException 발생
error_500.jsp : 에러발생시 보여줄 페이지

######################################################################################################

​

답:

​//error_get404.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<h4>페이지를 찾을수 없는 404에러입니다.</h4>
	<p>
		요청한 페이지는 존재하지 않습니다.
	</p>

</body>
</html>


​//error_404.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<a href = "hello.jsp">404에러페이지유발이리로 가는링크가 없는파일이라서남</a> 

</body>
</html>





​//error_get500.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%
	int a = 10 /0;
%>

</body>
</html>








​//error_500.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h4>서버측 코드 오류로인한500번 에러입니다.</h4>
<p>
	개발자 노네 ㅋ 개발자야 빨리 처리해라~
</p>
</body>
</html>






//web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">
  <display-name>JSPBasic</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <error-page>
  	<error-code>404</error-code>
  	<location>/Exception/error_404.jsp</location>
  </error-page>
   
  <error-page>
  	<error-code>500</error-code>
  	<location>/Exception/error_500.jsp</location>
  </error-page>
  
</web-app>
















######################################################################################################
예제34) 예외페이지 처리하기 3 및 예외페이지 처리 우선순위


​Exception 폴더
error_getNull.jsp
error_null.jsp

1)예외 타입별로 에러페이지지정(위에는 코드번호별로였고 이번에는 이름임) 
error_getNull.jsp : 에러발생
	-발생코드: String name = "null"하고 name을 이용해라. name.indexOf("프") 등
error_null.jsp : 에러발생시 처리할 페이지


2)위에꺼 지정하면 에러시 처리할 페이지가 겹친다.  NullPointerException는 500번에 포함되니까.
	이경우 뭐가 우선되는지 확인하라
		-nullpointer임

3)이렇게되면 error_page01.jsp는 에러 처리페이지의 경우의수가 3개다 ㅋ 어디로갈지 확인해보라
	-결과: directive가 1순위다.
		-directive 주석처리하고 다시해봐라
			-에러타입별 페이지지정한게 2순위다.
			-꼴지가 에러 코드별 지정이다.


######################################################################################################

​

답:



<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">
  <display-name>JSPBasic</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <error-page>
  	<error-code>404</error-code>
  	<location>/Exception/error_404.jsp</location>
  </error-page>
   
  <error-page>
  	<error-code>500</error-code>
  	<location>/Exception/error_500.jsp</location>
  </error-page>
  
  <error-page>
  	<exception-type>java.lang.NullPointerException</exception-type>
  	<location>/Exception/error_null.jsp</location>
  </error-page>
  
</web-app>












######################################################################################################
개념정리_jsp action tag



* JSP Action Tag
- JSP 페이지 내에서 어떤 동작을 하도록 지시하는 태그입니다.
- 종류에는 페이지 이동을 강제하는 forward, 페이지를 삽입하는
  include, forward나 include를 할 때 값을 지정하는 param, 자바의 클래스와 연동하는 useBean 등이 있습니다.
1. forward: 현재의 페이지에서 다른 특정 페이지로 전환할 때 사용합니다.
1. include: 현재 페이지에 다른 페이지를 삽입할 때 사용합니다.
1. param: forward 및 include 태그에 데이터를 전달할 목적으로 사용되는 태그입니다. name과 value 속성으로 이루어져 있습니다.


* forward vs sendRedirect
1. forward(sendRe와 다르게 주소가 안바뀐다.)
- 요청 받은 요청객체(request)를 위임하는 컴포넌트에 요청 객체값을 동일하게 전달할 수 있습니다.
- 요청을 처리함과 동시에 해당 결과를 바로 보여줘야 하는 경우
ex) 게시판 목록에서 글 제목을 클릭했을 때 바로 내용을 보여줘야 하는 경우.

2. sendRedirect
- 요청 받은 요청객체를(request) 위임하는 컴포넌트에 전달하는 것이 아닌, 새로운 요청객체를 생성합니다.
- 요청을 처리한 다음 새로운 요청으로 작업을 해야할 경우에 사용합니다. ex) 회원가입 요청 처리 후 단순히 메인페이지로 안내해야 할 경우.

######################################################################################################















######################################################################################################
예제35) jsp action tag_forward, include 

JspActionTag 폴더
forward_ex01.jsp
forward_ex02.jsp
include_ex01.jsp
include_ex02.jsp

1)forward 태그를 사용하여 자동페이지 이동을 해보고 sendRedirect와 다르게 주소가 최종 이동한 페이지로 바뀌지 않는다는 것을 확인하라

​forward_ex01.jsp : 02.jsp를 본인 페이지 내부에서 실행할 파일
forward_ex02.jsp : 01.jsp의 forward에 의해서 01 내부에서 실행될 파일

2)jsp태그 중 지시자태그종류의 include태그인지 action tag종류의 include 태그인지차이에 따른 include 사용법
	-지시자 태그종류
		-page 태그
		-include 태그
	-jsp action tag 종류 
		-forward 태그
		-include 태그
		-param 태그

include_ex01.jsp : body에 텍스트 2개 1번페이지임, 그리고 좀 아래에 다시 1번페이지임
include_ex02.jsp : 여기는 2번페이지임
	-위처럼 두개 페이지 만든뒤 1번 페이지의 두 텍스트 사이에 2번페이지를 불러온다.
		-이때방법은 jsp태그중 지시자(directive)를 이용한 방법과 action tag를 이용한 방법이 있는데 두가지방법으로 
			두번 불러라

<%--jsp 태그 중 디렉티브 태그의 include와 액션태그의 include 의 차이점
	# 디렉티브 태그의 include:
		ex) <%@ include file = "삽입할 페이지" %>
		-페이지 내부에서 공유하면서 써야할 변수나 메서드를 다른 파일에 선언해두고 삽입하여 사용
			-자바코드 응용 필요할때
			
	# 액션태그의 include:
		ex) <jsp:include page = "삽일할 페이지" %>
		-단순히 UI를 복사하고 싶을때 주로 사용
				-광고 등 그냥 갖다 넣기만 하면될때
 --%>
######################################################################################################

​

답:



1)forward 태그를 사용하여 자동페이지 이동을 해보고 sendRedirect와 다르게 주소가 최종 이동한 페이지로 바뀌지 않는다는 것을 확인하라


//forward_ex01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%--
	*jsp action tag 사용법
		-<jsp:forward 속성=값, ....> </jsp:forward>
		-e닫는 태그는 태그 내부에 추가적으로 종속된 태그가 없다면 닫는 태그를 생략하고
		열린 태그 끝부분은 />로 마감할수 있음
		ex)<jsp:forward 속성=값,... />
 --%>    
    
<jsp:forward page = "forward_ex02.jsp"></jsp:forward>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h3>forward_ex01페이지입니다.</h3>
	<p>포워드 기능에 의해 이 메시지를 보실수 없습니다.</p>

</body>
</html>





//forward_ex02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<h3>forward_ex01페이지에 의해 강제 이동된 페이지입니다.</h3>
</body>
</html>


		
2)jsp태그 중 지시자태그종류의 include태그인지 action tag종류의 include 태그인지차이에 따른 include 사용법


//include_ex01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<%--
	# 디렉티브 태그의 include:
		ex) <%@ include file = "삽입할 페이지" %>
		-페이지 내부에서 공유하면서 써야할 변수나 메서드를 다른 파일에 선언해두고 삽입하여 사용
			-자바코드 응용 필요할때
			
	# 액션태그의 include:
		ex) <jsp:include page = "삽일할 페이지" %>
		-단순히 UI를 복사하고 싶을때 주로 사용
				-광고 등 그냥 갖다 넣기만 하면될때
 --%>

	<h3>안녕하세요. 여기는 1번 페이지입니다.</h3>
	
	<%@ include file = "include_ex02.jsp" %>
	
	<jsp:include page="include_ex02.jsp" />
	
	<h4>다시 여기는 1번 페이지 입니다.</h4>

</body>
</html>


//include_ex02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<h3>여기는 2번페이지입니다1!!</h3>












######################################################################################################
개념정리_sendRedirect위임과 forward위임에서 동작방식의 차이로 인한 request의 차이 


#sendRedirect: 
	클라1 --- request1 --> 서버(요청페이지)   
	클라1 <-- response1 -- 서버(요청페이지)	
	클라1 --- request2 --> 서버(위임페이지)
	클라1 <-- response2 -- 서버(위임페이지)

-http통신은 request와 response가 끝나면 통신을 종료하기때문에 내부 데이터도 소실된다. 즉 클라1에서 로그인을 했다면
  해당 정보는 서버의 요청페이지로 가서 일치하는지 체크한 후 일치한다면 일단 다시 클라1로 보내서 로그인당시 정보를 모두 털고
	클라1이 자동으로 서버의 위임페이지로 가도록 안내한다.
	그럼 서버의 위임페이지에는 로그인 정보는 남지않고 다른 일을 하면 된다. 웰컴창이라던지.
		굳이 로그인 정보를 아이디와 비번을 가지고 웰컴에 있을필요가 없으니까 한번만 쓰면 되는 데이터다
	 		
#forward:
	클라1 --- request1 --> 서버(요청페이지)   
	서버(요청페이지) --- request1 --> 서버(위임페이지)
	클라1 <-- response -- 서버(위임페이지)

-회원정보 수정시 데이타베이스에서 가져온뒤 수정한걸 데이타베이스로 보내고 그 정보를 출력하는 기능 페이지를 따로 구현할때
	해당페이지에서 다시 디비에게 받아올 필요없이 바로 req로 보내주어 위임하면 디비의 중복 데이터사용을 막을수 있다.


######################################################################################################

















######################################################################################################
예제36) sendRedirect의 위임과 forward의 위임의 차이

send_vs_forward 폴더 생성
forward_ex01.jsp 생성
forward_ex02.jsp 생성
forward_ex03.jsp 생성
send_ex01.jsp 생성
send_ex02.jsp 생성
send_ex03.jsp 생성


forward_ex01.jsp : 아이디 비번 입력페이지(클라이언트에게 처음 노출되어 서버에게 request 하는 클라이언트 페이지)
			-요청파라메터 전송은 post 방식으로 하라
forward_ex02.jsp : ex03으로 forward로 위임하는 페이지
forward_ex03.jsp : 아이디와 비번 출력하는 페이지

send_ex01.jsp : 위와동일
send_ex02.jsp : ex03으로 sendRedirect로 위임하는 페이지
send_ex03.jsp  : 위와동일


######################################################################################################

​

답:





//forward_ex01.jsp 생성

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action = "forward_ex02.jsp" method = "post">
	<input type = "text" name = "id" placeholder = "ID" /> <br />
	<input type = "password" name = "pw" placeholder = "PW" /> <br />
	<input type = "submit" value = "로그인" />
</form>

</body>
</html>






//forward_ex02.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
	request.setCharacterEncoding("utf-8");
%>    
<jsp:forward page = "forward_ex03.jsp" />    
    






//forward_ex03.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	

	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
%>    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	# 아이디 : <%= id %> <br />
	# 비밀번호 : <%= pw %> <br />

</body>
</html>








//send_ex01.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action = "send_ex02.jsp" method = "post">
	<input type = "text" name = "id" placeholder = "ID" /> <br />
	<input type = "password" name = "pw" placeholder = "PW" /> <br />
	<input type = "submit" value = "로그인" />
</form>

</body>
</html>







//send_ex02.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	request.setCharacterEncoding("utf-8");
	response.sendRedirect("send_ex03.jsp");
%>    







//send_ex03.jsp 생성
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

    
<%
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
%>        
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	# 아이디 : <%= id %> <br />
	# 비밀번호 : <%= pw %> <br />
	
</body>
</html>









