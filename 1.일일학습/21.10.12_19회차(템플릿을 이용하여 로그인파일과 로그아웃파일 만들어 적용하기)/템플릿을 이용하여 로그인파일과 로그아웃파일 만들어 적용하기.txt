21.10.12_19회차(15강)
=======================================================================================================
*템플릿을 이용하여 로그인파일과 로그아웃파일 만들어 적용하기
=======================================================================================================





######################################################################################################
예제64)템플릿을 이용하여 로그인파일과 로그아웃파일 만들어 적용하기


login_modal.jspf
20번라인쯤 modal-body에서 form action을 #에서 check_login.jsp로 변경
54번라인쯤 type = button을 잠시 submit으로 변경, id = signIn-btn 을 #으로 변경

check_login.jsp 파일 생성



1) check_login.jsp에서 아래와 같은 주석의 내용을 작성하라
//1. 요청 파라미터 처리(입력된 id, pw)

//2. 모델을 찾아 DB연동 처리.(모델찾는건 MemberDAO를 활용)

//3. DB처리 결과에 따른 알림창 설정.
// a - 로그인 성공시 세션에 user_id, user_name이란 이름으로
//    로그인한 회원의 아이디와 이름을 저장 후 홈으로 안내.
// b - 존재하지 않는 회원일 경우 알림창으로 "존재하지 않는 ID입니다"
//    출력 후 뒤로가기 실행 (history.back())
// c - 비밀번호가 틀렸을 경우 알림창으로 "비밀번호가 틀렸습니다" 출력 후
//    뒤로가기 실행.


2) MemberDAO에서 아래의 메서드를 작성하라
	-이때 로그인성공, 아이디틀림, 비번틀림 3가지 경우가있는데 각각 리턴값을 다르게 뱉어라
		-이 세개는 아래 세개로 상수화 시키고 해라	
			LOGIN_SUCCESS = 1;
			LOGIN_FAIL_ID = -1;
			LOGIN_FAIL_PW = 0;

 //로그인 유효성을 검증하는 메서드 선언
public ??? userCheck(???){
	//전달된정보를 바탕으로 로그인이 유효한지를 판정할수있는 JDBC 로직을 작성
}

//로그인한 회원의 회원정보를 모두 가져오는 메서드 선언.
public ??? getMemberInfo(???){
}





3)로그아웃 만들기
	-users폴더에 logout.jsp 파일을 만들고 로그아웃에 관련한 로직을만들면됨
	-로그아웃클릭하고 확인누르면 자동으로 logout.jsp 페이지가게 되어있다
		-로그아웃후에는 메인으로 보내라
######################################################################################################






답:





//MemberDAO.java
package kr.co.koo.izone.member.model;

import java.sql.*;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class MemberDAO {
	private DataSource ds;
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	
	private MemberDAO() {
		try {
			Context ct = new InitialContext();
			ds = (DataSource)ct.lookup("java:comp/env/jdbc/mysql");
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	private static MemberDAO dao = new MemberDAO();
	
	public static MemberDAO getInstance() {
		if(dao==null) {
			dao = new MemberDAO();
		}
		return dao;
	}
	
	public boolean confirmId(String id) {
		String sql = "SELECT user_id FROM jsp_practice2.izone_member WHERE user_id = ?";
		boolean flag = false;
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				flag = true;
			} 
			
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("하아 모르겠다");
		} finally {
			JdbcUtill.close(conn);
			JdbcUtill.close(pstmt);
			JdbcUtill.close(rs);
		}
		
		System.out.println("\n\n"+sql+"\n\n");
		System.out.println("\n\n"+id+"\n\n");
		System.out.println("\n\n"+flag+"\n\n");
		return flag;
	}
	
	
	public int insertMember(MemberVO member) {
		int rn = 0;
		String sql = "INSERT INTO jsp_practice2.izone_member"
				+ " (user_id, user_pw, user_name, user_email)"
				+ " VALUES(?, ?, ?, ?)";
		
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, member.getUserId());
			pstmt.setString(2, member.getUserPw());
			pstmt.setString(3, member.getUserName());
			pstmt.setString(4, member.getUserEmail());
			
			rn = pstmt.executeUpdate();
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return rn;
	}
	
	
	public int userCheck(String id, String pw) {
		String sql = "SELECT user_pw FROM jsp_practice2.izone_member WHERE user_id = ?";
		
		int rn = -1;
		MemberVO member = new MemberVO();
		
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				rn = 0;
				if(rs.getString("user_pw").equals(pw)) {
					rn = 1;
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			JdbcUtill.close(conn);
			JdbcUtill.close(pstmt);
			JdbcUtill.close(rs);
		}
		
		
		return rn;
	}
	
	//로그인한 회원의 회원정보를 모두 가져오는 메서드 선언.
	public MemberVO getMemberInfo(String id) {
		String sql = "SELECT * FROM jsp_practice2.izone_member WHERE user_id = ?";
		
		MemberVO member = new MemberVO();
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			rs = pstmt.executeQuery();
			
			
			if(rs.next()) {
				member.setUserId(rs.getString("user_id"));
				member.setUserPw(rs.getString("user_pw"));
				member.setUserName(rs.getString("user_name"));
				member.setUserEmail(rs.getString("user_email"));				
			}
			
		} catch(Exception e){
			e.printStackTrace();
		}finally {
			JdbcUtill.close(conn);
			JdbcUtill.close(pstmt);
			JdbcUtill.close(rs);
		}
		
		return member;
	}
}


//check_login.jsp
<%@page import="kr.co.koo.izone.member.model.MemberVO"%>
<%@page import="kr.co.koo.izone.member.model.MemberDAO"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%

//1. 요청 파라미터 처리(입력된 id, pw)
	String id = request.getParameter("userId");
	String pw = request.getParameter("userPw");
	

//2. 모델을 찾아 DB연동 처리.(모델찾는건 MemberDAO를 활용)
	MemberDAO dao = MemberDAO.getInstance();
	int rn = dao.userCheck(id, pw);	
	

//3. DB처리 결과에 따른 알림창 설정.
// a - 로그인 성공시 세션에 user_id, user_name이란 이름으로
//    로그인한 회원의 아이디와 이름을 저장 후 홈으로 안내.
// b - 존재하지 않는 회원일 경우 알림창으로 "존재하지 않는 ID입니다"
//    출력 후 뒤로가기 실행 (history.back())
// c - 비밀번호가 틀렸을 경우 알림창으로 "비밀번호가 틀렸습니다" 출력 후
//    뒤로가기 실행.

	if(rn == -1){%>
	<script>
		alert("존재하지 않는 ID입니다.");
		history.back();
	</script>
<% 		
	}else if(rn == 0){ %>
	<script>
		alert("비번이 틀렸습니다.");
		history.back();
	</script>
<% 		
	}else{
		MemberVO member = dao.getMemberInfo(id);
		session.setAttribute("user_id", id);
		session.setAttribute("user_name", member.getUserName());%>    	
		
	<script>
		location.href = "/izone";
	</script>
<% }%>    
   







//logout.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	session.invalidate();
	response.sendRedirect("/izone");
%>    
  












######################################################################################################
예제65)로그인하기

#login_modal.jspf에서 로그인 로직 연습을 위해 잠시 변경해놓은것들 다시 되돌려라
	-53번라인 button, id를 signIn-btn(이거까진함)
		-이제 64에서 login_check.jsp에 만들어놓은 로직을 signIn-btn속성을 가진 버튼을 
			클릭했을시에 발동하는 기능을 통해 되도록 login_check.jsp의 내용을 바꿀거다.
			-signInId에서 keyup뜻은 키보드 때릴때마다 이기능 적용이란 뜻
			-34:36


			$('#signIn-btn').click(function(e) {
				if(chk1 && chk2) {							
					$.ajax({
						type: "POST",
						url: "/izone/users/check_login.jsp",
						data: { // 여기서 user_id좌측이 url로 보내는 파라미터이름이다.
							"user_id": $('#signInId').val(),
							"user_pw": $('#signInPw').val()
						},
						success: function(data) {
					
							if($.trim(data) == "NOT_ID") {
								$('#signInId').css("background-color", "pink");
								$('#idCheck').html('<b style="font-size:16px;color:red;">[회원가입 먼저~~]</b>');
								$('#signInPw').val("");
								$('#signInId').focus();
								chk2 = false;
							} else if($.trim(data) == "NOT_PW") {
								$('#signInPw').css("background-color", "pink");
								$('#signInPw').val("");
								$('#signInPw').focus();
								$('#pwCheck').html('<b style="font-size:16px;color:red;">[비밀번호가 틀렸습니다ㅠㅠ]</b>');
								chk2 = false;
							} else if($.trim(data) == "LOGIN_OK") {
								location.href="/izone";
							}
						}
					});			
				} else {
					alert('입력정보를 다시 확인하세요.');			
				}
			});
######################################################################################################






답:



