21.09.26_6회차
=======================================================================================================
*쿠키(생성,응답,읽기,사용,유효시간,로그인로직_자동로그인,아이디기억등),세션(저장,읽기,유효시간,삭제등)
=======================================================================================================





######################################################################################################
개념정리_쿠키 개념, 생성-전송-사용, 유효시간




* out 객체의 이해
- JSP 페이지가 생성하는 모든 내용은 out 기본 객체를 통해 전송됩니다.
- JSP 페이지 내에서 사용하는 비스크립트 요소들(HTML코드와 텍스트)이 out 객체에 전달됩니다.
- 값을 출력하는 표현식(expression)의 결과값도 out객체에 전달됩니다.



* 쿠키(Cookie)
- 웹 브라우저에서 서버로 어떤 데이터를 요청하면, 서버측에서는 알맞은 로직을 수행한 후 데이터를 웹 브라우저에 응답합니다.
- 그리고 Http 프로토콜은 응답 후에 웹 브라우저와의 관계를 종료합니다.
- 연결이 끊겼을 때, 어떤 정보를 지속적으로 유지하기 위한 수단으로 쿠키라는 방식을 사용합니다.
- 쿠키는 서버에서 생성하여, 서버가 아닌 클라이언트측(local)에 정보를 저장합니다.
- 서버에서 요청할 때마다 쿠키의 속성값을 참조 또는 변경할 수 있습니다.
- 쿠키는 개당 4kb로 용량이 제한적이며, 300개까지(1.2MB) 데이터 정보를 가질 수 있습니다.
- 쿠키문법: 쿠키클래스에서 쿠키 생성 -> setter메서드로 쿠키의 속성 설정 -> response객체에 쿠키 탑재 -> 로컬 환경에 저장

- Cookie 객체 관련 메서드
1. setMaxAge(): 쿠키의 유효시간을 설정합니다.
1. setPath(): 쿠키사용의 유효디렉토리를 설정합니다.
1. setValue(): 쿠키의 값을 설정합니다.
1. setVersion(): 쿠키 버전을 설정합니다.
1. getMaxAge(): 쿠키 유효기간 정보를 얻습니다.
1. getName(): 쿠키의 이름을 얻습니다.
1. getPath(): 쿠키사용의 유효디렉토리 정보를 얻습니다.
1. getValue(): 쿠키의 값을 얻습니다.
1. getVersion(): 쿠키 버전을 얻습니다.







#request: 이전페이지의 파라미터등의 정보를 담고있는 객체
#response: 현재 페이지의 정보가 담길 객체(다음 페이지에 넘겨주어야 할 정보)
		-객체의 기능중 강제로 다음페이지로 넘기는 메서드도 있음 sendRedirect(".jsp");

쿠키생성 및 전송 방법:
1.쿠키 객체를 생성 - 생성자의 매개값으로 쿠키의 이름과 저장할 데이터의를 입력
	Cookie apple = new Cookie("apple_cookie", "사과맛 쿠키");
			           쿠키이름		쿠키값
2.쿠키 클래스의 setter 메서드로 쿠키의 속성들을 설정
	apple.setMaxAge(60*60); // 쿠키의 유효시간 설정(초) : 60초 x 60초
	peanut.setMaxAge(20);

3.http 응답시 response객체에 생성된 쿠키를 탑재하여 클라이언트로 전송 //request 객체가 가지는 쿠키배열에 해당 쿠키들을 탑제하는거임
	response.addCookie(apple);
	response.addCookie(peanut);

쿠키사용방법:
1.쿠키 배열변수 cookies을 만든뒤 서버에게 받은 모든 쿠키를 저장하는 배열의 주소를 참조
	Cookie[] cookies = request.getCookies(); //서버에서 준 쿠키를 저장하고있는 request객체를 이용하여
							쿠키배열 참조

2.포문을통해 쿠키를 하나식 꺼내고 꺼내진 쿠키의 이름을 저장 
	String cookieName = cookies[0].getName(); //쿠키 이름을 얻어오는 메서드	

3.꺼내진 쿠키의 이름과 탐색하고자하는 쿠키의 이름이 같은지 비교하여 같다면 땅콩쿠키가 존재합니다. 등의 원하는 로직 수행 
	-모든쿠키가 그이름이 아니라면 flag를 false로 주어서 쿠키는 존재하지 않습니다.
	if(cookieName.equals("peanut_cookie")){
		flag = true;
	}

######################################################################################################











######################################################################################################
예제25) 쿠키 유효시간, 이전페이지에서 받은 모든 쿠키 출력 

Cookie 폴더
cookie_make.jsp : 쿠키를 만드는서버용
cookie_check.jsp : 쿠기를 받아 사용하는 클라이언트용
cookie_check_all.jsp : 모든 쿠키의 이름과 값을 출력하는 페이지(check에서 링크를통해 출력한다)

1)쿠키 유효시간확인
1-1)땅콩쿠키(peanut_cookie)와 사과맛쿠키(apple_cookie)를 만들고 유효기간을 각각 20초 60초x60초(1시간)
  로 설정한후 해당 두 쿠키를 응답할때 전송할 쿠키배열에 추가하라
1-2)그후 make에서 실행을하면 check에서 쿠키 배열을 참조해서 땅콩쿠키가 있다면 땅콩쿠키가 존재합니다. 없다면 사라졌습니다.(일단 사과맛말고
		땅콩만실시)
	-처음엔 될것이고 이후에는 쿠키 시간 20초를 넘어서 로컬에서 사라짐으로(삭제됨으로) 안되는것이다.

1-3)make에서 실행했을때 땅콩쿠키 확인하기~ 라는 링크를 만들고 그걸 클릭하면 check로 이동해서 땅콩의 유효성출력 



2)모든 쿠키 출력하는 페이지만들기
위의 1번에서 유효성출력후 그 아래에는 모든쿠키보기라는 링크를 달아놓고 클릭시 모든 쿠키보이게해라
(아래처럼)


쿠키의 이름: apple_cookie
쿠키의 값: 사과맛쿠키

=======================
쿠키의 이름: peanut_cookie
쿠키의 값: 땅콩맛쿠키			//여기도 20초뒤엔 사라짐

=======================
쿠키의 이름: JSESSIONID
쿠키의 값: 9E57E336F17994AA29394C527005A1F5

=======================






######################################################################################################



답:




//cookie_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    
<%
	Cookie apple = new Cookie("apple_cookie", "사과맛쿠키");
	Cookie peanut = new Cookie("peanut_cookie", "땅콩맛쿠키");
	
	apple.setMaxAge(60*60); // 쿠키의 유효시간 설정(초) : 60초 x 60초
	peanut.setMaxAge(20);
	
	response.addCookie(apple);
	response.addCookie(peanut);
%>

<a href = "cookie_check.jsp">쿠키확인하기~</a>








//cookie_check.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%	
	//클라이언트에 저장된 쿠키를 가져오는 방법
	Cookie[] cookies = request.getCookies();
	
	boolean flag = false;
	for(Cookie c: cookies){
		String cookieName = c.getName(); //쿠키 이름을 얻어오는 메서드
		if(cookieName.equals("peanut_cookie")){
			out.println("<h3>땅콩 쿠키가 존재합니다.</h3>");
			String value = c.getValue(); //쿠키의 값을 읽어오는 메서드
			flag = true;
			break;
		}
	}
	
	if(!flag){
		out.println("<h3>땅콩쿠키는 존재하지 않습니다. 사라졌습니다.</h3>");
	}
	
%>    

<hr/>
<a href = "cookie_check_all.jsp">모든 쿠키보기~</a>
    









//cookie_check_all.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	Cookie[] cookies = request.getCookies();
	
	for(Cookie c : cookies){
		String cookieName = c.getName();
		String cookieValue = c.getValue();
		
		out.print("<p> 쿠키의 이름: "+cookieName+"<br/> 쿠키의 값: "+cookieValue+"</p>");
		out.print("=======================<br/>");
	}
%>    



















######################################################################################################
예제26) 은행 등이 사용하는 유효시간이 정해진 로그인 로직구현1

cookie_login.jsp
cookie_login_ok.jsp
cookie_login_welcome.jsp


1)login에서 입력받고 post방식으로 cookie_login_ok.jsp로 요청파라미터 보내기
	-login에서 입력받는양식

	ID입력	//아이디입력 박스, ID입력은 입력시 사라지도록 설정
	 아이디 기억하기 //앞에 체크박스체크하도록 둬라 (요청파라미터 이름은 id_remember로 하여라)
		//이건 id입력비번입력로그인등의 페이지 기본 글자크기의 70%정도로 작게 표시되게 하여라
			//근데 이건 ui로 넣어만놓고 따로 기능은 아직안함 나중에 배우려나봄
	PW입력	//비번입력 박스, PW입력은 입력시 사라지도록 설정
	로그인	//특정 페이지로 이동 및 요청파라미터전송하는 버튼



2)ok에서는 아이디 비밀번호가 일치하는지 검사한후 일치한다면 쿠키(쿠키객체의 주소를담는 참조변수명:idCookie 쿠키이름:id_cookie, 쿠키
값: 아이디)를 생성한 후 다음페이지로 보낼 정보를 담는 객체가 가지는 쿠키객체배열에 저장후 welcome.jsp로 페이지 이동(저장하면 자동같이전송됨)
	-id나 비번중 하나라도 틀리면 다른 출력없이 login.jsp 페이지로 이동 



3)유효성검증(로그인유지) 및 로그인된 id 정보 현재페이지에서 만든 변수에 저장
	-userId라는 이전페이지에서 로그인된 id를 저장할 참조변수 생성
3-1)welcome.jsp: 이전 페이지의 정보를 저장한  request를 통해 쿠키 배열을 cookies라는 참조변수에 저장한후 for문으로
	쿠키의 name값이 id_cookie인 쿠키가 있는지 탐색
3-2)있다면 userId에 로그인한 계정의 id를 저장후 userId님 환영합니다. 를 출력
	그리고 로그인화면으로 돌아가기 라는 링크도 추가(링크클릭시 login.jsp로 이동)
3-3)없다면 로그인은 됐지만 쿠키의 유효시간이 지난것임으로 재 로그인이 필요하니까 시간이 지나 자동 로그아웃 처리되었습니다를
 출력한 후 login.jsp로 돌이가는 링크(다시 로그인하기) 출력





#small 태그 : 일반글씨크기에서 70%의 크기로 작게 만들어주는 태그
<small>아이디 기억하기</small> <br/>
######################################################################################################



답:





//cookie_login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<form action="cookie_login_ok.jsp" method = "post">
	<input type = "text" name = "id" size = "10px" placeholder = "ID입력"/><br/>
	<input type = "checkbox" name = "id_remember" value = "yes" />
	<small>아이디 기억하기</small> <br/> <!-- 글씨크기를 일반에 대해 약 70%정도 작게 만들어주는 태그 -->
	<input type = "password" name = "pw" size = "10px" placeholder = "PW입력" /><br/>
	<input type = "submit" value = "로그인" />
</form>
</body>
</html>




//login_ok.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

    
<%
	request.setCharacterEncoding("utf-8");		
	//앞에서 체크를 하면 3개의 요청파라미터가 넘어오는것이고 체크선택 안하면 2개의 요청파라미터가 넘어옴
	
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	
	if(id.equals("abc1234") && pw.equals("aaa1111")){
		Cookie idCookie = new Cookie("id_cookie", id);
		idCookie.setMaxAge(30);
		//idCookie.setMaxAge(60*60*24*30); //초단위의 유효시간을 한달로설정하는법 직관적
		response.addCookie(idCookie);
		
		response.sendRedirect("cookie_login_welcome.jsp");
	}else{
		response.sendRedirect("cookie_login.jsp");
	}
%>  






//login_welcom.jsp
  
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	Cookie[] cookies = request.getCookies();
	String userId = null;
	
	for(Cookie c : cookies){
		if(c.getName().equals("id_cookie")){
			userId = c.getValue();
			break;
		}
	}
	
	if(userId != null){
		out.println("<p>"+userId+"님 환영합니다.</p>");
		out.println("<a href = 'cookie_login.jsp'>로그인화면으로 돌아가기.</a>");
	} else{
		out.println("시간이 지나 자동 로그아웃 처리되었습니다.<br/>");
		out.println("<a href = 'cookie_login.jsp'>다시 로그인하기.</a>");
	}
%>    











######################################################################################################
예제27) 은행 등이 사용하는 유효시간이 정해진 로그인 로직구현2


0-1)파일추가없음
	-작업위치: login.jsp

0-2)문제발생 배경
특정 페이지마다 로그인이 필요한 페이지가 있다.
그럴때마다 위에서 만든 login.jsp를 response.sendRedirect해주면된다.
그런데 위의 로직대로라면 로그인이 이미 된사람도 계속 로그인을 해야하는 일이발생한다.
그럼으로 로그인이 필요한 페이지일때 login.jsp로 이동은 하지만 기존 로그인된게 증명이 된다면(쿠키) 해당페이지에서 이미 로그인한 사용자입니다.
를 출력하게 하여라

0-3)구동프로세스: cookie_login_welcome.jsp에서 다시로그인 클릭 -> (유효기간이 남아있다면) 이미 로그인한 사용자입니다.
						  -> (유효기간이 끝나서 쿠키가삭제됐다면) 로그인 입력창 표시

1)26번에서 생성된 id_cookie 쿠키를 검색하여 쿠키가 존재한다면 로그인 창 대신 브라우저에 "이미 로그인한 사용자입니다."를 출력하고,
	id_cookie가 없는 사용자는 로그인 입력창이 등장하도록 구성하세요


2)아이디 기억하기 체크박스를 체크하면 쿠키 유효시간 내에서는 언제 로그인 창으로 와도 아이디가 입력되있도록 하라




######################################################################################################






답:







//cookie_login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>

<%

	Cookie[] cookies = request.getCookies();

	boolean isLogin = false;
	String userId = ""; 
	
	if(cookies != null){
		for(int i=0;i<cookies.length;i++){
			if(cookies[i].getName().equals("remember_id")){
				userId= cookies[i].getValue();
			}
			/*	//아이디기억하는지 테스트하기위해 잠시 끈다.
			if(cookies[i].getName().equals("id_cookie")){
				isLogin = true;
			}
			*/
		}	
	}

%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>


<%
if(!isLogin){
%>
	<form action="cookie_login_ok.jsp" method="post">

		
		<input type="text" name="id" size="10px" placeholder="ID입력" value="<%= userId %>" /><br />		
		<input type="checkbox" name="remember_id" value="yes" /> <small>아이디
			기억하기</small> <br />
		<!-- 글씨크기를 일반에 대해 약 70%정도 작게 만들어주는 태그 -->
		<input type="password" name="pw" size="10px" placeholder="PW입력" /><br />
		<input type="submit" value="로그인" />
	</form>

<%
} else{
	out.print("이미 로그인한 사용자입니다.<br/>");
	out.print("<a href = 'cookie_login_welcome.jsp'>웰컴 페이지로~ </a>");
}
%>

</body>
</html>












//cookie_login_ok.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

    
<%
	request.setCharacterEncoding("utf-8");		
	//앞에서 체크를 하면 3개의 요청파라미터가 넘어오는것이고 체크선택 안하면 2개의 요청파라미터가 넘어옴
	
	String id = request.getParameter("id");
	String pw = request.getParameter("pw");
	String check = request.getParameter("remember_id");	
	//체크했던사람은 yes가 담긴 객체의 주소가 오고 안한사람은 null이 옴
	
	
	
	if(id.equals("abc1234") && pw.equals("aaa1111")){
		Cookie idCookie = new Cookie("id_cookie", id);
		idCookie.setMaxAge(5);
		//idCookie.setMaxAge(60*60*24*30); //초단위의 유효시간을 한달로설정하는법 직관적
		response.addCookie(idCookie);
	
		if(check != null){
			Cookie idMemory = new Cookie("remember_id", id);
			idMemory.setMaxAge(10);
			response.addCookie(idMemory);
		}

		response.sendRedirect("cookie_login_welcome.jsp");
	}else{
		response.sendRedirect("cookie_login.jsp");
	}
%>  
  











//cookie_login_welcome.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%
	Cookie[] cookies = request.getCookies();
	String userId = null;
	
	
	for(Cookie c : cookies){
		out.print(c.getName() + "<br/>");
		if(c.getName().equals("id_cookie")){
			userId = c.getValue();
			//break;//여기서 이걸하면 제일 먼저 추가된 id_cookie만 보이고 뒤에 쿠키들은보이지않음
		}
	}
	out.print("==========================<br/>");

	if(userId != null){
		out.println("<p>"+userId+"님 환영합니다.</p>");
		out.println("<a href = 'cookie_login.jsp'>로그인화면으로 돌아가기.</a>");
	} else{
		out.println("시간이 지나 자동 로그아웃 처리되었습니다.<br/>");
		out.println("<a href = 'cookie_login.jsp'>다시 로그인하기.</a>");
	}
%>    




















######################################################################################################
개념정리_session



* 세션(Session)
- 세션도 쿠키와 마찬가지로 서버와의 관계를 유지하기 위한 수단입니다.
- 단, 쿠키와 달리 클라이언트의 특정 위치에 저장되는 것이 아니라, 서버상에 객체형태로 존재합니다.
- 서버당 하나의 세션 객체를 가질 수 있습니다.
- 세션 객체는 브라우저 창을 종료하면 삭제됩니다.*******+세션이 만료되기전까지
- 따라서 세션은 서버에서만 접근이 가능하여 보안이 좋고, 저장할 수 있는 데이터에 한계가 없습니다.
- 세션은 클라이언트의 요청이 발생하면 자동생성되어 고유한 ID값을 클라이언트에 넘겨주며 이것은 쿠키에 저장됩니다.
- JSP에서는 session이라는 내장 객체를 지원하여 세션의 속성을 설정할 수 있습니다.

- session 객체 관련 메서드
1. setAttribute() - 세션에 데이터를 저장합니다.
	/*
	-세션은 쿠키와 마찬가지로 http 통신 데이터를 유지하기위한 수단으로 사용함
	-세션에 데이터를 저장할 때는 JSP 내장객체 session이 지원하는 setAttribute() 메서드를 사용함
	-해당 메서드의 첫번째 매개값으로 세션의 데이터의 이름을 정하고, 두번째 매개값으로 세션에 저장할 값을 정해줌
	*/
1. getAttribute() - 세션에 저장되어 있는 데이터를 얻습니다.
	/*
	-세션에 저장된 데이터는 브라우저 창이 종료될때까지 혹은 세션의 유효시간이만료되기 전까지 웹 어플리케이션의 모든
	jsp페이지에서 사용할수있음
	-세션에 저장된 데이터를 가져오려면 session객체의 getAttribute()메서드를 사용하여 매개값으로 가져올
	데이터의 세션명을 적음
	*/


1. getAttributeNames() - 세션에 저장되어 있는 모든 데이터의 세션 이름(key)을 얻습니다.
1. getId() - 자동생성된 세션의 유니크한 아이디를 얻습니다.
1. getCreationTime() - 세션이 생성된 시간을 구합니다.
1. getLastAccessedTime() - 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구합니다.

1. setMaxInactiveInterval() - 세션의 유효시간을 설정합니다. 초 단위로 기록합니다.

	//세션의 유효시간 설정 1800초로 나온다. 30분임 디폴트값이
	
	/*
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	*/
	
	//세션의 유효시간 디폴트값  1시간으로 변경
	session.setMaxInactiveInterval(60*60);
	
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	
1. getMaxInactiveInterval() - 세션의 유효시간을 얻습니다. 가장 최근 요청시점을 기준으로 카운트됩니다.

1. removeAttribute() - 특정 세션의 데이터를 삭제합니다.(섹션 객체의 삭제가 아님)

1. invalidate() - 모든 세션의 데이터를(키와벨류==이름과벨류인 엔트리형 객체) 삭제합니다.
	-isRequestedSessionIdValid() -현재 요청받은 정보를 담은 request 객체 안에 

	session.invalidate();
	if(request.isRequestedSessionIdValid()){	
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}
* 쿠키 vs 세션
- 쿠키 대신에 세션을 사용하는 가장 큰 이유는 세션이 쿠키보다 보안에서 앞서기 때문입니다.
- 쿠키의 이름이나 데이터는 네트워크를 통해 전달되기 때문에 HTTP 프로토콜을 사용하는 경우 중간에서 누군가가 쿠키의 값을 읽어올        
수 있습니다.
- 그러나 세션은 오직 서버에만 저장되기 때문에 중요한 데이터를 저장하기에 좋습니다.
- 세션을 사용하는 또 다른 이유는 웹 브라우저가 쿠키를 지원하지 않거나 강제로 사용자가 쿠키를 차단한 경우에도 사용할 수 있다는  점입니다.
- JSP에서는 쿠키를 사용할 수 없는 경우 세션ID를 쿠키에 저장하지 않고 URL  재작성 방식을 통해 세션ID를 URL로 웹 서버에 전달합     니다.

- 세션은 여러 서버에서 공유할수 없는 단점이 있습니다. 그러나 쿠키는 도메인을 이용해 쿠키를 여러  도메인에서 공유할 수 있기  때문        에 Naver, Daum과 같은 포털사이트들은 쿠키에 로그인 방식을 저장하는 것을 선호합니다.
ex) www.naver.com과 mail.naver.com, blog.naver.com의 서버는 각각 다름.

######################################################################################################



























######################################################################################################
예제28) session 


1) session 객체 관련 메서드
1.  - 세션에 데이터를 저장합니다.
1.  - 세션에 저장되어 있는 데이터를 얻습니다.
1. getAttributeNames() - 세션에 저장되어 있는 모든 데이터의 세션 이름(key)을 얻습니다.
1. getId() - 자동생성된 세션의 유니크한 아이디를 얻습니다.
1. getCreationTime() - 세션이 생성된 시간을 구합니다.
1. getLastAccessedTime() - 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구합니다.
1.  - 세션의 유효시간을 설정합니다. 초 단위로 기록합니다.
1.  - 세션의 유효시간을 얻습니다. 가장 최근 요청시점을 기준으로 카운트됩니다.
1.  - 특정 세션의 데이터를 삭제합니다.(섹션 객체의 삭제가 아님)

1.  - 모든 세션의 데이터를(키와벨류==이름과벨류인 엔트리형 객체) 삭제합니다.
	- -현재 요청받은 정보를 담은 request 객체 안에 

	session.invalidate();
	if(request.isRequestedSessionIdValid()){	
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}




2)session 실습

Session 폴더
session_make.jsp
session_check.jsp


2-1)세션값추가 및 링크(session_check.jsp)
	
클라이언트의 요청시 자동생성될 객체 session을 이용하여 내부의 session 값을 추가하라.
	-이름: nickname /value: 홍길동
	-이름: hobbys   /value: 축구, 게임, 독서

그 후 session_check.jsp로 이동하는 링크 작성
	-세션 데이터 활용하기


2-2)차후 활용을 위해 세션의 특정 데이터의 벨류값 저장(session_make.jsp) 및 출력

nick이란 참조변수를 만들고 내부에는 make.jsp에서 만든 session객체의 데이터중 이름을 nickname을 가진 데이터를
	넣어라.
hobbys란 배열타입변수를 만들고 make.jsp에서 만든 session객체의 hobbys란 이름을 가진 데이터의 값을 저장하라


2-3)세션의 기본 디폴트 유효시간 확인 후 유효시간을 1시간으로 설정하라

2-4)세션의 특정 이름을 가진 데이터 삭제

2-5)모든 세션 데이터 삭제 및 세션에 데이터가 남았는지 확인
	-조건식으로 데이터가 남았다면 유효한 세션이 존재함을 출력하고 그렇지 않다면 유효한 세션이 존재하지 않다고 출력


홍길동
[축구, 게임, 독서]
===================================
세션의 유효시간: 3600초
===================================
삭제 후 섹션객체의 데이터 nickname의 값: null
삭제되지 않은 섹션객체의 데이터 hobbys의 값: [축구, 게임, 독서] 
유효한 세션이 존재함
===========================================
유효한 세션이 존재하지 않음.

######################################################################################################






답:





1) session 객체 관련 메서드

1. setAttribute() - 세션에 데이터를 저장합니다.
	/*
	-세션은 쿠키와 마찬가지로 http 통신 데이터를 유지하기위한 수단으로 사용함
	-세션에 데이터를 저장할 때는 JSP 내장객체 session이 지원하는 setAttribute() 메서드를 사용함
	-해당 메서드의 첫번째 매개값으로 세션의 데이터의 이름을 정하고, 두번째 매개값으로 세션에 저장할 값을 정해줌
	*/
1. getAttribute() - 세션에 저장되어 있는 데이터를 얻습니다.
	/*
	-세션에 저장된 데이터는 브라우저 창이 종료될때까지 혹은 세션의 유효시간이만료되기 전까지 웹 어플리케이션의 모든
	jsp페이지에서 사용할수있음
	-세션에 저장된 데이터를 가져오려면 session객체의 getAttribute()메서드를 사용하여 매개값으로 가져올
	데이터의 세션명을 적음
	*/


1. getAttributeNames() - 세션에 저장되어 있는 모든 데이터의 세션 이름(key)을 얻습니다.
1. getId() - 자동생성된 세션의 유니크한 아이디를 얻습니다.
1. getCreationTime() - 세션이 생성된 시간을 구합니다.
1. getLastAccessedTime() - 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구합니다.

1. setMaxInactiveInterval() - 세션의 유효시간을 설정합니다. 초 단위로 기록합니다.

	//세션의 유효시간 설정 1800초로 나온다. 30분임 디폴트값이
	
	/*
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	*/
	
	//세션의 유효시간 디폴트값  1시간으로 변경
	session.setMaxInactiveInterval(60*60);
	
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	
1. getMaxInactiveInterval() - 세션의 유효시간을 얻습니다. 가장 최근 요청시점을 기준으로 카운트됩니다.

1. removeAttribute() - 특정 세션의 데이터를 삭제합니다.(섹션 객체의 삭제가 아님)

1. invalidate() - 모든 세션의 데이터를(키와벨류==이름과벨류인 엔트리형 객체) 삭제합니다.
	-isRequestedSessionIdValid() -현재 요청받은 정보를 담은 request 객체 안에 

	session.invalidate();
	if(request.isRequestedSessionIdValid()){	
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}













2)session 실습






//session_make.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    
<%
	/*
	-세션은 쿠키와 마찬가지로 http 통신 데이터를 유지하기위한 수단으로 사용함
	-세션에 데이터를 저장할 때는 JSP 내장객체 session이 지원하는 setAttribute() 메서드를 사용함
	-해당 메서드의 첫번째 매개값으로 세션의 이름을 정하고, 두번째 매개값으로 세션에 저장할 값을 정해줌
	*/
	
	session.setAttribute("nickname", "홍길동");
	session.setAttribute("hobbys", new String[]{"축구", "게임", "독서"});
	
%>


<a href = "session_check.jsp">세션 데이터 활용하기</a>











//session_check.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import = "java.util.Arrays"%>
    
<%
/*
-세션에 저장된 데이터는 브라우저 창이 종료될때까지 혹은 세션의 유효시간이만료되기 전까지 웹 어플리케이션의 모든
jsp페이지에서 사용할수있음

-세션에 저장된 데이터를 가져오려면 session객체의 getAttribute()메서드를 사용하여 매개값으로 가져올
데이터의 세션명을 적음
*/

	String nick = (String)session.getAttribute("nickname");
	String[] hobbys = (String[])session.getAttribute("hobbys");
	
	out.print(nick+"<br/>");
	out.println(Arrays.toString(hobbys)+"<br/>");
	
	out.print("===================================<br/>");
	
	//세션의 유효시간 설정 1800초로 나온다. 30분임 디폴트값이
	
	/*
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	*/
	
	//세션의 유효시간 디폴트값  1시간으로 변경
	session.setMaxInactiveInterval(60*60);
	
	int sTime = session.getMaxInactiveInterval();
	out.println("세션의 유효시간: " +sTime+"초<br/>");
	out.print("===================================<br/>");
	
	
	//특정세션 데이터(특정 이름을 가진 데이터) 삭제
	session.removeAttribute("nickname");
	nick = (String)session.getAttribute("nickname");
	out.println("삭제 후 섹션객체의 데이터 nickname의 값: "+nick+"<br/>");
	out.println("삭제되지 않은 섹션객체의 데이터 hobbys의 값: "+Arrays.toString(hobbys));
	
	if(request.isRequestedSessionIdValid()){
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}
	out.print("===========================================<br/>");
	
	//모든 세션데이터 삭제 및 세션에 데이터가 남아있는지 확인
	session.invalidate();
	if(request.isRequestedSessionIdValid()){
		out.println("유효한 세션이 존재함");
	} else{
		out.println("유효한 세션이 존재하지 않음.");
	}
	
%>    

