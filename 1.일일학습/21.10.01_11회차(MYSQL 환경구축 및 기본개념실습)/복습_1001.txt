21.10.01_11회차(10강)
=======================================================================================================
*복습
=======================================================================================================


















######################################################################################################
개념정리_환경구축

www.mysql.com
mysql community downloads (이게 무료판이다.)
mysql installer for windows
설치 준비한후 기존에있는건 다 삭제(서버, mysql로 시작하는모든거 제어판, programfile)
custom, next
edit -> other release -> filter -> server, workbench -> 8.0.16 장바구니에 넣기
그다음은 계속 넥스트 또는 excute
3306 포트번호 확인후 넥트스
*비번은 mysql로 설정

gui열어서 mysql 치면 됨
	-혹시나 서버에러나면
		mysql 8.0 command line client에 즉 tui 환경 창열어서 비번입력하면 켜짐 데몬활성화가 안되서 그렇나봄

######################################################################################################














######################################################################################################
개념정리_MYSQL 기본문법

* 데이터 베이스(DataBase)
- 수 많은 데이터들을 관리하기 위한 수단으로 데이터베이스가 사용됩니다.
- 데이터베이스는 데이터의 추가, 삭제, 검색, 수정, 이동 등의 기능이 있습니다.
- 그리고 이 데이터베이스를 관리하는 도구가 DBMS(DataBase Management System)입니다.
- DBMS는 SQL언어와 데이터베이스를 연결해주는 도구입니다.
- DBMS의 종류는 매우 다양하며 그 중 가장 많이 사용되는 DBMS는 RDBMS(관계형 데이터베이스: Relational DBMS)입니다.
- 우리가 흔히 사용하는 오라클, MySQL, MS SQL 등이 대표적인 관계형 데이터베이스입니다.



* MySQL 설치
- www.mysql.com
- 관리자 계정 비밀번호: mysql


* SQL이란?
- Structured Query Language의 약자로서 데이터베이스로부터 데이터를 조회하고 삭제하는 등의  작업을 수행할  때 사용하는 언어입 니다.


* 테이블과 레코드
- RDBMS에서 데이터를 저장하는 장소를 테이블이라고 합니다.
- 테이블은 데이터들을 저장하며 데이터들의 정보를 갖고 있습니다.
- 테이블의 구조와 관련된 정보를 테이블 스키마(Schema)라고 부릅니다.
- 테이블의 구조는 각각의 정보를 저장하는 컬럼(column)과 컬럼 타입 그리고 컬럼의 길이로 구성됩니다.
- 각 컬럼에 저장된 데이터 값을 레코드(record)라고 부릅니다.
- 레코드, 컬럼 그리고 테이블을 사용해서 데이터를 저장하고 조회하는 등의 작업을 수행하는 것을 데이터베이스 프로그래밍이라고 부    릅니다.

* SQL 문법
- SQL문의 특징은 대/소문자를 구분하지 않습니다.

# DDL(Data Definition Language)
- CREATE : 테이블이나 인덱스, 뷰등 데이터베이스 객체를 생성
- DROP : 생성된 데이터베이스 객체를 삭제
- ALTER : 이미 생성된 데이터베이스 객체를 수정
- TRANCATE : 테이블이나 클러스터의 데이터를 통째로 삭제

# DML(Data Manipulation Language)
- SELECT : 테이블이나 뷰에 있는 데이터 조회
- INSERT : 데이터를 신규로 생성
- UPDATE : 이미 생성된 데이터를 수정
- DELETE : 데이터를 삭제
- COMMIT : 트랜잭션 처리, 변경된 데이터를 최종 적용
- ROLLBACK : 트랜잭션 처리, 변경된 데이터를 적용하지 않고 이전으로 되돌림
# DCL(Data Control Language)
- GRANT : 사용자에게 특정 권한을 부여
- REVOKE : 사용자에게 부여된 권한을 회수





1. 데이터베이스 생성
- create database [db이름] default character set utf8;

2. 사용자 계정 생성과 권한 부여
- 관리자 계정의 이름은 'root'입니다.

a. 사용자 계정 생성
- create user '[계정명]' identified by '[암호]';

b. 권한 부여
- grant [권한 목록] on [데이터베이스이름].[대상] to '[계정]';

3. 테이블 생성 문법
3-1. create table [테이블 이름] (
[컬럼명1]  [컬럼데이터 타입(byte)],
[컬럼명2]  [컬럼데이터 타입(byte)],
....
);

3-2. 테이블 생성시 필요한 SQL 데이터 타입(프로그램 별 문법에 따른 타입정리)

A. MYSQL 문법
- 문자형 컬럼일 경우 CHAR, VARCHAR
- 정수형 컬럼일 경우 INT
- 날짜형 컬럼일 경우 DATETIME

A. ORACLE 문법
- 문자형 컬럼일 경우 VARCHAR2
- 정수형 컬럼일 경우 NUMBER
- 날짜형 컬럼일 경우 DATE
- 주요 키(primary key)

a. 테이블에 있는 레코드를 조회할 때 특정 값을 이용해서 조회한다면 좀 더 빠르게 레코드를 검색할 수 있습니다.

b. 주요 키로 지정된 컬럼은 하나의 테이블에 저장된 모든 레코드가 중복된 값 없이 모두 다른 값을 갖는 레코드를 말합니다.

c. 주로 회원 아이디나 게시판 글 번호 등이 주요 키로 지정됩니다.



1. DROP 문
- 테이블을 삭제할 수 있는 쿼리문입니다.
- drop table [테이블 이름];

2. commitINSERT 문
- insert문은 데이터를 저장하는 용도의 쿼리문입니다.
- insert into [테이블명] ([컬럼1], [컬럼2], ... ) values ([값1], [값2], ... );
- 테이블명 뒤에 컬럼명을 명시하지 않으면 전체 컬럼에 대해 값을 지정해야 합니다.

3. UPDATE 문
- update 쿼리는 데이터를 수정하는 용도입니다.
- update [테이블명] set [수정할 컬럼]=[수정할 값] where [조건];

4. DELETE 문
- delete 쿼리는 데이터를 삭제하는 용도입니다.
- delete from [테이블명] where [조건];

5. SELECT 문
- select 쿼리는 데이터베이스로부터 정보를 조회하는 문장입니다.
- select [컬럼1], [컬럼2], ... from [테이블명] where [조건];
- 모든 컬럼을 조회하고 싶으면 조회할 컬럼 이름에 * 를 써줍니다. ex) select * from member;
- where절로 조건을 지정할 때 like를 사용하면 특정 문장을 포함하고 있는지 확인할 수 있습니다. ex) select * from member where name like '홍%';
-> name 컬럼의 값이 '홍******'의 형태를 갖는지 확인

6. SELECT 문의 정렬
- 게시판이나 회원목록 등을 출력할 때 이름 순서나 아이디 오름차순 혹은 글 번호순으로 정렬하는 것이 일반적입니다.
- sql 쿼리문에서는 where 조건절 뒤에 order by절을 사용하여 데이터를 정렬합니다.
- 오름차순이면 asc, 내림차순이면 desc를 사용합니다.

7.commit 
- 서버에 입력한 쿼리문들의 상태지점을 저장하는 용도.
- commit과 rollback은 DML문에서만 작동합니다.

8. rollback
- commit된 위치를 기준으로 commit 이후에 작성 쿼리문을 commit한 시점으로 되돌리는 문장.


w3schools.com 에서 sql 공부해라





<그후 자동으로 commit 다시 저장해라 수업원할한 진행을 위해서>
********트랜젝션은 최종커밋지점으로 돌아가는것이다.
	-그런데 커밋은 오토커밋되어있는데 이러면 위험하다.
	-수동으로 바꾸는법 edit--preferences-sqleditor-sql execution
		-거기에 new connections ~ 새로운 연결할때마다 자동으로 커밋해주는 모드를 사용하겠느냐 있는데
			이걸 체크박스 풀면 수동으로 커밋가능

######################################################################################################


















######################################################################################################
예제44) MYSQL 기본 문법 실습


###참고: 
	-워크벤치에서 sql문 실행명령 : 컨트롤 + enter
	-관리자 계정명: root // 비밀번호: mysql

	********쿼리문을 작성하는 페이지에서 계속 디비이름을 적어줘야하는데 새로만든 디비객체를 디폴트화하면 그러지않아도된다
		-디폴트화: 해당객체 우클릭-set as default schema
			-기본DB로 만들기 성공

#워크벤치에서 sql문 실행명령 : 컨트롤 + enter
#관리자 계정명: root // 비밀번호: mysql


1)데이터베이스 객체생성명령	
	-데이터베이스 객체 이름: jsp_practice, 기본 문자 : 한국어 utf로 처리



2)DB사용자 계정생성_앞 jsp 아이디, 뒤 jsp 비번을 뜻함
		-아이디: jsp, 비번 : jsp


3)사용자에게 권한 부여_위에 만든 jsp 계정에게 모든권한 부여 


4)테이블 생성명령
	-id(20),pw(20),name(30),email(80)(모두 문자)
	-id는 중복금지, pw와 name을 입력안할시 table에 저장금지



5)테이블 전체 조회


6)데이터 저장 INSERT
	-id: abc123, pw:1234, name:홍길동 인 데이터를 저장후 테이블 전체 조회
	-그후 7개의 데이터 정도를 알아서 더미 만들어라 단 id의 마지막숫자는 서로 오름차순되도록 마지막숫자만 바꾸는 식으로해라
	-이름이 같은것도 만들어라



7)데이터 수정 UPDATE
	-2번데이터의 name의 벨류를 신사임당으로 바꾸고 email을 shin012@daum.net로 변경하라(id를 이용해서) 
	-3번데이터의 이름을 손흥민으로 변경하고 비밀번호를 7777로 하라 (id를 이용해서) 


****데이터 삭제 DELETE
	-4번째 데이터를 삭제하라(id를 이용해서)


8)데이터 조회 SELECT
	8-1)현재 만든 테이블 member에서 필드인 id속성을 가진 필드와 벨류들을 출력해라 
	8-2)member에서 name과 email 속성을 가진 컬럼을 모두 출력해라
	8-3-1)member table에서 email 속성을 가진 컬럼을 출력하라
	8-3-2)member table에서 email 속성을 가진 컬럼이면서 id가 abc123인놈을 출력하라(신사임당의 email만 보기)
	

9)ID가 bbb456인 회원의 비밀번호를 조회


10-1)이름이 이로 시작하는사람 조회

10-2)이름이 민으로 끝나는 사람 조회

10-3)이름이 중간에 성이 들어가는 사람 조회


11)email이 naver인 사람의 이름정보를 조회하세요


12)검색 데이터 정렬 
12-1)member 객체의 데이터를 이름의 오름차순으로 정렬
12-2)member 객체의 데이터를 id의 내림차순으로 정렬
12-3)이름을 오름차순정렬, 같은 이름은 id의 오름차순정렬
12-4)이름을 오름차순정렬, 같은 이름은 id의 내림차순 정렬
12-5)이름이 '이'로 시작하는 회원의 모든 컬럼을 ID오름차순으로 정렬



13)트랜잭션 처리 
13-0)'가가가', '1234', '가가가', '가가가' 이런식으로 나,다까지 row 3개를 추가하라 
	-하기전에 자동지점저장을 풀고해라
	-이때 처음 가가가를 만들고 나면 지점을 저장해라
	-member 전체 컬럼조회를 통해 가,나,다 데이터가 멀쩡히 다 들어옴을 확인하라
13-1)트랜잭션실시한 후 다시 member 출력해서 나,다가 사라지고 가만 남음을 확인해라


14)테이블 객체 삭제
14-1)member 테이블삭제 후 확인하여 없음을 확인
14-2)트랜젝션으로 이전 커밋지점으로 돌리려 노력해봐야 복구안됨을 확인

<drop으로 날린 더미데이터 다시 복구 : 1)db객체 생성 부분 ctrl enter 2)더미데이터 ctrl enter>



15)member 테이블의 필드만 남겨두고 모든 row를 삭제하라 : 내부만 비워짐 테이블 필드는 남아있음 응용프로그래머가 잘 안한다. 이건 db관리자가 사용하는데 개념은 알아야하니 한다.


16)테이블 컬럼 수정
16-1)컬럼추가_address
16-2)컬럼삭제_email



<그후 자동으로 commit 다시 저장해라 수업원할한 진행을 위해서>
********트랜젝션은 최종커밋지점으로 돌아가는것이다.
	-그런데 커밋은 오토커밋되어있는데 이러면 위험하다.
	-수동으로 바꾸는법 edit--preferences-sqleditor-sql execution
		-거기에 new connections ~ 새로운 연결할때마다 자동으로 커밋해주는 모드를 사용하겠느냐 있는데
			이걸 체크박스 풀면 수동으로 커밋가능


######################################################################################################

​



답:

#워크벤치에서 sql문 실행명령 : 컨트롤 + enter
#관리자 계정명: root // 비밀번호: mysql


1)데이터베이스 객체생성명령	
	-데이터베이스 객체 이름: jsp_practice, 기본 문자 : 한국어 utf로 처리
CREATE DATABASE jsp_practice default character set utf8;


2)DB사용자 계정생성_앞 jsp 아이디, 뒤 jsp 비번을 뜻함
		-아이디: jsp, 비번 : jsp
CREATE USER 'jsp' identified by 'jsp';

3)사용자에게 권한 부여_위에 만든 jsp 계정에게 모든권한 부여 
GRANT ALL PRIVILEGES ON jsp_practice.* to 'jsp';

4)테이블 생성명령
	-id(20),pw(20),name(30),email(80)(모두 문자)
	-id는 중복금지, pw와 name을 입력안할시 table에 저장금지

#primary key - 컬럼의 주요키를 뜻하며 중복 데이터를 방지함
#not null - 데이터에 null 값이 들어오는 것을 방지
CREATE TABLE member(
    id varchar(20) primary key,
    pw varchar(20) not null,  
    name varchar(30) not null,
    email varchar(80)
);

5)테이블 전체 조회
select * from member;

6)데이터 저장 INSERT
	-id: abc123, pw:1234, name:홍길동 인 데이터를 저장후 테이블 전체 조회
	-그후 7개의 데이터 정도를 알아서 더미 만들어라 단 id의 마지막숫자는 서로 오름차순되도록 마지막숫자만 바꾸는 식으로해라
	-이름이 같은것도 만들어라

INSERT INTO member (id, pw, name)
VALUES('abc123', '1234', '홍길동');

select * from member;

INSERT INTO member
VALUES ('def4561', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4562', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4563', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4564', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4565', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4566', '4433', '이순신', 'aaa@bbb.com');
INSERT INTO member
VALUES ('def4567', '4433', '이순신', 'aaa@bbb.com');

select * from member;


7)데이터 수정 UPDATE
	-2번데이터의 name의 벨류를 신사임당으로 바꾸고 email을 shin012@daum.net로 변경하라(id를 이용해서) 
	-3번데이터의 이름을 손흥민으로 변경하고 비밀번호를 7777로 하라 (id를 이용해서) 
	
UPDATE member
SET 
name ='신사임당',
email = 'shin012@daum.net'
WHERE id = 'def456';

UPDATE member
SET 
name = '손흥민',
pw = '7777'
WHERE id = 'def4561';


#데이터 삭제 DELETE
	-4번째 데이터를 삭제하라(id를 이용해서)
DELETE FROM member WHERE id = 'def4562';



select * from member;

8)데이터 조회 SELECT

	8-1)현재 만든 테이블 member에서 필드인 id속성을 가진 필드와 벨류들을 출력해라 
SELECT id FROM member;

	8-2)member에서 name과 email 속성을 가진 컬럼을 모두 출력해라
SELECT name, email FROM member;
SELECT * FROM member;

	8-3-1)member table에서 email 속성을 가진 컬럼을 출력하라
SELECT email FROM member; #email field의 모든 벨류 출력
	8-3-2)member table에서 email 속성을 가진 컬럼이면서 id가 abc123인놈을 출력하라(신사임당의 email만 보기)
SELECT email FROM member
WHERE ID = 'def456'; #신사임당의 email만보기

	
9)ID가 bbb456인 회원의 비밀번호를 조회
SELECT pw FROM member
WHERE id = 'def456';

10-1)이름이 이로 시작하는사람 조회
SELECT * FROM member
WHERE name LIKE '이%';

10-2)이름이 민으로 끝나는 사람 조회
SELECT * FROM member
WHERE name LIKE '%민';

10-3)이름이 중간에 성이 들어가는 사람 조회
SELECT * FROM member
WHERE name LIKE '%성%';

11)email이 naver인 사람의 이름정보를 조회하세요
SELECT name FROM member
where email LIKE '%naver%';

12)검색 데이터 정렬 
12-1)member 객체의 데이터를 이름의 오름차순으로 정렬
SELECT * FROM member ORDER BY name ASC;

12-2)member 객체의 데이터를 id의 내림차순으로 정렬
SELECT * FROM member ORDER BY id DESC;

12-3)이름을 오름차순정렬, 같은 이름은 id의 오름차순정렬
SELECT * FROM member ORDER BY name ASC;
SELECT * FROM member ORDER BY name ASC, id ASC;

12-4)이름을 오름차순정렬, 같은 이름은 id의 내림차순 정렬
SELECT * FROM member ORDER BY name ASC, id DESC;

12-5)이름이 '이'로 시작하는 회원의 모든 컬럼을 ID오름차순으로 정렬
select * from member 
where name like '이%'
ORDER BY id ASC;


13)트랜잭션 처리 
13-0)'가가가', '1234', '가가가', '가가가' 이런식으로 나,다까지 row 3개를 추가하라 
	-하기전에 자동지점저장을 풀고해라
	-이때 처음 가가가를 만들고 나면 지점을 저장해라
	-member 전체 컬럼조회를 통해 가,나,다 데이터가 멀쩡히 다 들어옴을 확인하라

INSERT INTO member VALUES ('가가가', '1234', '가가가', '가가가');

COMMIT;
INSERT INTO member VALUES('나나나', '1234', '나나나', '나나나');
INSERT INTO member VALUES('다다다', '1234', '다다다', '다다다');


SELECT * FROM member;

13-1)트랜잭션실시한 후 다시 member 출력해서 나,다가 사라지고 가만 남음을 확인해라
ROLLBACK; #이거 후 SELECT 하면 나, 다 사라짐 트랜잭션 완료
SELECT * FROM member;

14)테이블 객체 삭제
14-1)member 테이블삭제 후 확인하여 없음을 확인
DROP TABLE member;
SELECT * FROM member;

14-2)트랜젝션으로 이전 커밋지점으로 돌리려 노력해봐야 복구안됨을 확인
ROLLBACK;	//이렇게해도 복구안된다. drop은 객체자체를 날리는 것이니 위험하다
SELECT * FROM member;

<drop으로 날린 더미데이터 다시 복구 : 1)db객체 생성 부분 ctrl enter 2)더미데이터 ctrl enter>

SELECT * FROM member; //복구된거 확인


15)member 테이블의 필드만 남겨두고 모든 row를 삭제하라 : 내부만 비워짐 테이블 필드는 남아있음 응용프로그래머가 잘 안한다. 이건 db관리자가 사용하는데 개념은 알아야하니 한다.
TRUNCATE TABLE member;
SELECT * FROM member;

16)테이블 컬럼 수정
16-1)컬럼추가_address
ALTER TABLE member ADD address varchar(100);
SELECT * FROM member;

16-2)컬럼삭제_email
ALTER TABLE member DROP COLUMN email;
SELECT * FROM member;

<그후 자동으로 commit 다시 저장해라 수업원할한 진행을 위해서>

