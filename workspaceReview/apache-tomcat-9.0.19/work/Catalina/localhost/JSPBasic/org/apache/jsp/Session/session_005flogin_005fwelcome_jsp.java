/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.19
 * Generated at: 2021-09-27 13:37:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Session;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class session_005flogin_005fwelcome_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/Session/../Application/app_basic01.jsp", Long.valueOf(1632749834839L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");


/*

  1.로그인하지 않은 사용자가 주소창에 이 페이지의 URL을 적고 들어왔을 경우 로그인창으로 돌려보내는

     코드를 작성하세요.

	

  2.로그인한 회원의 아이디와 별명을 통해 "nick(id)님 환영하세요"를 출력하세요

 

  3.a태그로 로그인창으로 돌아가는 링크와 request 폴더에 앨범페이지로

  갈 수 있는 링크 2개를 작성하세요.

 

  4.a태그로 로그아웃페이지에 가서 거기서 로그아웃할수 있도록 하시오. (로그아웃 파일이름 : session_logout.jsp)

	-로그아웃안하면 세션이 계속 유지되고있기때문에 1,2,3 제대로 작성했어도 로그인 페이지로 갔을때

		거기에서 welcome.jsp 주소를 url에 입력하면 들어가짐;; 세션이 당연히 남아있으니 만료되거나

		html꺼질때까지 되겠지 그러니 4번을 꼭 구현해야함

 

  ***5.session_login.jsp 위치에서 작업: 로그인이 된사람은 welcome페이지에서 로그인 창으로 돌아가는것을 클릭했을때

	그냥 로그인창이 나오는것이 아닌 이미 누구누구님은 로그인된 사람입니다. 라는 것을 출력

 

	**쿠키와 세션의 차이: 브라우저 껐다켰을때 로그인이 유지되는가? 세션은 안되고 쿠키는됨 세션 안되는거

	확인해봐라(그럼 1번 작성후 4번안만들어도 처음 로그인할때랑 브라우저껐다켰을때는 welcome주소쳐도

		login으로 와지겠네? session값이 없으니까 이거도 확인해라) ㅇㅇ 됨

*/




	if(session.getAttribute("user_id") == null){
		response.sendRedirect("session_login.jsp");
	} 
		
	String id = (String)session.getAttribute("user_id");
	String nick = (String)session.getAttribute("nick");

      out.write("\r\n");
      out.write("\r\n");
      out.write("​\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.print( nick );
      out.write('(');
      out.print( id );
      out.write(")님! 로그인 축하드립니당 ㅎㅎ <br/>\r\n");
      out.write("<a href = \"session_login.jsp\">로그인창으로 되돌아가기</a><br/>\r\n");
      out.write("<a href = \"../JspObjRequest/req_album.jsp\">앨범 고르러가기</a><br/>\r\n");
      out.write("<a href = \"session_logout.jsp\">로그아웃</a><br/>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");

	int count = 0;
	if(application.getAttribute("visit")!=null){
		count = (Integer)application.getAttribute("visit");
	}
	count++;
	application.setAttribute("visit", count);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr/><h3>방문자 수 : ");
      out.print( count );
      out.write("</h3><hr/>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
